
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009ec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b1c  08000b1c  00010b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b28  08000b28  00010b30  2**0
                  CONTENTS
  4 .ARM          00000000  08000b28  08000b28  00010b30  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b28  08000b30  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b28  08000b28  00010b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b2c  08000b2c  00010b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000b30  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000b30  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000445b  00000000  00000000  00010b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a36  00000000  00000000  00014fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c1c  00000000  00000000  000159ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e8  00000000  00000000  00016608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000190  00000000  00000000  000167f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000c55  00000000  00000000  00016980  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000021bc  00000000  00000000  000175d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a92c  00000000  00000000  00019791  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000240bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000638  00000000  00000000  00024138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b04 	.word	0x08000b04

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b04 	.word	0x08000b04

08000170 <EXTI9_Callback>:

unsigned int IRQ_Flag = 0;


void EXTI9_Callback(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	IRQ_Flag =1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <EXTI9_Callback+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000001c 	.word	0x2000001c

08000188 <main>:
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b086      	sub	sp, #24
 800018c:	af00      	add	r7, sp, #0

	//Enable clock
	RCC_GPIOA_CLK_EN();
 800018e:	4b16      	ldr	r3, [pc, #88]	; (80001e8 <main+0x60>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a15      	ldr	r2, [pc, #84]	; (80001e8 <main+0x60>)
 8000194:	f043 0304 	orr.w	r3, r3, #4
 8000198:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800019a:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <main+0x60>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a12      	ldr	r2, [pc, #72]	; (80001e8 <main+0x60>)
 80001a0:	f043 0308 	orr.w	r3, r3, #8
 80001a4:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN();
 80001a6:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <main+0x60>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a0f      	ldr	r2, [pc, #60]	; (80001e8 <main+0x60>)
 80001ac:	f043 0301 	orr.w	r3, r3, #1
 80001b0:	6193      	str	r3, [r2, #24]

	//Set EXTI Configuration
	EXTI_PinConfig_t EXTI_CGF;
	EXTI_CGF.EXTI_PIN = EXTI9PB9;
 80001b2:	4a0e      	ldr	r2, [pc, #56]	; (80001ec <main+0x64>)
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80001b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CGF.Trigger_Case = EXTI_Trigger_RISING;
 80001bc:	2300      	movs	r3, #0
 80001be:	743b      	strb	r3, [r7, #16]
	EXTI_CGF.P_IRQ_CallBack = EXTI9_Callback;
 80001c0:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <main+0x68>)
 80001c2:	617b      	str	r3, [r7, #20]
	EXTI_CGF.IRQ_EN = EXTI_IRQ_Enable;
 80001c4:	2301      	movs	r3, #1
 80001c6:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_CGF);
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4618      	mov	r0, r3
 80001cc:	f000 fb1e 	bl	800080c <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <main+0x6c>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	601a      	str	r2, [r3, #0]
	while(1)
	{
		if(IRQ_Flag)
 80001d6:	4b07      	ldr	r3, [pc, #28]	; (80001f4 <main+0x6c>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d0fb      	beq.n	80001d6 <main+0x4e>
		{
			IRQ_Flag =0;
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <main+0x6c>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 80001e4:	e7f7      	b.n	80001d6 <main+0x4e>
 80001e6:	bf00      	nop
 80001e8:	40021000 	.word	0x40021000
 80001ec:	08000b1c 	.word	0x08000b1c
 80001f0:	08000171 	.word	0x08000171
 80001f4:	2000001c 	.word	0x2000001c

080001f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <LoopForever+0x6>)
  ldr r1, =_edata
 8000202:	490d      	ldr	r1, [pc, #52]	; (8000238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000204:	4a0d      	ldr	r2, [pc, #52]	; (800023c <LoopForever+0xe>)
  movs r3, #0
 8000206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000208:	e002      	b.n	8000210 <LoopCopyDataInit>

0800020a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800020c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020e:	3304      	adds	r3, #4

08000210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000214:	d3f9      	bcc.n	800020a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000216:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000218:	4c0a      	ldr	r4, [pc, #40]	; (8000244 <LoopForever+0x16>)
  movs r3, #0
 800021a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800021c:	e001      	b.n	8000222 <LoopFillZerobss>

0800021e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000220:	3204      	adds	r2, #4

08000222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000224:	d3fb      	bcc.n	800021e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000226:	f000 fc49 	bl	8000abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800022a:	f7ff ffad 	bl	8000188 <main>

0800022e <LoopForever>:

LoopForever:
    b LoopForever
 800022e:	e7fe      	b.n	800022e <LoopForever>
  ldr   r0, =_estack
 8000230:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000238:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800023c:	08000b30 	.word	0x08000b30
  ldr r2, =_sbss
 8000240:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000244:	20000068 	.word	0x20000068

08000248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000248:	e7fe      	b.n	8000248 <ADC1_2_IRQHandler>
	...

0800024c <Enable_NVIC>:
 */



void Enable_NVIC(uint16_t IRQ)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	2b0f      	cmp	r3, #15
 800025a:	d854      	bhi.n	8000306 <Enable_NVIC+0xba>
 800025c:	a201      	add	r2, pc, #4	; (adr r2, 8000264 <Enable_NVIC+0x18>)
 800025e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000262:	bf00      	nop
 8000264:	080002a5 	.word	0x080002a5
 8000268:	080002b3 	.word	0x080002b3
 800026c:	080002c1 	.word	0x080002c1
 8000270:	080002cf 	.word	0x080002cf
 8000274:	080002dd 	.word	0x080002dd
 8000278:	080002eb 	.word	0x080002eb
 800027c:	080002eb 	.word	0x080002eb
 8000280:	080002eb 	.word	0x080002eb
 8000284:	080002eb 	.word	0x080002eb
 8000288:	080002eb 	.word	0x080002eb
 800028c:	080002f9 	.word	0x080002f9
 8000290:	080002f9 	.word	0x080002f9
 8000294:	080002f9 	.word	0x080002f9
 8000298:	080002f9 	.word	0x080002f9
 800029c:	080002f9 	.word	0x080002f9
 80002a0:	080002f9 	.word	0x080002f9
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80002a4:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <Enable_NVIC+0xc4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a19      	ldr	r2, [pc, #100]	; (8000310 <Enable_NVIC+0xc4>)
 80002aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ae:	6013      	str	r3, [r2, #0]
		break;
 80002b0:	e029      	b.n	8000306 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <Enable_NVIC+0xc4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a16      	ldr	r2, [pc, #88]	; (8000310 <Enable_NVIC+0xc4>)
 80002b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002bc:	6013      	str	r3, [r2, #0]
		break;
 80002be:	e022      	b.n	8000306 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <Enable_NVIC+0xc4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a12      	ldr	r2, [pc, #72]	; (8000310 <Enable_NVIC+0xc4>)
 80002c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ca:	6013      	str	r3, [r2, #0]
		break;
 80002cc:	e01b      	b.n	8000306 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <Enable_NVIC+0xc4>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a0f      	ldr	r2, [pc, #60]	; (8000310 <Enable_NVIC+0xc4>)
 80002d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d8:	6013      	str	r3, [r2, #0]
		break;
 80002da:	e014      	b.n	8000306 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ1_EXTI4_Enable;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <Enable_NVIC+0xc4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <Enable_NVIC+0xc4>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6013      	str	r3, [r2, #0]
		break;
 80002e8:	e00d      	b.n	8000306 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <Enable_NVIC+0xc4>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a08      	ldr	r2, [pc, #32]	; (8000310 <Enable_NVIC+0xc4>)
 80002f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002f4:	6013      	str	r3, [r2, #0]
		break;
 80002f6:	e006      	b.n	8000306 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <Enable_NVIC+0xc8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a05      	ldr	r2, [pc, #20]	; (8000314 <Enable_NVIC+0xc8>)
 80002fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000302:	6013      	str	r3, [r2, #0]
		break;
 8000304:	bf00      	nop
	}
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr
 8000310:	e000e100 	.word	0xe000e100
 8000314:	e000e104 	.word	0xe000e104

08000318 <Disable_NVIC>:


void Disable_NVIC(uint16_t IRQ)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000322:	88fb      	ldrh	r3, [r7, #6]
 8000324:	2b0f      	cmp	r3, #15
 8000326:	d854      	bhi.n	80003d2 <Disable_NVIC+0xba>
 8000328:	a201      	add	r2, pc, #4	; (adr r2, 8000330 <Disable_NVIC+0x18>)
 800032a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032e:	bf00      	nop
 8000330:	08000371 	.word	0x08000371
 8000334:	0800037f 	.word	0x0800037f
 8000338:	0800038d 	.word	0x0800038d
 800033c:	0800039b 	.word	0x0800039b
 8000340:	080003a9 	.word	0x080003a9
 8000344:	080003b7 	.word	0x080003b7
 8000348:	080003b7 	.word	0x080003b7
 800034c:	080003b7 	.word	0x080003b7
 8000350:	080003b7 	.word	0x080003b7
 8000354:	080003b7 	.word	0x080003b7
 8000358:	080003c5 	.word	0x080003c5
 800035c:	080003c5 	.word	0x080003c5
 8000360:	080003c5 	.word	0x080003c5
 8000364:	080003c5 	.word	0x080003c5
 8000368:	080003c5 	.word	0x080003c5
 800036c:	080003c5 	.word	0x080003c5
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000370:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <Disable_NVIC+0xc4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a19      	ldr	r2, [pc, #100]	; (80003dc <Disable_NVIC+0xc4>)
 8000376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800037a:	6013      	str	r3, [r2, #0]
		break;
 800037c:	e029      	b.n	80003d2 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <Disable_NVIC+0xc4>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a16      	ldr	r2, [pc, #88]	; (80003dc <Disable_NVIC+0xc4>)
 8000384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000388:	6013      	str	r3, [r2, #0]
		break;
 800038a:	e022      	b.n	80003d2 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <Disable_NVIC+0xc4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a12      	ldr	r2, [pc, #72]	; (80003dc <Disable_NVIC+0xc4>)
 8000392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000396:	6013      	str	r3, [r2, #0]
		break;
 8000398:	e01b      	b.n	80003d2 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 800039a:	4b10      	ldr	r3, [pc, #64]	; (80003dc <Disable_NVIC+0xc4>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a0f      	ldr	r2, [pc, #60]	; (80003dc <Disable_NVIC+0xc4>)
 80003a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003a4:	6013      	str	r3, [r2, #0]
		break;
 80003a6:	e014      	b.n	80003d2 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ1_EXTI4_Disable;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <Disable_NVIC+0xc4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <Disable_NVIC+0xc4>)
 80003ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003b2:	6013      	str	r3, [r2, #0]
		break;
 80003b4:	e00d      	b.n	80003d2 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <Disable_NVIC+0xc4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a08      	ldr	r2, [pc, #32]	; (80003dc <Disable_NVIC+0xc4>)
 80003bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003c0:	6013      	str	r3, [r2, #0]
		break;
 80003c2:	e006      	b.n	80003d2 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <Disable_NVIC+0xc8>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <Disable_NVIC+0xc8>)
 80003ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ce:	6013      	str	r3, [r2, #0]
		break;
 80003d0:	bf00      	nop
	}
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	e000e180 	.word	0xe000e180
 80003e0:	e000e184 	.word	0xe000e184

080003e4 <Update_EXTI>:



void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF input =>> Floating input
	GPIO_PinConfig_t PinCfg;
	//update the GPIO pin to be floating input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	891b      	ldrh	r3, [r3, #8]
 80003f0:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80003f2:	2301      	movs	r3, #1
 80003f4:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	f107 0208 	add.w	r2, r7, #8
 80003fe:	4611      	mov	r1, r2
 8000400:	4618      	mov	r0, r3
 8000402:	f000 fa61 	bl	80008c8 <MCAL_GPIO_Init>
	//---------------------------------------------------------------

	//2- Update AFIO to route between EXTI line with PORT A,B,C,D

	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber /4 ;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	089b      	lsrs	r3, r3, #2
 800040c:	b29b      	uxth	r3, r3
 800040e:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber %4) * 4;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	f003 0303 	and.w	r3, r3, #3
 800041a:	b2db      	uxtb	r3, r3
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	73bb      	strb	r3, [r7, #14]

	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port));
 8000420:	4a6b      	ldr	r2, [pc, #428]	; (80005d0 <Update_EXTI+0x1ec>)
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	3302      	adds	r3, #2
 8000426:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	4969      	ldr	r1, [pc, #420]	; (80005d4 <Update_EXTI+0x1f0>)
 8000430:	428b      	cmp	r3, r1
 8000432:	d01a      	beq.n	800046a <Update_EXTI+0x86>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	4967      	ldr	r1, [pc, #412]	; (80005d8 <Update_EXTI+0x1f4>)
 800043a:	428b      	cmp	r3, r1
 800043c:	d012      	beq.n	8000464 <Update_EXTI+0x80>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	4966      	ldr	r1, [pc, #408]	; (80005dc <Update_EXTI+0x1f8>)
 8000444:	428b      	cmp	r3, r1
 8000446:	d00a      	beq.n	800045e <Update_EXTI+0x7a>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	4964      	ldr	r1, [pc, #400]	; (80005e0 <Update_EXTI+0x1fc>)
 800044e:	428b      	cmp	r3, r1
 8000450:	d102      	bne.n	8000458 <Update_EXTI+0x74>
 8000452:	f06f 0378 	mvn.w	r3, #120	; 0x78
 8000456:	e00a      	b.n	800046e <Update_EXTI+0x8a>
 8000458:	f06f 030f 	mvn.w	r3, #15
 800045c:	e007      	b.n	800046e <Update_EXTI+0x8a>
 800045e:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8000462:	e004      	b.n	800046e <Update_EXTI+0x8a>
 8000464:	f06f 031e 	mvn.w	r3, #30
 8000468:	e001      	b.n	800046e <Update_EXTI+0x8a>
 800046a:	f06f 030f 	mvn.w	r3, #15
 800046e:	4858      	ldr	r0, [pc, #352]	; (80005d0 <Update_EXTI+0x1ec>)
 8000470:	7bf9      	ldrb	r1, [r7, #15]
 8000472:	401a      	ands	r2, r3
 8000474:	1c8b      	adds	r3, r1, #2
 8000476:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) << AFIO_EXTICR_position );
 800047a:	4a55      	ldr	r2, [pc, #340]	; (80005d0 <Update_EXTI+0x1ec>)
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3302      	adds	r3, #2
 8000480:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	4952      	ldr	r1, [pc, #328]	; (80005d4 <Update_EXTI+0x1f0>)
 800048a:	428b      	cmp	r3, r1
 800048c:	d016      	beq.n	80004bc <Update_EXTI+0xd8>
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	4951      	ldr	r1, [pc, #324]	; (80005d8 <Update_EXTI+0x1f4>)
 8000494:	428b      	cmp	r3, r1
 8000496:	d00f      	beq.n	80004b8 <Update_EXTI+0xd4>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	494f      	ldr	r1, [pc, #316]	; (80005dc <Update_EXTI+0x1f8>)
 800049e:	428b      	cmp	r3, r1
 80004a0:	d008      	beq.n	80004b4 <Update_EXTI+0xd0>
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	494e      	ldr	r1, [pc, #312]	; (80005e0 <Update_EXTI+0x1fc>)
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d101      	bne.n	80004b0 <Update_EXTI+0xcc>
 80004ac:	2303      	movs	r3, #3
 80004ae:	e006      	b.n	80004be <Update_EXTI+0xda>
 80004b0:	2300      	movs	r3, #0
 80004b2:	e004      	b.n	80004be <Update_EXTI+0xda>
 80004b4:	2302      	movs	r3, #2
 80004b6:	e002      	b.n	80004be <Update_EXTI+0xda>
 80004b8:	2301      	movs	r3, #1
 80004ba:	e000      	b.n	80004be <Update_EXTI+0xda>
 80004bc:	2300      	movs	r3, #0
 80004be:	7bb9      	ldrb	r1, [r7, #14]
 80004c0:	408b      	lsls	r3, r1
 80004c2:	4618      	mov	r0, r3
 80004c4:	4942      	ldr	r1, [pc, #264]	; (80005d0 <Update_EXTI+0x1ec>)
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	4302      	orrs	r2, r0
 80004ca:	3302      	adds	r3, #2
 80004cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//---------------------------------------------------------------

	//3- Update rising or falling register
	EXTI->RTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004d0:	4b44      	ldr	r3, [pc, #272]	; (80005e4 <Update_EXTI+0x200>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	8812      	ldrh	r2, [r2, #0]
 80004d8:	4611      	mov	r1, r2
 80004da:	2201      	movs	r2, #1
 80004dc:	408a      	lsls	r2, r1
 80004de:	43d2      	mvns	r2, r2
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a40      	ldr	r2, [pc, #256]	; (80005e4 <Update_EXTI+0x200>)
 80004e4:	400b      	ands	r3, r1
 80004e6:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004e8:	4b3e      	ldr	r3, [pc, #248]	; (80005e4 <Update_EXTI+0x200>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	8812      	ldrh	r2, [r2, #0]
 80004f0:	4611      	mov	r1, r2
 80004f2:	2201      	movs	r2, #1
 80004f4:	408a      	lsls	r2, r1
 80004f6:	43d2      	mvns	r2, r2
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a3a      	ldr	r2, [pc, #232]	; (80005e4 <Update_EXTI+0x200>)
 80004fc:	400b      	ands	r3, r1
 80004fe:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	7b1b      	ldrb	r3, [r3, #12]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d10b      	bne.n	8000520 <Update_EXTI+0x13c>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000508:	4b36      	ldr	r3, [pc, #216]	; (80005e4 <Update_EXTI+0x200>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	8812      	ldrh	r2, [r2, #0]
 8000510:	4611      	mov	r1, r2
 8000512:	2201      	movs	r2, #1
 8000514:	408a      	lsls	r2, r1
 8000516:	4611      	mov	r1, r2
 8000518:	4a32      	ldr	r2, [pc, #200]	; (80005e4 <Update_EXTI+0x200>)
 800051a:	430b      	orrs	r3, r1
 800051c:	6093      	str	r3, [r2, #8]
 800051e:	e025      	b.n	800056c <Update_EXTI+0x188>
	}else if (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	7b1b      	ldrb	r3, [r3, #12]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d10b      	bne.n	8000540 <Update_EXTI+0x15c>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000528:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <Update_EXTI+0x200>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	8812      	ldrh	r2, [r2, #0]
 8000530:	4611      	mov	r1, r2
 8000532:	2201      	movs	r2, #1
 8000534:	408a      	lsls	r2, r1
 8000536:	4611      	mov	r1, r2
 8000538:	4a2a      	ldr	r2, [pc, #168]	; (80005e4 <Update_EXTI+0x200>)
 800053a:	430b      	orrs	r3, r1
 800053c:	60d3      	str	r3, [r2, #12]
 800053e:	e015      	b.n	800056c <Update_EXTI+0x188>
	}else
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <Update_EXTI+0x200>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	8812      	ldrh	r2, [r2, #0]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	4611      	mov	r1, r2
 8000550:	4a24      	ldr	r2, [pc, #144]	; (80005e4 <Update_EXTI+0x200>)
 8000552:	430b      	orrs	r3, r1
 8000554:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <Update_EXTI+0x200>)
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	8812      	ldrh	r2, [r2, #0]
 800055e:	4611      	mov	r1, r2
 8000560:	2201      	movs	r2, #1
 8000562:	408a      	lsls	r2, r1
 8000564:	4611      	mov	r1, r2
 8000566:	4a1f      	ldr	r2, [pc, #124]	; (80005e4 <Update_EXTI+0x200>)
 8000568:	430b      	orrs	r3, r1
 800056a:	60d3      	str	r3, [r2, #12]
	}
	//---------------------------------------------------------------

	//4-Update IRQ Handling CallBack

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	691b      	ldr	r3, [r3, #16]
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <Update_EXTI+0x204>)
 8000578:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//---------------------------------------------------------------


	//5-Enable/Disable IRQ & NVIC
	if (EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7b5b      	ldrb	r3, [r3, #13]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d110      	bne.n	80005a6 <Update_EXTI+0x1c2>
	{
		EXTI->IMR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <Update_EXTI+0x200>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	8812      	ldrh	r2, [r2, #0]
 800058c:	4611      	mov	r1, r2
 800058e:	2201      	movs	r2, #1
 8000590:	408a      	lsls	r2, r1
 8000592:	4611      	mov	r1, r2
 8000594:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <Update_EXTI+0x200>)
 8000596:	430b      	orrs	r3, r1
 8000598:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff fe54 	bl	800024c <Enable_NVIC>


	//---------------------------------------------------------------


}
 80005a4:	e010      	b.n	80005c8 <Update_EXTI+0x1e4>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <Update_EXTI+0x200>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	8812      	ldrh	r2, [r2, #0]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	43d2      	mvns	r2, r2
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <Update_EXTI+0x200>)
 80005ba:	400b      	ands	r3, r1
 80005bc:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fea8 	bl	8000318 <Disable_NVIC>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40010000 	.word	0x40010000
 80005d4:	40010800 	.word	0x40010800
 80005d8:	40010c00 	.word	0x40010c00
 80005dc:	40011000 	.word	0x40011000
 80005e0:	40011400 	.word	0x40011400
 80005e4:	40010400 	.word	0x40010400
 80005e8:	2000002c 	.word	0x2000002c

080005ec <EXTI0_IRQHandler>:
 * 										ISR Functions
 * =============================================================================================
 */

void EXTI0_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	//Clear by writing '1' into the bit Pending register {EXTI_PR}
	EXTI->PR |= 1<<0;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <EXTI0_IRQHandler+0x1c>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <EXTI0_IRQHandler+0x1c>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[0]();
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <EXTI0_IRQHandler+0x20>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4798      	blx	r3
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40010400 	.word	0x40010400
 800060c:	2000002c 	.word	0x2000002c

08000610 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <EXTI1_IRQHandler+0x1c>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <EXTI1_IRQHandler+0x1c>)
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[1]();
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <EXTI1_IRQHandler+0x20>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4798      	blx	r3
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010400 	.word	0x40010400
 8000630:	2000002c 	.word	0x2000002c

08000634 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <EXTI2_IRQHandler+0x1c>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <EXTI2_IRQHandler+0x1c>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[2]();
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <EXTI2_IRQHandler+0x20>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	4798      	blx	r3
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010400 	.word	0x40010400
 8000654:	2000002c 	.word	0x2000002c

08000658 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <EXTI3_IRQHandler+0x1c>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <EXTI3_IRQHandler+0x1c>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[3]();
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <EXTI3_IRQHandler+0x20>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	4798      	blx	r3
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010400 	.word	0x40010400
 8000678:	2000002c 	.word	0x2000002c

0800067c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <EXTI4_IRQHandler+0x1c>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <EXTI4_IRQHandler+0x1c>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[4]();
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <EXTI4_IRQHandler+0x20>)
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	4798      	blx	r3
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010400 	.word	0x40010400
 800069c:	2000002c 	.word	0x2000002c

080006a0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5;	GP_IRQ_CallBack[5]();}
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	f003 0320 	and.w	r3, r3, #32
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d008      	beq.n	80006c2 <EXTI9_5_IRQHandler+0x22>
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	4a22      	ldr	r2, [pc, #136]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 80006b6:	f043 0320 	orr.w	r3, r3, #32
 80006ba:	6153      	str	r3, [r2, #20]
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <EXTI9_5_IRQHandler+0xa4>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6;	GP_IRQ_CallBack[6]();}
 80006c2:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d008      	beq.n	80006e0 <EXTI9_5_IRQHandler+0x40>
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 80006d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <EXTI9_5_IRQHandler+0xa4>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7;	GP_IRQ_CallBack[7]();}
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d008      	beq.n	80006fe <EXTI9_5_IRQHandler+0x5e>
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	4a13      	ldr	r2, [pc, #76]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 80006f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f6:	6153      	str	r3, [r2, #20]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <EXTI9_5_IRQHandler+0xa4>)
 80006fa:	69db      	ldr	r3, [r3, #28]
 80006fc:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8;	GP_IRQ_CallBack[8]();}
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000706:	2b00      	cmp	r3, #0
 8000708:	d008      	beq.n	800071c <EXTI9_5_IRQHandler+0x7c>
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <EXTI9_5_IRQHandler+0xa4>)
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9;	GP_IRQ_CallBack[9]();}
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000724:	2b00      	cmp	r3, #0
 8000726:	d008      	beq.n	800073a <EXTI9_5_IRQHandler+0x9a>
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <EXTI9_5_IRQHandler+0xa0>)
 800072e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000732:	6153      	str	r3, [r2, #20]
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <EXTI9_5_IRQHandler+0xa4>)
 8000736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000738:	4798      	blx	r3
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40010400 	.word	0x40010400
 8000744:	2000002c 	.word	0x2000002c

08000748 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10;	GP_IRQ_CallBack[10]();}
 800074c:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <EXTI15_10_IRQHandler+0x22>
 8000758:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	4a29      	ldr	r2, [pc, #164]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 800075e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000762:	6153      	str	r3, [r2, #20]
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <EXTI15_10_IRQHandler+0xc0>)
 8000766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000768:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11;	GP_IRQ_CallBack[11]();}
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000772:	2b00      	cmp	r3, #0
 8000774:	d008      	beq.n	8000788 <EXTI15_10_IRQHandler+0x40>
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a22      	ldr	r2, [pc, #136]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 800077c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <EXTI15_10_IRQHandler+0xc0>)
 8000784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000786:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12;	GP_IRQ_CallBack[12]();}
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000790:	2b00      	cmp	r3, #0
 8000792:	d008      	beq.n	80007a6 <EXTI15_10_IRQHandler+0x5e>
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 800079a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800079e:	6153      	str	r3, [r2, #20]
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <EXTI15_10_IRQHandler+0xc0>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13;	GP_IRQ_CallBack[13]();}
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d008      	beq.n	80007c4 <EXTI15_10_IRQHandler+0x7c>
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a13      	ldr	r2, [pc, #76]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 80007b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <EXTI15_10_IRQHandler+0xc0>)
 80007c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c2:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14;	GP_IRQ_CallBack[14]();}
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d008      	beq.n	80007e2 <EXTI15_10_IRQHandler+0x9a>
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6153      	str	r3, [r2, #20]
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <EXTI15_10_IRQHandler+0xc0>)
 80007de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007e0:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15;	GP_IRQ_CallBack[15]();}
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d008      	beq.n	8000800 <EXTI15_10_IRQHandler+0xb8>
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	4a04      	ldr	r2, [pc, #16]	; (8000804 <EXTI15_10_IRQHandler+0xbc>)
 80007f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f8:	6153      	str	r3, [r2, #20]
 80007fa:	4b03      	ldr	r3, [pc, #12]	; (8000808 <EXTI15_10_IRQHandler+0xc0>)
 80007fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007fe:	4798      	blx	r3
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40010400 	.word	0x40010400
 8000808:	2000002c 	.word	0x2000002c

0800080c <MCAL_EXTI_GPIO_Init>:
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 package has only GPIO A,B,PART of C/D exported as external PInS from the MCU
 * 					 Also Mandatory to enable RCC clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init (EXTI_PinConfig_t* EXTI_Config)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff fde5 	bl	80003e4 <Update_EXTI>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <Get_CRLH_Position>:

#include "Stm32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	2b80      	cmp	r3, #128	; 0x80
 8000830:	d042      	beq.n	80008b8 <Get_CRLH_Position+0x96>
 8000832:	2b80      	cmp	r3, #128	; 0x80
 8000834:	dc11      	bgt.n	800085a <Get_CRLH_Position+0x38>
 8000836:	2b08      	cmp	r3, #8
 8000838:	d036      	beq.n	80008a8 <Get_CRLH_Position+0x86>
 800083a:	2b08      	cmp	r3, #8
 800083c:	dc06      	bgt.n	800084c <Get_CRLH_Position+0x2a>
 800083e:	2b02      	cmp	r3, #2
 8000840:	d02e      	beq.n	80008a0 <Get_CRLH_Position+0x7e>
 8000842:	2b04      	cmp	r3, #4
 8000844:	d02e      	beq.n	80008a4 <Get_CRLH_Position+0x82>
 8000846:	2b01      	cmp	r3, #1
 8000848:	d028      	beq.n	800089c <Get_CRLH_Position+0x7a>
 800084a:	e037      	b.n	80008bc <Get_CRLH_Position+0x9a>
 800084c:	2b20      	cmp	r3, #32
 800084e:	d02f      	beq.n	80008b0 <Get_CRLH_Position+0x8e>
 8000850:	2b40      	cmp	r3, #64	; 0x40
 8000852:	d02f      	beq.n	80008b4 <Get_CRLH_Position+0x92>
 8000854:	2b10      	cmp	r3, #16
 8000856:	d029      	beq.n	80008ac <Get_CRLH_Position+0x8a>
 8000858:	e030      	b.n	80008bc <Get_CRLH_Position+0x9a>
 800085a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800085e:	d023      	beq.n	80008a8 <Get_CRLH_Position+0x86>
 8000860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000864:	dc09      	bgt.n	800087a <Get_CRLH_Position+0x58>
 8000866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800086a:	d019      	beq.n	80008a0 <Get_CRLH_Position+0x7e>
 800086c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000870:	d018      	beq.n	80008a4 <Get_CRLH_Position+0x82>
 8000872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000876:	d011      	beq.n	800089c <Get_CRLH_Position+0x7a>
 8000878:	e020      	b.n	80008bc <Get_CRLH_Position+0x9a>
 800087a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087e:	d017      	beq.n	80008b0 <Get_CRLH_Position+0x8e>
 8000880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000884:	dc03      	bgt.n	800088e <Get_CRLH_Position+0x6c>
 8000886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800088a:	d00f      	beq.n	80008ac <Get_CRLH_Position+0x8a>
 800088c:	e016      	b.n	80008bc <Get_CRLH_Position+0x9a>
 800088e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000892:	d00f      	beq.n	80008b4 <Get_CRLH_Position+0x92>
 8000894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000898:	d00e      	beq.n	80008b8 <Get_CRLH_Position+0x96>
 800089a:	e00f      	b.n	80008bc <Get_CRLH_Position+0x9a>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 800089c:	2300      	movs	r3, #0
 800089e:	e00e      	b.n	80008be <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	e00c      	b.n	80008be <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 80008a4:	2308      	movs	r3, #8
 80008a6:	e00a      	b.n	80008be <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 80008a8:	230c      	movs	r3, #12
 80008aa:	e008      	b.n	80008be <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 80008ac:	2310      	movs	r3, #16
 80008ae:	e006      	b.n	80008be <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 80008b0:	2314      	movs	r3, #20
 80008b2:	e004      	b.n	80008be <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 80008b4:	2318      	movs	r3, #24
 80008b6:	e002      	b.n	80008be <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 80008b8:	231c      	movs	r3, #28
 80008ba:	e000      	b.n	80008be <Get_CRLH_Position+0x9c>
		break ;
	}
	return 0;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <MCAL_GPIO_Init>:
 * @retval			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 package has only GPIO A,B,PART of C/D
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx , GPIO_PinConfig_t* PinConfig)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) configure PINS from 8 >>> 15
	volatile uint32_t* Config_Reg = NULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
	Config_Reg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)?  &GPIOx->CRL : &GPIOx->CRH;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	2bff      	cmp	r3, #255	; 0xff
 80008dc:	d801      	bhi.n	80008e2 <MCAL_GPIO_Init+0x1a>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	e001      	b.n	80008e6 <MCAL_GPIO_Init+0x1e>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3304      	adds	r3, #4
 80008e6:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	73fb      	strb	r3, [r7, #15]
	//clear CNF8[1:0]  MODE[1:0]
	(*Config_Reg) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff96 	bl	8000822 <Get_CRLH_Position>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
 80008fa:	230f      	movs	r3, #15
 80008fc:	4093      	lsls	r3, r2
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	401a      	ands	r2, r3
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)   )
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	789b      	ldrb	r3, [r3, #2]
 800090e:	2b07      	cmp	r3, #7
 8000910:	d00b      	beq.n	800092a <MCAL_GPIO_Init+0x62>
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	789b      	ldrb	r3, [r3, #2]
 8000916:	2b06      	cmp	r3, #6
 8000918:	d007      	beq.n	800092a <MCAL_GPIO_Init+0x62>
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	789b      	ldrb	r3, [r3, #2]
 800091e:	2b05      	cmp	r3, #5
 8000920:	d003      	beq.n	800092a <MCAL_GPIO_Init+0x62>
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	789b      	ldrb	r3, [r3, #2]
 8000926:	2b04      	cmp	r3, #4
 8000928:	d10e      	bne.n	8000948 <MCAL_GPIO_Init+0x80>
	{
		//set CNF8[1:0]  MODE[1:0]
		PIN_Config = (( ((PinConfig->GPIO_MODE -4) <<2) | (PinConfig->GPIO_Output_Speed) ) &0x0f );
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	789b      	ldrb	r3, [r3, #2]
 800092e:	3b04      	subs	r3, #4
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	b25a      	sxtb	r2, r3
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	78db      	ldrb	r3, [r3, #3]
 8000938:	b25b      	sxtb	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b25b      	sxtb	r3, r3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f003 030f 	and.w	r3, r3, #15
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	e02c      	b.n	80009a2 <MCAL_GPIO_Init+0xda>
	}
	//if Pin is input
	else
	{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG))
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d003      	beq.n	8000958 <MCAL_GPIO_Init+0x90>
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d107      	bne.n	8000968 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF8[1:0]  MODE[1:0]0
			PIN_Config = (( ((PinConfig->GPIO_MODE) <<2) | (0x0) ) &0x0f );
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	789b      	ldrb	r3, [r3, #2]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	b2db      	uxtb	r3, r3
 8000960:	f003 030f 	and.w	r3, r3, #15
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	e01c      	b.n	80009a2 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT ) //consider it as input floating
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	2b08      	cmp	r3, #8
 800096e:	d102      	bne.n	8000976 <MCAL_GPIO_Init+0xae>
		{
			//set CNF8[1:0]  MODE[1:0]0
			PIN_Config = (( ((GPIO_MODE_INPUT_FLO) <<2) | (0x0) ) &0x0f );
 8000970:	2304      	movs	r3, #4
 8000972:	73fb      	strb	r3, [r7, #15]
 8000974:	e015      	b.n	80009a2 <MCAL_GPIO_Init+0xda>
		}
		else // PU PD Input
		{
			PIN_Config = (( ((GPIO_MODE_INPUT_PU) <<2) | (0x0) ) &0x0f );
 8000976:	2308      	movs	r3, #8
 8000978:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	789b      	ldrb	r3, [r3, #2]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d107      	bne.n	8000992 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up : Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	68db      	ldr	r3, [r3, #12]
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	8812      	ldrh	r2, [r2, #0]
 800098a:	431a      	orrs	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	e007      	b.n	80009a2 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR = 0 Input pull-down : Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	8812      	ldrh	r2, [r2, #0]
 800099a:	43d2      	mvns	r2, r2
 800099c:	401a      	ands	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60da      	str	r2, [r3, #12]
			}

		}
	}
	// write on CRL or CRH
	(*Config_Reg) |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80009a2:	7bfc      	ldrb	r4, [r7, #15]
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff3a 	bl	8000822 <Get_CRLH_Position>
 80009ae:	4603      	mov	r3, r0
 80009b0:	fa04 f203 	lsl.w	r2, r4, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	431a      	orrs	r2, r3
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	601a      	str	r2, [r3, #0]
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd90      	pop	{r4, r7, pc}
	...

080009c8 <SPI1_IRQHandler>:
	 * ==========================================================================================
	 */


	void SPI1_IRQHandler (void)
	{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI1->SR & (1<<1) ) >>1 );
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <SPI1_IRQHandler+0x54>)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	085b      	lsrs	r3, r3, #1
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	793b      	ldrb	r3, [r7, #4]
 80009dc:	f362 0300 	bfi	r3, r2, #0, #1
 80009e0:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI1->SR & (1<<0) ) >>0 );
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <SPI1_IRQHandler+0x54>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	793b      	ldrb	r3, [r7, #4]
 80009ee:	f362 0341 	bfi	r3, r2, #1, #1
 80009f2:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI1->SR & (1<<4) ) >>4 );
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <SPI1_IRQHandler+0x54>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	091b      	lsrs	r3, r3, #4
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	793b      	ldrb	r3, [r7, #4]
 8000a02:	f362 0382 	bfi	r3, r2, #2, #1
 8000a06:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src);
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <SPI1_IRQHandler+0x58>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	7938      	ldrb	r0, [r7, #4]
 8000a10:	4798      	blx	r3
	}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40013000 	.word	0x40013000
 8000a20:	20000020 	.word	0x20000020

08000a24 <SPI2_IRQHandler>:


	void SPI2_IRQHandler (void)
	{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI2->SR & (1<<1) ) >>1 );
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <SPI2_IRQHandler+0x54>)
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	085b      	lsrs	r3, r3, #1
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	793b      	ldrb	r3, [r7, #4]
 8000a38:	f362 0300 	bfi	r3, r2, #0, #1
 8000a3c:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI2->SR & (1<<0) ) >>0 );
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <SPI2_IRQHandler+0x54>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	793b      	ldrb	r3, [r7, #4]
 8000a4a:	f362 0341 	bfi	r3, r2, #1, #1
 8000a4e:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI2->SR & (1<<4) ) >>4 );
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <SPI2_IRQHandler+0x54>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	091b      	lsrs	r3, r3, #4
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	793b      	ldrb	r3, [r7, #4]
 8000a5e:	f362 0382 	bfi	r3, r2, #2, #1
 8000a62:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src);
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <SPI2_IRQHandler+0x58>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	7938      	ldrb	r0, [r7, #4]
 8000a6c:	4798      	blx	r3
	}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40003800 	.word	0x40003800
 8000a7c:	20000020 	.word	0x20000020

08000a80 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler (void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <USART1_IRQHandler+0x10>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	4798      	blx	r3
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000028 	.word	0x20000028

08000a94 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000a98:	4b02      	ldr	r3, [pc, #8]	; (8000aa4 <USART2_IRQHandler+0x10>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	4798      	blx	r3
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000028 	.word	0x20000028

08000aa8 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000aac:	4b02      	ldr	r3, [pc, #8]	; (8000ab8 <USART3_IRQHandler+0x10>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	4798      	blx	r3
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000028 	.word	0x20000028

08000abc <__libc_init_array>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	2500      	movs	r5, #0
 8000ac0:	4e0c      	ldr	r6, [pc, #48]	; (8000af4 <__libc_init_array+0x38>)
 8000ac2:	4c0d      	ldr	r4, [pc, #52]	; (8000af8 <__libc_init_array+0x3c>)
 8000ac4:	1ba4      	subs	r4, r4, r6
 8000ac6:	10a4      	asrs	r4, r4, #2
 8000ac8:	42a5      	cmp	r5, r4
 8000aca:	d109      	bne.n	8000ae0 <__libc_init_array+0x24>
 8000acc:	f000 f81a 	bl	8000b04 <_init>
 8000ad0:	2500      	movs	r5, #0
 8000ad2:	4e0a      	ldr	r6, [pc, #40]	; (8000afc <__libc_init_array+0x40>)
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	; (8000b00 <__libc_init_array+0x44>)
 8000ad6:	1ba4      	subs	r4, r4, r6
 8000ad8:	10a4      	asrs	r4, r4, #2
 8000ada:	42a5      	cmp	r5, r4
 8000adc:	d105      	bne.n	8000aea <__libc_init_array+0x2e>
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ae4:	4798      	blx	r3
 8000ae6:	3501      	adds	r5, #1
 8000ae8:	e7ee      	b.n	8000ac8 <__libc_init_array+0xc>
 8000aea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aee:	4798      	blx	r3
 8000af0:	3501      	adds	r5, #1
 8000af2:	e7f2      	b.n	8000ada <__libc_init_array+0x1e>
 8000af4:	08000b28 	.word	0x08000b28
 8000af8:	08000b28 	.word	0x08000b28
 8000afc:	08000b28 	.word	0x08000b28
 8000b00:	08000b2c 	.word	0x08000b2c

08000b04 <_init>:
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	bf00      	nop
 8000b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0a:	bc08      	pop	{r3}
 8000b0c:	469e      	mov	lr, r3
 8000b0e:	4770      	bx	lr

08000b10 <_fini>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	bf00      	nop
 8000b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b16:	bc08      	pop	{r3}
 8000b18:	469e      	mov	lr, r3
 8000b1a:	4770      	bx	lr
