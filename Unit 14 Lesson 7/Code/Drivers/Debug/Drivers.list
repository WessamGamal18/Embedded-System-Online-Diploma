
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000510  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000640  08000648  00010648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000640  08000640  00010648  2**0
                  CONTENTS
  4 .ARM          00000000  08000640  08000640  00010648  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000640  08000648  00010648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000640  08000640  00010640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000644  08000644  00010644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000000  08000648  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08000648  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010648  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037bd  00000000  00000000  00010671  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008fb  00000000  00000000  00013e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ad8  00000000  00000000  00014729  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  00015208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  000153c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001f6d  00000000  00000000  00015540  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001c96  00000000  00000000  000174ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00010394  00000000  00000000  00019143  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000294d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005b0  00000000  00000000  00029554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000628 	.word	0x08000628

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000628 	.word	0x08000628

08000170 <OS_SVC_services>:
	}

}

void OS_SVC_services (int* StackFramePointer)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set Stack : r0,r1,r2,r3,r12,LR.PC.XPSR

	unsigned char SVC_Number;
	unsigned int Val1,Val2;

	SVC_Number = *((unsigned char*)(((unsigned char*)StackFramePointer[6])-2)) ;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	3318      	adds	r3, #24
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	3b02      	subs	r3, #2
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	75fb      	strb	r3, [r7, #23]
	Val1 = StackFramePointer[0];
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	613b      	str	r3, [r7, #16]
	Val2 = StackFramePointer[1];
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	3304      	adds	r3, #4
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	60fb      	str	r3, [r7, #12]

	switch(SVC_Number)
 8000192:	7dfb      	ldrb	r3, [r7, #23]
 8000194:	2b02      	cmp	r3, #2
 8000196:	d00b      	beq.n	80001b0 <OS_SVC_services+0x40>
 8000198:	2b03      	cmp	r3, #3
 800019a:	d010      	beq.n	80001be <OS_SVC_services+0x4e>
 800019c:	2b01      	cmp	r3, #1
 800019e:	d000      	beq.n	80001a2 <OS_SVC_services+0x32>
		break;

	}


}
 80001a0:	e015      	b.n	80001ce <OS_SVC_services+0x5e>
		StackFramePointer[0] = Val1+Val2;
 80001a2:	693a      	ldr	r2, [r7, #16]
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	4413      	add	r3, r2
 80001a8:	461a      	mov	r2, r3
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	601a      	str	r2, [r3, #0]
		break;
 80001ae:	e00e      	b.n	80001ce <OS_SVC_services+0x5e>
		StackFramePointer[0] = Val1-Val2;
 80001b0:	693a      	ldr	r2, [r7, #16]
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	1ad3      	subs	r3, r2, r3
 80001b6:	461a      	mov	r2, r3
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	601a      	str	r2, [r3, #0]
		break;
 80001bc:	e007      	b.n	80001ce <OS_SVC_services+0x5e>
		StackFramePointer[0] = Val1*Val2;
 80001be:	693b      	ldr	r3, [r7, #16]
 80001c0:	68fa      	ldr	r2, [r7, #12]
 80001c2:	fb02 f303 	mul.w	r3, r2, r3
 80001c6:	461a      	mov	r2, r3
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	601a      	str	r2, [r3, #0]
		break;
 80001cc:	bf00      	nop
}
 80001ce:	bf00      	nop
 80001d0:	371c      	adds	r7, #28
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr

080001d8 <SVC_Handler>:
__attribute ((naked)) void SVC_Handler()
{
	__asm ("tst lr,#4  \n\t"
 80001d8:	f01e 0f04 	tst.w	lr, #4
 80001dc:	bf0c      	ite	eq
 80001de:	f3ef 8008 	mrseq	r0, MSP
 80001e2:	f3ef 8009 	mrsne	r0, PSP
 80001e6:	f7ff bfc3 	b.w	8000170 <OS_SVC_services>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC_services");
}
 80001ea:	bf00      	nop

080001ec <OS_SVC_Set>:

int OS_SVC_Set(int a,int b,int SVC_ID)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b087      	sub	sp, #28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	60f8      	str	r0, [r7, #12]
 80001f4:	60b9      	str	r1, [r7, #8]
 80001f6:	607a      	str	r2, [r7, #4]
	int result;
	switch(SVC_ID)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d005      	beq.n	800020a <OS_SVC_Set+0x1e>
 80001fe:	2b03      	cmp	r3, #3
 8000200:	d005      	beq.n	800020e <OS_SVC_Set+0x22>
 8000202:	2b01      	cmp	r3, #1
 8000204:	d105      	bne.n	8000212 <OS_SVC_Set+0x26>
	{
	case 1: //Add
		__asm("svc #0x01");
 8000206:	df01      	svc	1
		break;
 8000208:	e003      	b.n	8000212 <OS_SVC_Set+0x26>
	case 2: //Sub
		__asm("svc #0x02");
 800020a:	df02      	svc	2
		break;
 800020c:	e001      	b.n	8000212 <OS_SVC_Set+0x26>
	case 3: //Mul
		__asm("svc #0x03");
 800020e:	df03      	svc	3
		break;
 8000210:	bf00      	nop
	}

	__asm ("mov %0,r0"
 8000212:	4603      	mov	r3, r0
 8000214:	617b      	str	r3, [r7, #20]
			: "=r" (result));
	return result;
 8000216:	697b      	ldr	r3, [r7, #20]

}
 8000218:	4618      	mov	r0, r3
 800021a:	371c      	adds	r7, #28
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
	...

08000224 <main>:

int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

	SWITCH_CPU_AccessLevel(Unprivileged);

	 */

	IRQ_Flag = 1;
 8000228:	4b12      	ldr	r3, [pc, #72]	; (8000274 <main+0x50>)
 800022a:	2201      	movs	r2, #1
 800022c:	701a      	strb	r2, [r3, #0]
	IRQ_Flag = OS_SVC_Set(3,3,1); //Add
 800022e:	2201      	movs	r2, #1
 8000230:	2103      	movs	r1, #3
 8000232:	2003      	movs	r0, #3
 8000234:	f7ff ffda 	bl	80001ec <OS_SVC_Set>
 8000238:	4603      	mov	r3, r0
 800023a:	b2da      	uxtb	r2, r3
 800023c:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <main+0x50>)
 800023e:	701a      	strb	r2, [r3, #0]
	IRQ_Flag = OS_SVC_Set(3,3,2); //Sub
 8000240:	2202      	movs	r2, #2
 8000242:	2103      	movs	r1, #3
 8000244:	2003      	movs	r0, #3
 8000246:	f7ff ffd1 	bl	80001ec <OS_SVC_Set>
 800024a:	4603      	mov	r3, r0
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <main+0x50>)
 8000250:	701a      	strb	r2, [r3, #0]
	IRQ_Flag = OS_SVC_Set(3,3,3); //Mul
 8000252:	2203      	movs	r2, #3
 8000254:	2103      	movs	r1, #3
 8000256:	2003      	movs	r0, #3
 8000258:	f7ff ffc8 	bl	80001ec <OS_SVC_Set>
 800025c:	4603      	mov	r3, r0
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <main+0x50>)
 8000262:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if(IRQ_Flag)
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <main+0x50>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0fb      	beq.n	8000264 <main+0x40>
		{
			IRQ_Flag =0;
 800026c:	4b01      	ldr	r3, [pc, #4]	; (8000274 <main+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 8000272:	e7f7      	b.n	8000264 <main+0x40>
 8000274:	2000001c 	.word	0x2000001c

08000278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800027c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000280:	480c      	ldr	r0, [pc, #48]	; (80002b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000282:	490d      	ldr	r1, [pc, #52]	; (80002b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000284:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <LoopForever+0xe>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000298:	4c0a      	ldr	r4, [pc, #40]	; (80002c4 <LoopForever+0x16>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a6:	f000 f99b 	bl	80005e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f7ff ffbb 	bl	8000224 <main>

080002ae <LoopForever>:

LoopForever:
    b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   r0, =_estack
 80002b0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002bc:	08000648 	.word	0x08000648
  ldr r2, =_sbss
 80002c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c4:	20000080 	.word	0x20000080

080002c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC1_2_IRQHandler>
	...

080002cc <EXTI0_IRQHandler>:
 * 										ISR Functions
 * =============================================================================================
 */

void EXTI0_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	//Clear by writing '1' into the bit Pending register {EXTI_PR}
	EXTI->PR |= 1<<0;
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <EXTI0_IRQHandler+0x1c>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <EXTI0_IRQHandler+0x1c>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[0]();
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <EXTI0_IRQHandler+0x20>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4798      	blx	r3
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40010400 	.word	0x40010400
 80002ec:	20000040 	.word	0x20000040

080002f0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <EXTI1_IRQHandler+0x1c>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <EXTI1_IRQHandler+0x1c>)
 80002fa:	f043 0302 	orr.w	r3, r3, #2
 80002fe:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[1]();
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <EXTI1_IRQHandler+0x20>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4798      	blx	r3
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40010400 	.word	0x40010400
 8000310:	20000040 	.word	0x20000040

08000314 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <EXTI2_IRQHandler+0x1c>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <EXTI2_IRQHandler+0x1c>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[2]();
 8000324:	4b03      	ldr	r3, [pc, #12]	; (8000334 <EXTI2_IRQHandler+0x20>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4798      	blx	r3
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40010400 	.word	0x40010400
 8000334:	20000040 	.word	0x20000040

08000338 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <EXTI3_IRQHandler+0x1c>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <EXTI3_IRQHandler+0x1c>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[3]();
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <EXTI3_IRQHandler+0x20>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4798      	blx	r3
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40010400 	.word	0x40010400
 8000358:	20000040 	.word	0x20000040

0800035c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <EXTI4_IRQHandler+0x1c>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	4a04      	ldr	r2, [pc, #16]	; (8000378 <EXTI4_IRQHandler+0x1c>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[4]();
 800036c:	4b03      	ldr	r3, [pc, #12]	; (800037c <EXTI4_IRQHandler+0x20>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	4798      	blx	r3
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40010400 	.word	0x40010400
 800037c:	20000040 	.word	0x20000040

08000380 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5;	GP_IRQ_CallBack[5]();}
 8000384:	4b26      	ldr	r3, [pc, #152]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	2b00      	cmp	r3, #0
 800038e:	d008      	beq.n	80003a2 <EXTI9_5_IRQHandler+0x22>
 8000390:	4b23      	ldr	r3, [pc, #140]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a22      	ldr	r2, [pc, #136]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6153      	str	r3, [r2, #20]
 800039c:	4b21      	ldr	r3, [pc, #132]	; (8000424 <EXTI9_5_IRQHandler+0xa4>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6;	GP_IRQ_CallBack[6]();}
 80003a2:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d008      	beq.n	80003c0 <EXTI9_5_IRQHandler+0x40>
 80003ae:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a1b      	ldr	r2, [pc, #108]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 80003b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b8:	6153      	str	r3, [r2, #20]
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <EXTI9_5_IRQHandler+0xa4>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7;	GP_IRQ_CallBack[7]();}
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d008      	beq.n	80003de <EXTI9_5_IRQHandler+0x5e>
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4a13      	ldr	r2, [pc, #76]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 80003d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d6:	6153      	str	r3, [r2, #20]
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <EXTI9_5_IRQHandler+0xa4>)
 80003da:	69db      	ldr	r3, [r3, #28]
 80003dc:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8;	GP_IRQ_CallBack[8]();}
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d008      	beq.n	80003fc <EXTI9_5_IRQHandler+0x7c>
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a0c      	ldr	r2, [pc, #48]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 80003f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <EXTI9_5_IRQHandler+0xa4>)
 80003f8:	6a1b      	ldr	r3, [r3, #32]
 80003fa:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9;	GP_IRQ_CallBack[9]();}
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000404:	2b00      	cmp	r3, #0
 8000406:	d008      	beq.n	800041a <EXTI9_5_IRQHandler+0x9a>
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <EXTI9_5_IRQHandler+0xa0>)
 800040e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000412:	6153      	str	r3, [r2, #20]
 8000414:	4b03      	ldr	r3, [pc, #12]	; (8000424 <EXTI9_5_IRQHandler+0xa4>)
 8000416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000418:	4798      	blx	r3
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40010400 	.word	0x40010400
 8000424:	20000040 	.word	0x20000040

08000428 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10;	GP_IRQ_CallBack[10]();}
 800042c:	4b2d      	ldr	r3, [pc, #180]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000434:	2b00      	cmp	r3, #0
 8000436:	d008      	beq.n	800044a <EXTI15_10_IRQHandler+0x22>
 8000438:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a29      	ldr	r2, [pc, #164]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 800043e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000442:	6153      	str	r3, [r2, #20]
 8000444:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <EXTI15_10_IRQHandler+0xc0>)
 8000446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000448:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11;	GP_IRQ_CallBack[11]();}
 800044a:	4b26      	ldr	r3, [pc, #152]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000452:	2b00      	cmp	r3, #0
 8000454:	d008      	beq.n	8000468 <EXTI15_10_IRQHandler+0x40>
 8000456:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a22      	ldr	r2, [pc, #136]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 800045c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <EXTI15_10_IRQHandler+0xc0>)
 8000464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000466:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12;	GP_IRQ_CallBack[12]();}
 8000468:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000470:	2b00      	cmp	r3, #0
 8000472:	d008      	beq.n	8000486 <EXTI15_10_IRQHandler+0x5e>
 8000474:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	4a1a      	ldr	r2, [pc, #104]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 800047a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800047e:	6153      	str	r3, [r2, #20]
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <EXTI15_10_IRQHandler+0xc0>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13;	GP_IRQ_CallBack[13]();}
 8000486:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800048e:	2b00      	cmp	r3, #0
 8000490:	d008      	beq.n	80004a4 <EXTI15_10_IRQHandler+0x7c>
 8000492:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a13      	ldr	r2, [pc, #76]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 8000498:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <EXTI15_10_IRQHandler+0xc0>)
 80004a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a2:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14;	GP_IRQ_CallBack[14]();}
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d008      	beq.n	80004c2 <EXTI15_10_IRQHandler+0x9a>
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 80004b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ba:	6153      	str	r3, [r2, #20]
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <EXTI15_10_IRQHandler+0xc0>)
 80004be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004c0:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15;	GP_IRQ_CallBack[15]();}
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d008      	beq.n	80004e0 <EXTI15_10_IRQHandler+0xb8>
 80004ce:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <EXTI15_10_IRQHandler+0xbc>)
 80004d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <EXTI15_10_IRQHandler+0xc0>)
 80004dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004de:	4798      	blx	r3
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40010400 	.word	0x40010400
 80004e8:	20000040 	.word	0x20000040

080004ec <SPI1_IRQHandler>:
	 * ==========================================================================================
	 */


	void SPI1_IRQHandler (void)
	{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI1->SR & (1<<1) ) >>1 );
 80004f2:	4b13      	ldr	r3, [pc, #76]	; (8000540 <SPI1_IRQHandler+0x54>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	085b      	lsrs	r3, r3, #1
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	793b      	ldrb	r3, [r7, #4]
 8000500:	f362 0300 	bfi	r3, r2, #0, #1
 8000504:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI1->SR & (1<<0) ) >>0 );
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <SPI1_IRQHandler+0x54>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	b2da      	uxtb	r2, r3
 8000510:	793b      	ldrb	r3, [r7, #4]
 8000512:	f362 0341 	bfi	r3, r2, #1, #1
 8000516:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI1->SR & (1<<4) ) >>4 );
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <SPI1_IRQHandler+0x54>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	091b      	lsrs	r3, r3, #4
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	b2da      	uxtb	r2, r3
 8000524:	793b      	ldrb	r3, [r7, #4]
 8000526:	f362 0382 	bfi	r3, r2, #2, #1
 800052a:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src);
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <SPI1_IRQHandler+0x58>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	7938      	ldrb	r0, [r7, #4]
 8000534:	4798      	blx	r3
	}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40013000 	.word	0x40013000
 8000544:	20000020 	.word	0x20000020

08000548 <SPI2_IRQHandler>:


	void SPI2_IRQHandler (void)
	{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI2->SR & (1<<1) ) >>1 );
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <SPI2_IRQHandler+0x54>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	085b      	lsrs	r3, r3, #1
 8000554:	f003 0301 	and.w	r3, r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	793b      	ldrb	r3, [r7, #4]
 800055c:	f362 0300 	bfi	r3, r2, #0, #1
 8000560:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI2->SR & (1<<0) ) >>0 );
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <SPI2_IRQHandler+0x54>)
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	793b      	ldrb	r3, [r7, #4]
 800056e:	f362 0341 	bfi	r3, r2, #1, #1
 8000572:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI2->SR & (1<<4) ) >>4 );
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <SPI2_IRQHandler+0x54>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	091b      	lsrs	r3, r3, #4
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	793b      	ldrb	r3, [r7, #4]
 8000582:	f362 0382 	bfi	r3, r2, #2, #1
 8000586:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src);
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <SPI2_IRQHandler+0x58>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	7938      	ldrb	r0, [r7, #4]
 8000590:	4798      	blx	r3
	}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40003800 	.word	0x40003800
 80005a0:	20000020 	.word	0x20000020

080005a4 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler (void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 80005a8:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <USART1_IRQHandler+0x10>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	4798      	blx	r3
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000028 	.word	0x20000028

080005b8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <USART2_IRQHandler+0x10>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	691b      	ldr	r3, [r3, #16]
 80005c2:	4798      	blx	r3
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000028 	.word	0x20000028

080005cc <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 80005d0:	4b02      	ldr	r3, [pc, #8]	; (80005dc <USART3_IRQHandler+0x10>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	4798      	blx	r3
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000028 	.word	0x20000028

080005e0 <__libc_init_array>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	2500      	movs	r5, #0
 80005e4:	4e0c      	ldr	r6, [pc, #48]	; (8000618 <__libc_init_array+0x38>)
 80005e6:	4c0d      	ldr	r4, [pc, #52]	; (800061c <__libc_init_array+0x3c>)
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	10a4      	asrs	r4, r4, #2
 80005ec:	42a5      	cmp	r5, r4
 80005ee:	d109      	bne.n	8000604 <__libc_init_array+0x24>
 80005f0:	f000 f81a 	bl	8000628 <_init>
 80005f4:	2500      	movs	r5, #0
 80005f6:	4e0a      	ldr	r6, [pc, #40]	; (8000620 <__libc_init_array+0x40>)
 80005f8:	4c0a      	ldr	r4, [pc, #40]	; (8000624 <__libc_init_array+0x44>)
 80005fa:	1ba4      	subs	r4, r4, r6
 80005fc:	10a4      	asrs	r4, r4, #2
 80005fe:	42a5      	cmp	r5, r4
 8000600:	d105      	bne.n	800060e <__libc_init_array+0x2e>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000608:	4798      	blx	r3
 800060a:	3501      	adds	r5, #1
 800060c:	e7ee      	b.n	80005ec <__libc_init_array+0xc>
 800060e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000612:	4798      	blx	r3
 8000614:	3501      	adds	r5, #1
 8000616:	e7f2      	b.n	80005fe <__libc_init_array+0x1e>
 8000618:	08000640 	.word	0x08000640
 800061c:	08000640 	.word	0x08000640
 8000620:	08000640 	.word	0x08000640
 8000624:	08000644 	.word	0x08000644

08000628 <_init>:
 8000628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062a:	bf00      	nop
 800062c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062e:	bc08      	pop	{r3}
 8000630:	469e      	mov	lr, r3
 8000632:	4770      	bx	lr

08000634 <_fini>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	bf00      	nop
 8000638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063a:	bc08      	pop	{r3}
 800063c:	469e      	mov	lr, r3
 800063e:	4770      	bx	lr
