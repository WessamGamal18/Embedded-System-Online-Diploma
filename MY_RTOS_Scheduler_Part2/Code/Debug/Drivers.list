
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000fa4  08000fa4  00010fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fc8  08000fc8  00010fd0  2**0
                  CONTENTS
  4 .ARM          00000000  08000fc8  08000fc8  00010fd0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fc8  08000fd0  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fc8  08000fc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fcc  08000fcc  00010fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000000  08000fd0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08000fd0  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059ef  00000000  00000000  00010ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f36  00000000  00000000  000169e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000010e4  00000000  00000000  0001791e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002d0  00000000  00000000  00018a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000258  00000000  00000000  00018cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002ad9  00000000  00000000  00018f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000319a  00000000  00000000  0001ba09  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00011bae  00000000  00000000  0001eba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00030751  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000904  00000000  00000000  000307cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f8c 	.word	0x08000f8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f8c 	.word	0x08000f8c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
#include "CortexMX_OS_Porting.h"

unsigned char SysTickLED;

void HardFault_Handler(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler()
{
	__asm("tst lr,#4  \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 bb9b 	b.w	800097c <OS_SVC>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC");
}
 8000246:	bf00      	nop

08000248 <HW_init>:


void HW_init()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	// X count -> 1 ms
	// X = 8000 count

	//decrease PendSV interrupt priority to be smaller than or equal SysTick Timer
	//SysTick have a priority 14
	__NVIC_SetPriority(PendSV_IRQn, 15);
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <Trigger_OS_PendSV>:

void Trigger_OS_PendSV()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <Trigger_OS_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <Trigger_OS_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]

}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <Start_Ticker>:

void Start_Ticker()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//This clock tree should be defined in HW_init()
	// 8 MHZ
	// 1 count -> 0.125 us
	// X count -> 1 ms =====> X = 8000 count
	SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	SysTickLED ^= 1;
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <SysTick_Handler+0x20>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <SysTick_Handler+0x20>)
 8000298:	701a      	strb	r2, [r3, #0]
	//determine Pcurrent & Pnext
	Decide_whatNext();
 800029a:	f000 fb1d 	bl	80008d8 <Decide_whatNext>
	//switch Context & restore
	Trigger_OS_PendSV();
 800029e:	f7ff ffdd 	bl	800025c <Trigger_OS_PendSV>
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000028 	.word	0x20000028

080002ac <FIFO_init>:
 */

#include "MYRTOS_FIFO.h"

Buffer_status FIFO_init (FIFO_Buf_t* fifo, element_type* buff , unsigned int length)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
	if(!buff)
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d101      	bne.n	80002c2 <FIFO_init+0x16>
		return FIFO_NULL;
 80002be:	2303      	movs	r3, #3
 80002c0:	e011      	b.n	80002e6 <FIFO_init+0x3a>

	fifo->base = buff;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	68ba      	ldr	r2, [r7, #8]
 80002c6:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	68da      	ldr	r2, [r3, #12]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	68da      	ldr	r2, [r3, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	611a      	str	r2, [r3, #16]
	fifo->counter = 0;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002e4:	2300      	movs	r3, #0
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <FIFO_enqueue>:

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo, element_type item)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
	// FIFO null
	if ( !fifo->base || !fifo->length )
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d003      	beq.n	800030a <FIFO_enqueue+0x1a>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d101      	bne.n	800030e <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800030a:	2303      	movs	r3, #3
 800030c:	e02d      	b.n	800036a <FIFO_enqueue+0x7a>

	// FIFO full
	if ((fifo->head == fifo->length) && (fifo->counter == fifo->length))
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	6912      	ldr	r2, [r2, #16]
 8000316:	4293      	cmp	r3, r2
 8000318:	d107      	bne.n	800032a <FIFO_enqueue+0x3a>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	691b      	ldr	r3, [r3, #16]
 8000322:	429a      	cmp	r2, r3
 8000324:	d101      	bne.n	800032a <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 8000326:	2301      	movs	r3, #1
 8000328:	e01f      	b.n	800036a <FIFO_enqueue+0x7a>

	*(fifo->tail) = item;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]

	// for circular fifo enqueue
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length)) -4 ))
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	68d2      	ldr	r2, [r2, #12]
 8000344:	4611      	mov	r1, r2
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6912      	ldr	r2, [r2, #16]
 800034a:	0092      	lsls	r2, r2, #2
 800034c:	440a      	add	r2, r1
 800034e:	3a04      	subs	r2, #4
 8000350:	4293      	cmp	r3, r2
 8000352:	d104      	bne.n	800035e <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	68da      	ldr	r2, [r3, #12]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	e004      	b.n	8000368 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	1d1a      	adds	r2, r3, #4
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8000368:	2300      	movs	r3, #0
}
 800036a:	4618      	mov	r0, r3
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <FIFO_dequeue>:


Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
	// FIFO null
	if ( !fifo->base || !fifo->length )
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d003      	beq.n	800038e <FIFO_dequeue+0x1a>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	691b      	ldr	r3, [r3, #16]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 800038e:	2303      	movs	r3, #3
 8000390:	e028      	b.n	80003e4 <FIFO_dequeue+0x70>

	// FIFO empty
	if ( fifo->head == fifo->tail )
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	429a      	cmp	r2, r3
 800039c:	d101      	bne.n	80003a2 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 800039e:	2302      	movs	r3, #2
 80003a0:	e020      	b.n	80003e4 <FIFO_dequeue+0x70>

	*item = *(fifo->head);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	1e5a      	subs	r2, r3, #1
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	601a      	str	r2, [r3, #0]


	// for circular fifo dequeue
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length)) -4 ))
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	68d2      	ldr	r2, [r2, #12]
 80003be:	4611      	mov	r1, r2
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	6912      	ldr	r2, [r2, #16]
 80003c4:	0092      	lsls	r2, r2, #2
 80003c6:	440a      	add	r2, r1
 80003c8:	3a04      	subs	r2, #4
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d104      	bne.n	80003d8 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	68da      	ldr	r2, [r3, #12]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	e004      	b.n	80003e2 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	1d1a      	adds	r2, r3, #4
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003e2:	2300      	movs	r3, #0
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
	...

080003f0 <PendSV_Handler>:
{
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,......,R0
	OS_Get_PSP(OS_Control.CurrentTask->Current_PSP);
 80003f0:	4b6c      	ldr	r3, [pc, #432]	; (80005a4 <PendSV_Handler+0x1b4>)
 80003f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003f6:	f3ef 8009 	mrs	r0, PSP
 80003fa:	4602      	mov	r2, r0
 80003fc:	619a      	str	r2, [r3, #24]

	///using this current_PSP (pointer) to store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP--;
 80003fe:	4b69      	ldr	r3, [pc, #420]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000400:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000404:	699a      	ldr	r2, [r3, #24]
 8000406:	3a04      	subs	r2, #4
 8000408:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800040a:	4b66      	ldr	r3, [pc, #408]	; (80005a4 <PendSV_Handler+0x1b4>)
 800040c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4622      	mov	r2, r4
 8000414:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000416:	4b63      	ldr	r3, [pc, #396]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000418:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800041c:	699a      	ldr	r2, [r3, #24]
 800041e:	3a04      	subs	r2, #4
 8000420:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000422:	4b60      	ldr	r3, [pc, #384]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000424:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	462a      	mov	r2, r5
 800042c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800042e:	4b5d      	ldr	r3, [pc, #372]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000430:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000434:	699a      	ldr	r2, [r3, #24]
 8000436:	3a04      	subs	r2, #4
 8000438:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800043a:	4b5a      	ldr	r3, [pc, #360]	; (80005a4 <PendSV_Handler+0x1b4>)
 800043c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4632      	mov	r2, r6
 8000444:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000446:	4b57      	ldr	r3, [pc, #348]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000448:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800044c:	699a      	ldr	r2, [r3, #24]
 800044e:	3a04      	subs	r2, #4
 8000450:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000452:	4b54      	ldr	r3, [pc, #336]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000454:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	463a      	mov	r2, r7
 800045c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800045e:	4b51      	ldr	r3, [pc, #324]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000460:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000464:	699a      	ldr	r2, [r3, #24]
 8000466:	3a04      	subs	r2, #4
 8000468:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800046a:	4b4e      	ldr	r3, [pc, #312]	; (80005a4 <PendSV_Handler+0x1b4>)
 800046c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4642      	mov	r2, r8
 8000474:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000476:	4b4b      	ldr	r3, [pc, #300]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000478:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800047c:	699a      	ldr	r2, [r3, #24]
 800047e:	3a04      	subs	r2, #4
 8000480:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000482:	4b48      	ldr	r3, [pc, #288]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000484:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	464a      	mov	r2, r9
 800048c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800048e:	4b45      	ldr	r3, [pc, #276]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000490:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000494:	699a      	ldr	r2, [r3, #24]
 8000496:	3a04      	subs	r2, #4
 8000498:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800049a:	4b42      	ldr	r3, [pc, #264]	; (80005a4 <PendSV_Handler+0x1b4>)
 800049c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4652      	mov	r2, sl
 80004a4:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80004a6:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <PendSV_Handler+0x1b4>)
 80004a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004ac:	699a      	ldr	r2, [r3, #24]
 80004ae:	3a04      	subs	r2, #4
 80004b0:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80004b2:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <PendSV_Handler+0x1b4>)
 80004b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	465a      	mov	r2, fp
 80004bc:	601a      	str	r2, [r3, #0]


	//====================================
	//Save the Context of the Current Task
	//====================================
	OS_Control.CurrentTask = OS_Control.NextTask ;
 80004be:	4b39      	ldr	r3, [pc, #228]	; (80005a4 <PendSV_Handler+0x1b4>)
 80004c0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004c4:	4a37      	ldr	r2, [pc, #220]	; (80005a4 <PendSV_Handler+0x1b4>)
 80004c6:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask = NULL;
 80004ca:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <PendSV_Handler+0x1b4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	__asm volatile("mov r11,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80004d2:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <PendSV_Handler+0x1b4>)
 80004d4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 80004de:	4b31      	ldr	r3, [pc, #196]	; (80005a4 <PendSV_Handler+0x1b4>)
 80004e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e4:	699a      	ldr	r2, [r3, #24]
 80004e6:	3204      	adds	r2, #4
 80004e8:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80004ea:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <PendSV_Handler+0x1b4>)
 80004ec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 80004f6:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <PendSV_Handler+0x1b4>)
 80004f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004fc:	699a      	ldr	r2, [r3, #24]
 80004fe:	3204      	adds	r2, #4
 8000500:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000502:	4b28      	ldr	r3, [pc, #160]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000504:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 800050e:	4b25      	ldr	r3, [pc, #148]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000510:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000514:	699a      	ldr	r2, [r3, #24]
 8000516:	3204      	adds	r2, #4
 8000518:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <PendSV_Handler+0x1b4>)
 800051c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000526:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000528:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800052c:	699a      	ldr	r2, [r3, #24]
 800052e:	3204      	adds	r2, #4
 8000530:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000532:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000534:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000540:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000544:	699a      	ldr	r2, [r3, #24]
 8000546:	3204      	adds	r2, #4
 8000548:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <PendSV_Handler+0x1b4>)
 800054c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000558:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800055c:	699a      	ldr	r2, [r3, #24]
 800055e:	3204      	adds	r2, #4
 8000560:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000564:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000570:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000574:	699a      	ldr	r2, [r3, #24]
 8000576:	3204      	adds	r2, #4
 8000578:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <PendSV_Handler+0x1b4>)
 800057c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000586:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000588:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058c:	699a      	ldr	r2, [r3, #24]
 800058e:	3204      	adds	r2, #4
 8000590:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_Set_PSP(OS_Control.CurrentTask->Current_PSP);
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <PendSV_Handler+0x1b4>)
 8000594:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4618      	mov	r0, r3
 800059c:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 80005a0:	4770      	bx	lr

}
 80005a2:	bf00      	nop
 80005a4:	20000040 	.word	0x20000040

080005a8 <MYRTOS_Idle_Task>:

void MYRTOS_Idle_Task()
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	while (1)
	{
		IdleTaskLED ^= 1;
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <MYRTOS_Idle_Task+0x18>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f083 0301 	eor.w	r3, r3, #1
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <MYRTOS_Idle_Task+0x18>)
 80005b8:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 80005ba:	bf00      	nop
		IdleTaskLED ^= 1;
 80005bc:	e7f6      	b.n	80005ac <MYRTOS_Idle_Task+0x4>
 80005be:	bf00      	nop
 80005c0:	20000230 	.word	0x20000230

080005c4 <MYRTOS_Create_MainStack>:
	}
}


void MYRTOS_Create_MainStack()
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack;
 80005c8:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <MYRTOS_Create_MainStack+0x34>)
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MYRTOS_Create_MainStack+0x38>)
 80005cc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <MYRTOS_Create_MainStack+0x38>)
 80005d2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80005d6:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80005da:	4a08      	ldr	r2, [pc, #32]	; (80005fc <MYRTOS_Create_MainStack+0x38>)
 80005dc:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Aligned 8 Bytes spaces between main task and PSP tasks
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8 );
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MYRTOS_Create_MainStack+0x38>)
 80005e2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80005e6:	3b08      	subs	r3, #8
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <MYRTOS_Create_MainStack+0x38>)
 80005ea:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//if (_E_MSP_Task < &_eheap) Error:excedded the available stack size

}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20002800 	.word	0x20002800
 80005fc:	20000040 	.word	0x20000040

08000600 <MYRTOS_init>:



MYRTOS_errorID MYRTOS_init()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = NoError ;
 8000606:	2300      	movs	r3, #0
 8000608:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID = OSsuspend;
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MYRTOS_init+0x64>)
 800060c:	2200      	movs	r2, #0
 800060e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the Main Stack for OS
	MYRTOS_Create_MainStack();
 8000612:	f7ff ffd7 	bl	80005c4 <MYRTOS_Create_MainStack>

	//Create OS Ready Queue
	if (FIFO_init(&Ready_Queue, Ready_Queue_FIFO, 100) != FIFO_NO_ERROR)
 8000616:	2264      	movs	r2, #100	; 0x64
 8000618:	4913      	ldr	r1, [pc, #76]	; (8000668 <MYRTOS_init+0x68>)
 800061a:	4814      	ldr	r0, [pc, #80]	; (800066c <MYRTOS_init+0x6c>)
 800061c:	f7ff fe46 	bl	80002ac <FIFO_init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <MYRTOS_init+0x2c>
		error += Ready_Queue_init_error;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3301      	adds	r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]

	//Configure IDLE Task
	strcpy (MYRTOS_idleTask.TaskName , "idleTask");
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MYRTOS_init+0x70>)
 800062e:	4a11      	ldr	r2, [pc, #68]	; (8000674 <MYRTOS_init+0x74>)
 8000630:	ca07      	ldmia	r2, {r0, r1, r2}
 8000632:	c303      	stmia	r3!, {r0, r1}
 8000634:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 255;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MYRTOS_init+0x78>)
 8000638:	22ff      	movs	r2, #255	; 0xff
 800063a:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_Idle_Task ;
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MYRTOS_init+0x78>)
 800063e:	4a0f      	ldr	r2, [pc, #60]	; (800067c <MYRTOS_init+0x7c>)
 8000640:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300;
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MYRTOS_init+0x78>)
 8000644:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000648:	601a      	str	r2, [r3, #0]

	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MYRTOS_init+0x78>)
 800064c:	f000 f856 	bl	80006fc <MYRTOS_CreateTask>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4413      	add	r3, r2
 8000658:	71fb      	strb	r3, [r7, #7]




	return error ;
 800065a:	79fb      	ldrb	r3, [r7, #7]

}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000040 	.word	0x20000040
 8000668:	20000234 	.word	0x20000234
 800066c:	2000002c 	.word	0x2000002c
 8000670:	20000208 	.word	0x20000208
 8000674:	08000fa4 	.word	0x08000fa4
 8000678:	200001ec 	.word	0x200001ec
 800067c:	080005a9 	.word	0x080005a9

08000680 <MyRTOS_Create_Task_Stack>:


void MyRTOS_Create_Task_Stack(Task_ref* Tref)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	 * r12
	 * r4,r3,r2,r1,r0
	 * =====================
	 * r5,r6,r7,r8,r9,r11 (Saved/Restore) Manual
	 */
	Tref->Current_PSP = Tref->_S_PSP_Task ;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP--;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	1f1a      	subs	r2, r3, #4
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000; // DUMMY_XPSR should T = 1 to avoid BUS fault
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006a4:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	1f1a      	subs	r2, r3, #4
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ; //PC
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--; //LR = 0xFFFFFFFD (EXC_RETURN) Return to thread and PSP stack
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	1f1a      	subs	r2, r3, #4
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0xFFFFFFFD ;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f06f 0202 	mvn.w	r2, #2
 80006cc:	601a      	str	r2, [r3, #0]

	for (int j=0; j<13;j++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	e00b      	b.n	80006ec <MyRTOS_Create_Task_Stack+0x6c>
	{
		Tref->Current_PSP--;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	1f1a      	subs	r2, r3, #4
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP) = 0;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
	for (int j=0; j<13;j++)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3301      	adds	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b0c      	cmp	r3, #12
 80006f0:	ddf0      	ble.n	80006d4 <MyRTOS_Create_Task_Stack+0x54>
	}


}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <MYRTOS_CreateTask>:




MYRTOS_errorID MYRTOS_CreateTask(Task_ref* Tref)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID error = NoError ;
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]

	//Create its own PSP stack
	//Check task stack size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MYRTOS_CreateTask+0x74>)
 800070a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	691a      	ldr	r2, [r3, #16]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	1ad2      	subs	r2, r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	615a      	str	r2, [r3, #20]
	//	- Task stack		-
	//	- _E_PSP_Task		-
	//	-					-
	//	- _eheap			-
	//	-					-
	if(Tref->_E_PSP_Task < (unsigned int) (&(_eheap)))
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MYRTOS_CreateTask+0x78>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d201      	bcs.n	800072e <MYRTOS_CreateTask+0x32>
	{
		return Task_exceeded_StackSize;
 800072a:	2302      	movs	r3, #2
 800072c:	e01b      	b.n	8000766 <MYRTOS_CreateTask+0x6a>
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8 );
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	3b08      	subs	r3, #8
 8000734:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <MYRTOS_CreateTask+0x74>)
 8000736:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task stack
	MyRTOS_Create_Task_Stack(Tref);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ffa0 	bl	8000680 <MyRTOS_Create_Task_Stack>

	//update sch Table
	OS_Control.OSTasks[OS_Control.NoOfActiveTasks] = Tref;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MYRTOS_CreateTask+0x74>)
 8000742:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000746:	490a      	ldr	r1, [pc, #40]	; (8000770 <MYRTOS_CreateTask+0x74>)
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MYRTOS_CreateTask+0x74>)
 8000750:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000754:	3301      	adds	r3, #1
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <MYRTOS_CreateTask+0x74>)
 8000758:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	//Task State Update -> Suspend
	Tref->TaskState = Suspend;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error ;
 8000764:	7bfb      	ldrb	r3, [r7, #15]

}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000040 	.word	0x20000040
 8000774:	20000ad8 	.word	0x20000ad8

08000778 <bubblesort>:

//Handler Mode
void bubblesort()
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
	unsigned int i,j,n;
	Task_ref* temp;
	n = OS_Control.NoOfActiveTasks;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <bubblesort+0x8c>)
 8000780:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000784:	607b      	str	r3, [r7, #4]
	for (i=0 ; i<n-1 ; i++)
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	e030      	b.n	80007ee <bubblesort+0x76>
		for (j=0 ; j<n-i-1 ; j++)
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	e023      	b.n	80007da <bubblesort+0x62>
			if(OS_Control.OSTasks[j]->priority > OS_Control.OSTasks[j+1]->priority)
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <bubblesort+0x8c>)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079a:	791a      	ldrb	r2, [r3, #4]
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	3301      	adds	r3, #1
 80007a0:	4918      	ldr	r1, [pc, #96]	; (8000804 <bubblesort+0x8c>)
 80007a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d913      	bls.n	80007d4 <bubblesort+0x5c>
			{
				temp = OS_Control.OSTasks[j];
 80007ac:	4a15      	ldr	r2, [pc, #84]	; (8000804 <bubblesort+0x8c>)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b4:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j+1];
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	3301      	adds	r3, #1
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <bubblesort+0x8c>)
 80007bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c0:	4910      	ldr	r1, [pc, #64]	; (8000804 <bubblesort+0x8c>)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j+1] = temp;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	3301      	adds	r3, #1
 80007cc:	490d      	ldr	r1, [pc, #52]	; (8000804 <bubblesort+0x8c>)
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j=0 ; j<n-i-1 ; j++)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	3b01      	subs	r3, #1
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d3d4      	bcc.n	8000792 <bubblesort+0x1a>
	for (i=0 ; i<n-1 ; i++)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d3c9      	bcc.n	800078c <bubblesort+0x14>
			}
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000040 	.word	0x20000040

08000808 <MYRTOS_Update_Scheduler_Table>:


//Handler Mode
void MYRTOS_Update_Scheduler_Table()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
	Task_ref* temp = NULL;
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask;
	Task_ref* PnextTask;
	int i =0;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubblesort();
 8000816:	f7ff ffaf 	bl	8000778 <bubblesort>

	//2- free ready queue
	while(FIFO_dequeue(&Ready_Queue, &temp) != FIFO_EMPTY);
 800081a:	bf00      	nop
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	482b      	ldr	r0, [pc, #172]	; (80008d0 <MYRTOS_Update_Scheduler_Table+0xc8>)
 8000822:	f7ff fda7 	bl	8000374 <FIFO_dequeue>
 8000826:	4603      	mov	r3, r0
 8000828:	2b02      	cmp	r3, #2
 800082a:	d1f7      	bne.n	800081c <MYRTOS_Update_Scheduler_Table+0x14>

	//3- update ready queue
	while(i < OS_Control.NoOfActiveTasks)
 800082c:	e044      	b.n	80008b8 <MYRTOS_Update_Scheduler_Table+0xb0>
	{
		Ptask = OS_Control.OSTasks[i];
 800082e:	4a29      	ldr	r2, [pc, #164]	; (80008d4 <MYRTOS_Update_Scheduler_Table+0xcc>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i+1];
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	3301      	adds	r3, #1
 800083c:	4a25      	ldr	r2, [pc, #148]	; (80008d4 <MYRTOS_Update_Scheduler_Table+0xcc>)
 800083e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000842:	607b      	str	r3, [r7, #4]
		if(Ptask->TaskState != Suspend)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800084a:	2b00      	cmp	r3, #0
 800084c:	d031      	beq.n	80008b2 <MYRTOS_Update_Scheduler_Table+0xaa>
		{
			//in case we reached to the end of available OSTASKS
			if(PnextTask->TaskState == Suspend)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000854:	2b00      	cmp	r3, #0
 8000856:	d108      	bne.n	800086a <MYRTOS_Update_Scheduler_Table+0x62>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	481d      	ldr	r0, [pc, #116]	; (80008d0 <MYRTOS_Update_Scheduler_Table+0xc8>)
 800085c:	f7ff fd48 	bl	80002f0 <FIFO_enqueue>
				Ptask->TaskState = ready;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	2203      	movs	r2, #3
 8000864:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000868:	e02e      	b.n	80008c8 <MYRTOS_Update_Scheduler_Table+0xc0>
			}
			//if the Ptask priority > next task then (lowest number is meaning higher priority)
			if(Ptask->priority < PnextTask->priority)
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	791a      	ldrb	r2, [r3, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	429a      	cmp	r2, r3
 8000874:	d208      	bcs.n	8000888 <MYRTOS_Update_Scheduler_Table+0x80>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000876:	68b9      	ldr	r1, [r7, #8]
 8000878:	4815      	ldr	r0, [pc, #84]	; (80008d0 <MYRTOS_Update_Scheduler_Table+0xc8>)
 800087a:	f7ff fd39 	bl	80002f0 <FIFO_enqueue>
				Ptask->TaskState = ready;
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	2203      	movs	r2, #3
 8000882:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000886:	e01f      	b.n	80008c8 <MYRTOS_Update_Scheduler_Table+0xc0>
			}else if(Ptask->priority == PnextTask->priority)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	791a      	ldrb	r2, [r3, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	d108      	bne.n	80008a6 <MYRTOS_Update_Scheduler_Table+0x9e>
			{
				//if the Ptask priority == next task then push Ptask to ready state
				//make the Ptask = next task and nexttask++
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MYRTOS_Update_Scheduler_Table+0xc8>)
 8000898:	f7ff fd2a 	bl	80002f0 <FIFO_enqueue>
				Ptask->TaskState = ready;
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	2203      	movs	r2, #3
 80008a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80008a4:	e005      	b.n	80008b2 <MYRTOS_Update_Scheduler_Table+0xaa>
			}else if (Ptask->priority > PnextTask->priority)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	791a      	ldrb	r2, [r3, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d809      	bhi.n	80008c6 <MYRTOS_Update_Scheduler_Table+0xbe>
				//not allowed to happen as we already reordered it by bubble sort
				break;
			}

		}
		i++;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
	while(i < OS_Control.NoOfActiveTasks)
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MYRTOS_Update_Scheduler_Table+0xcc>)
 80008ba:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d8b4      	bhi.n	800082e <MYRTOS_Update_Scheduler_Table+0x26>
	}


}
 80008c4:	e000      	b.n	80008c8 <MYRTOS_Update_Scheduler_Table+0xc0>
				break;
 80008c6:	bf00      	nop
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000002c 	.word	0x2000002c
 80008d4:	20000040 	.word	0x20000040

080008d8 <Decide_whatNext>:


//Handler Mode
void Decide_whatNext()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	//if ready queue is empty && OS_Control->CurrentTask != suspend
	if(Ready_Queue.counter == 0 && OS_Control.CurrentTask->TaskState != Suspend)
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <Decide_whatNext+0x98>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d11a      	bne.n	800091a <Decide_whatNext+0x42>
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <Decide_whatNext+0x9c>)
 80008e6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d013      	beq.n	800091a <Decide_whatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running;
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <Decide_whatNext+0x9c>)
 80008f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008f8:	2201      	movs	r2, #1
 80008fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add the current task again (round robin)
		FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <Decide_whatNext+0x9c>)
 8000900:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000904:	4619      	mov	r1, r3
 8000906:	481a      	ldr	r0, [pc, #104]	; (8000970 <Decide_whatNext+0x98>)
 8000908:	f7ff fcf2 	bl	80002f0 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask;
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <Decide_whatNext+0x9c>)
 800090e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <Decide_whatNext+0x9c>)
 8000914:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = ready;
		}
	}

}
 8000918:	e027      	b.n	800096a <Decide_whatNext+0x92>
		FIFO_dequeue(&Ready_Queue, &OS_Control.NextTask);
 800091a:	4917      	ldr	r1, [pc, #92]	; (8000978 <Decide_whatNext+0xa0>)
 800091c:	4814      	ldr	r0, [pc, #80]	; (8000970 <Decide_whatNext+0x98>)
 800091e:	f7ff fd29 	bl	8000374 <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <Decide_whatNext+0x9c>)
 8000924:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000928:	2201      	movs	r2, #1
 800092a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority) && (OS_Control.CurrentTask->TaskState != Suspend))
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <Decide_whatNext+0x9c>)
 8000930:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000934:	791a      	ldrb	r2, [r3, #4]
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <Decide_whatNext+0x9c>)
 8000938:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800093c:	791b      	ldrb	r3, [r3, #4]
 800093e:	429a      	cmp	r2, r3
 8000940:	d113      	bne.n	800096a <Decide_whatNext+0x92>
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <Decide_whatNext+0x9c>)
 8000944:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000948:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800094c:	2b00      	cmp	r3, #0
 800094e:	d00c      	beq.n	800096a <Decide_whatNext+0x92>
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <Decide_whatNext+0x9c>)
 8000952:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <Decide_whatNext+0x98>)
 800095a:	f7ff fcc9 	bl	80002f0 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = ready;
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <Decide_whatNext+0x9c>)
 8000960:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000964:	2203      	movs	r2, #3
 8000966:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000002c 	.word	0x2000002c
 8000974:	20000040 	.word	0x20000040
 8000978:	200001e4 	.word	0x200001e4

0800097c <OS_SVC>:



//Handler Mode
void OS_SVC(int* StackFramePointer)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	//r0,r1,r2,r3,r12,LR,PC,XPSR
	unsigned char SVC_Number;
	SVC_Number = *((unsigned char*)(((unsigned char*)StackFramePointer[6])-2)) ;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3318      	adds	r3, #24
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	3b02      	subs	r3, #2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	73fb      	strb	r3, [r7, #15]

	switch (SVC_Number)
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	2b00      	cmp	r3, #0
 8000994:	db1a      	blt.n	80009cc <OS_SVC+0x50>
 8000996:	2b01      	cmp	r3, #1
 8000998:	dd01      	ble.n	800099e <OS_SVC+0x22>
 800099a:	2b02      	cmp	r3, #2
			}
		}
		break;
	case SVC_TaskWaitingTime:

		break;
 800099c:	e016      	b.n	80009cc <OS_SVC+0x50>
		MYRTOS_Update_Scheduler_Table();
 800099e:	f7ff ff33 	bl	8000808 <MYRTOS_Update_Scheduler_Table>
		if(OS_Control.OSmodeID == OSrunning)
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <OS_SVC+0x58>)
 80009a4:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d10e      	bne.n	80009ca <OS_SVC+0x4e>
			if(strcmp(OS_Control.CurrentTask->TaskName, "idleTask") !=0)
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <OS_SVC+0x58>)
 80009ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009b2:	331c      	adds	r3, #28
 80009b4:	4908      	ldr	r1, [pc, #32]	; (80009d8 <OS_SVC+0x5c>)
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fbda 	bl	8000170 <strcmp>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <OS_SVC+0x4e>
				Decide_whatNext();
 80009c2:	f7ff ff89 	bl	80008d8 <Decide_whatNext>
				Trigger_OS_PendSV();
 80009c6:	f7ff fc49 	bl	800025c <Trigger_OS_PendSV>
		break;
 80009ca:	bf00      	nop

	}

}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000040 	.word	0x20000040
 80009d8:	08000fa4 	.word	0x08000fa4

080009dc <MYRTOS_OS_SVC_Set>:

//Thread Mode
void MYRTOS_OS_SVC_Set(SVC_ID id)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	switch (id)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d006      	beq.n	80009fa <MYRTOS_OS_SVC_Set+0x1e>
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d006      	beq.n	80009fe <MYRTOS_OS_SVC_Set+0x22>
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d000      	beq.n	80009f6 <MYRTOS_OS_SVC_Set+0x1a>
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
		break;
	}

}
 80009f4:	e005      	b.n	8000a02 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x00");
 80009f6:	df00      	svc	0
		break;
 80009f8:	e003      	b.n	8000a02 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x01");
 80009fa:	df01      	svc	1
		break;
 80009fc:	e001      	b.n	8000a02 <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x02");
 80009fe:	df02      	svc	2
		break;
 8000a00:	bf00      	nop
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <MYRTOS_ActivateTask>:

void MYRTOS_ActivateTask(Task_ref* Tref)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2202      	movs	r2, #2
 8000a18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff ffdd 	bl	80009dc <MYRTOS_OS_SVC_Set>

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <MYRTOS_StartOS>:

}


void MYRTOS_StartOS()
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	OS_Control.OSmodeID = OSrunning;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MYRTOS_StartOS+0x54>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//set default "Current Task = Idle Task"
	OS_Control.CurrentTask = &MYRTOS_idleTask;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MYRTOS_StartOS+0x54>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MYRTOS_StartOS+0x58>)
 8000a3c:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate Idle Task
	MYRTOS_ActivateTask(&MYRTOS_idleTask);
 8000a40:	4810      	ldr	r0, [pc, #64]	; (8000a84 <MYRTOS_StartOS+0x58>)
 8000a42:	f7ff ffe3 	bl	8000a0c <MYRTOS_ActivateTask>
	//Start Ticker
	Start_Ticker(); // 1ms
 8000a46:	f7ff fc17 	bl	8000278 <Start_Ticker>

	OS_Set_PSP(OS_Control.CurrentTask->Current_PSP);
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <MYRTOS_StartOS+0x54>)
 8000a4c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f380 8809 	msr	PSP, r0
	// Switch Thread mode from MSP to PSP (Unprivileged)
	OS_Switch_SP_to_PSP;
 8000a58:	f3ef 8014 	mrs	r0, CONTROL
 8000a5c:	f04f 0102 	mov.w	r1, #2
 8000a60:	ea40 0001 	orr.w	r0, r0, r1
 8000a64:	f380 8814 	msr	CONTROL, r0
	OS_Switch_UnPrivileged;
 8000a68:	f3ef 8314 	mrs	r3, CONTROL
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	f383 8814 	msr	CONTROL, r3
	MYRTOS_idleTask.p_TaskEntry();
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <MYRTOS_StartOS+0x58>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	4798      	blx	r3
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000040 	.word	0x20000040
 8000a84:	200001ec 	.word	0x200001ec

08000a88 <task1>:

Task_ref Task1,Task2,Task3;
unsigned char Task1LED,Task2LED,Task3LED,Task4LED;

void task1()
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	while (1)
	{
		//Task 1 code
		Task1LED ^= 1;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <task1+0x14>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	f083 0301 	eor.w	r3, r3, #1
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b01      	ldr	r3, [pc, #4]	; (8000a9c <task1+0x14>)
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e7f7      	b.n	8000a8c <task1+0x4>
 8000a9c:	20000450 	.word	0x20000450

08000aa0 <task2>:
	}
}

void task2()
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
	while (1)
	{
		//Task 2 code
		Task2LED ^= 1;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <task2+0x14>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	f083 0301 	eor.w	r3, r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b01      	ldr	r3, [pc, #4]	; (8000ab4 <task2+0x14>)
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e7f7      	b.n	8000aa4 <task2+0x4>
 8000ab4:	20000409 	.word	0x20000409

08000ab8 <task3>:
	}
}

void task3()
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
	while (1)
	{
		//Task 3 code
		Task3LED ^= 1;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <task3+0x14>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b01      	ldr	r3, [pc, #4]	; (8000acc <task3+0x14>)
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e7f7      	b.n	8000abc <task3+0x4>
 8000acc:	200004d4 	.word	0x200004d4

08000ad0 <main>:
	}
}

int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	//HW_init (initialize clock Tree, Reset controller)
	HW_init();
 8000ada:	f7ff fbb5 	bl	8000248 <HW_init>

	if ( MYRTOS_init() != NoError )
 8000ade:	f7ff fd8f 	bl	8000600 <MYRTOS_init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d000      	beq.n	8000aea <main+0x1a>
		while (1);
 8000ae8:	e7fe      	b.n	8000ae8 <main+0x18>

	Task1.Stack_Size = 1024;
 8000aea:	4b30      	ldr	r3, [pc, #192]	; (8000bac <main+0xdc>)
 8000aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af0:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry = task1;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <main+0xdc>)
 8000af4:	4a2e      	ldr	r2, [pc, #184]	; (8000bb0 <main+0xe0>)
 8000af6:	609a      	str	r2, [r3, #8]
	Task1.priority = 3;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <main+0xdc>)
 8000afa:	2203      	movs	r2, #3
 8000afc:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName , "task_1");
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <main+0xe4>)
 8000b00:	4a2d      	ldr	r2, [pc, #180]	; (8000bb8 <main+0xe8>)
 8000b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b06:	6018      	str	r0, [r3, #0]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	8019      	strh	r1, [r3, #0]
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	0c0a      	lsrs	r2, r1, #16
 8000b10:	701a      	strb	r2, [r3, #0]

	Task2.Stack_Size = 1024;
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <main+0xec>)
 8000b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b18:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry = task2;
 8000b1a:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <main+0xec>)
 8000b1c:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <main+0xf0>)
 8000b1e:	609a      	str	r2, [r3, #8]
	Task2.priority = 3;
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <main+0xec>)
 8000b22:	2203      	movs	r2, #3
 8000b24:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName , "task_2");
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <main+0xf4>)
 8000b28:	4a27      	ldr	r2, [pc, #156]	; (8000bc8 <main+0xf8>)
 8000b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b2e:	6018      	str	r0, [r3, #0]
 8000b30:	3304      	adds	r3, #4
 8000b32:	8019      	strh	r1, [r3, #0]
 8000b34:	3302      	adds	r3, #2
 8000b36:	0c0a      	lsrs	r2, r1, #16
 8000b38:	701a      	strb	r2, [r3, #0]

	Task3.Stack_Size = 1024;
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <main+0xfc>)
 8000b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b40:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry = task3;
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <main+0xfc>)
 8000b44:	4a22      	ldr	r2, [pc, #136]	; (8000bd0 <main+0x100>)
 8000b46:	609a      	str	r2, [r3, #8]
	Task3.priority = 3;
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <main+0xfc>)
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName , "task_3");
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <main+0x104>)
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <main+0x108>)
 8000b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b56:	6018      	str	r0, [r3, #0]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	8019      	strh	r1, [r3, #0]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	0c0a      	lsrs	r2, r1, #16
 8000b60:	701a      	strb	r2, [r3, #0]

	error += MYRTOS_CreateTask(&Task1);
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <main+0xdc>)
 8000b64:	f7ff fdca 	bl	80006fc <MYRTOS_CreateTask>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4413      	add	r3, r2
 8000b70:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task2);
 8000b72:	4812      	ldr	r0, [pc, #72]	; (8000bbc <main+0xec>)
 8000b74:	f7ff fdc2 	bl	80006fc <MYRTOS_CreateTask>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4413      	add	r3, r2
 8000b80:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task3);
 8000b82:	4812      	ldr	r0, [pc, #72]	; (8000bcc <main+0xfc>)
 8000b84:	f7ff fdba 	bl	80006fc <MYRTOS_CreateTask>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	4413      	add	r3, r2
 8000b90:	71fb      	strb	r3, [r7, #7]

	MYRTOS_ActivateTask(&Task1);
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <main+0xdc>)
 8000b94:	f7ff ff3a 	bl	8000a0c <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task2);
 8000b98:	4808      	ldr	r0, [pc, #32]	; (8000bbc <main+0xec>)
 8000b9a:	f7ff ff37 	bl	8000a0c <MYRTOS_ActivateTask>
	MYRTOS_ActivateTask(&Task3);
 8000b9e:	480b      	ldr	r0, [pc, #44]	; (8000bcc <main+0xfc>)
 8000ba0:	f7ff ff34 	bl	8000a0c <MYRTOS_ActivateTask>

	MYRTOS_StartOS();
 8000ba4:	f7ff ff42 	bl	8000a2c <MYRTOS_StartOS>

	while(1)
 8000ba8:	e7fe      	b.n	8000ba8 <main+0xd8>
 8000baa:	bf00      	nop
 8000bac:	200003c4 	.word	0x200003c4
 8000bb0:	08000a89 	.word	0x08000a89
 8000bb4:	200003e0 	.word	0x200003e0
 8000bb8:	08000fb0 	.word	0x08000fb0
 8000bbc:	20000454 	.word	0x20000454
 8000bc0:	08000aa1 	.word	0x08000aa1
 8000bc4:	20000470 	.word	0x20000470
 8000bc8:	08000fb8 	.word	0x08000fb8
 8000bcc:	2000040c 	.word	0x2000040c
 8000bd0:	08000ab9 	.word	0x08000ab9
 8000bd4:	20000428 	.word	0x20000428
 8000bd8:	08000fc0 	.word	0x08000fc0

08000bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bde:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000be0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	; (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0a:	f000 f99b 	bl	8000f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0e:	f7ff ff5f 	bl	8000ad0 <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   r0, =_estack
 8000c14:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c20:	08000fd0 	.word	0x08000fd0
  ldr r2, =_sbss
 8000c24:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c28:	200004d8 	.word	0x200004d8

08000c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_2_IRQHandler>
	...

08000c30 <EXTI0_IRQHandler>:
 * 										ISR Functions
 * =============================================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	//Clear by writing '1' into the bit Pending register {EXTI_PR}
	EXTI->PR |= 1<<0;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <EXTI0_IRQHandler+0x1c>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <EXTI0_IRQHandler+0x1c>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[0]();
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <EXTI0_IRQHandler+0x20>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4798      	blx	r3
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40010400 	.word	0x40010400
 8000c50:	20000498 	.word	0x20000498

08000c54 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <EXTI1_IRQHandler+0x1c>)
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <EXTI1_IRQHandler+0x1c>)
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[1]();
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <EXTI1_IRQHandler+0x20>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4798      	blx	r3
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010400 	.word	0x40010400
 8000c74:	20000498 	.word	0x20000498

08000c78 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <EXTI2_IRQHandler+0x1c>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <EXTI2_IRQHandler+0x1c>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[2]();
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <EXTI2_IRQHandler+0x20>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4798      	blx	r3
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010400 	.word	0x40010400
 8000c98:	20000498 	.word	0x20000498

08000c9c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <EXTI3_IRQHandler+0x1c>)
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <EXTI3_IRQHandler+0x1c>)
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[3]();
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <EXTI3_IRQHandler+0x20>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	4798      	blx	r3
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40010400 	.word	0x40010400
 8000cbc:	20000498 	.word	0x20000498

08000cc0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <EXTI4_IRQHandler+0x1c>)
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <EXTI4_IRQHandler+0x1c>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[4]();
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <EXTI4_IRQHandler+0x20>)
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	4798      	blx	r3
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40010400 	.word	0x40010400
 8000ce0:	20000498 	.word	0x20000498

08000ce4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5;	GP_IRQ_CallBack[5]();}
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f003 0320 	and.w	r3, r3, #32
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <EXTI9_5_IRQHandler+0x22>
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000cfa:	f043 0320 	orr.w	r3, r3, #32
 8000cfe:	6153      	str	r3, [r2, #20]
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <EXTI9_5_IRQHandler+0xa4>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6;	GP_IRQ_CallBack[6]();}
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d008      	beq.n	8000d24 <EXTI9_5_IRQHandler+0x40>
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <EXTI9_5_IRQHandler+0xa4>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7;	GP_IRQ_CallBack[7]();}
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d008      	beq.n	8000d42 <EXTI9_5_IRQHandler+0x5e>
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3a:	6153      	str	r3, [r2, #20]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <EXTI9_5_IRQHandler+0xa4>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8;	GP_IRQ_CallBack[8]();}
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d008      	beq.n	8000d60 <EXTI9_5_IRQHandler+0x7c>
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d58:	6153      	str	r3, [r2, #20]
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <EXTI9_5_IRQHandler+0xa4>)
 8000d5c:	6a1b      	ldr	r3, [r3, #32]
 8000d5e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9;	GP_IRQ_CallBack[9]();}
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d008      	beq.n	8000d7e <EXTI9_5_IRQHandler+0x9a>
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d76:	6153      	str	r3, [r2, #20]
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <EXTI9_5_IRQHandler+0xa4>)
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	4798      	blx	r3
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40010400 	.word	0x40010400
 8000d88:	20000498 	.word	0x20000498

08000d8c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10;	GP_IRQ_CallBack[10]();}
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d008      	beq.n	8000dae <EXTI15_10_IRQHandler+0x22>
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	6153      	str	r3, [r2, #20]
 8000da8:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11;	GP_IRQ_CallBack[11]();}
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d008      	beq.n	8000dcc <EXTI15_10_IRQHandler+0x40>
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12;	GP_IRQ_CallBack[12]();}
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d008      	beq.n	8000dea <EXTI15_10_IRQHandler+0x5e>
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de2:	6153      	str	r3, [r2, #20]
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13;	GP_IRQ_CallBack[13]();}
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d008      	beq.n	8000e08 <EXTI15_10_IRQHandler+0x7c>
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e00:	6153      	str	r3, [r2, #20]
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e06:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14;	GP_IRQ_CallBack[14]();}
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <EXTI15_10_IRQHandler+0x9a>
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1e:	6153      	str	r3, [r2, #20]
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e24:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15;	GP_IRQ_CallBack[15]();}
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d008      	beq.n	8000e44 <EXTI15_10_IRQHandler+0xb8>
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e42:	4798      	blx	r3
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40010400 	.word	0x40010400
 8000e4c:	20000498 	.word	0x20000498

08000e50 <SPI1_IRQHandler>:
	 * ==========================================================================================
	 */


	void SPI1_IRQHandler (void)
	{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI1->SR & (1<<1) ) >>1 );
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <SPI1_IRQHandler+0x54>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	085b      	lsrs	r3, r3, #1
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	793b      	ldrb	r3, [r7, #4]
 8000e64:	f362 0300 	bfi	r3, r2, #0, #1
 8000e68:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI1->SR & (1<<0) ) >>0 );
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <SPI1_IRQHandler+0x54>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	793b      	ldrb	r3, [r7, #4]
 8000e76:	f362 0341 	bfi	r3, r2, #1, #1
 8000e7a:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI1->SR & (1<<4) ) >>4 );
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <SPI1_IRQHandler+0x54>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	793b      	ldrb	r3, [r7, #4]
 8000e8a:	f362 0382 	bfi	r3, r2, #2, #1
 8000e8e:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src);
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <SPI1_IRQHandler+0x58>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	7938      	ldrb	r0, [r7, #4]
 8000e98:	4798      	blx	r3
	}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40013000 	.word	0x40013000
 8000ea8:	2000001c 	.word	0x2000001c

08000eac <SPI2_IRQHandler>:


	void SPI2_IRQHandler (void)
	{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI2->SR & (1<<1) ) >>1 );
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <SPI2_IRQHandler+0x54>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	085b      	lsrs	r3, r3, #1
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	793b      	ldrb	r3, [r7, #4]
 8000ec0:	f362 0300 	bfi	r3, r2, #0, #1
 8000ec4:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI2->SR & (1<<0) ) >>0 );
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <SPI2_IRQHandler+0x54>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	793b      	ldrb	r3, [r7, #4]
 8000ed2:	f362 0341 	bfi	r3, r2, #1, #1
 8000ed6:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI2->SR & (1<<4) ) >>4 );
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <SPI2_IRQHandler+0x54>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	793b      	ldrb	r3, [r7, #4]
 8000ee6:	f362 0382 	bfi	r3, r2, #2, #1
 8000eea:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src);
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SPI2_IRQHandler+0x58>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	7938      	ldrb	r0, [r7, #4]
 8000ef4:	4798      	blx	r3
	}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40003800 	.word	0x40003800
 8000f04:	2000001c 	.word	0x2000001c

08000f08 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler (void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <USART1_IRQHandler+0x10>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	4798      	blx	r3
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000024 	.word	0x20000024

08000f1c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <USART2_IRQHandler+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	4798      	blx	r3
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000024 	.word	0x20000024

08000f30 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <USART3_IRQHandler+0x10>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	4798      	blx	r3
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000024 	.word	0x20000024

08000f44 <__libc_init_array>:
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	2500      	movs	r5, #0
 8000f48:	4e0c      	ldr	r6, [pc, #48]	; (8000f7c <__libc_init_array+0x38>)
 8000f4a:	4c0d      	ldr	r4, [pc, #52]	; (8000f80 <__libc_init_array+0x3c>)
 8000f4c:	1ba4      	subs	r4, r4, r6
 8000f4e:	10a4      	asrs	r4, r4, #2
 8000f50:	42a5      	cmp	r5, r4
 8000f52:	d109      	bne.n	8000f68 <__libc_init_array+0x24>
 8000f54:	f000 f81a 	bl	8000f8c <_init>
 8000f58:	2500      	movs	r5, #0
 8000f5a:	4e0a      	ldr	r6, [pc, #40]	; (8000f84 <__libc_init_array+0x40>)
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	; (8000f88 <__libc_init_array+0x44>)
 8000f5e:	1ba4      	subs	r4, r4, r6
 8000f60:	10a4      	asrs	r4, r4, #2
 8000f62:	42a5      	cmp	r5, r4
 8000f64:	d105      	bne.n	8000f72 <__libc_init_array+0x2e>
 8000f66:	bd70      	pop	{r4, r5, r6, pc}
 8000f68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f6c:	4798      	blx	r3
 8000f6e:	3501      	adds	r5, #1
 8000f70:	e7ee      	b.n	8000f50 <__libc_init_array+0xc>
 8000f72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f76:	4798      	blx	r3
 8000f78:	3501      	adds	r5, #1
 8000f7a:	e7f2      	b.n	8000f62 <__libc_init_array+0x1e>
 8000f7c:	08000fc8 	.word	0x08000fc8
 8000f80:	08000fc8 	.word	0x08000fc8
 8000f84:	08000fc8 	.word	0x08000fc8
 8000f88:	08000fcc 	.word	0x08000fcc

08000f8c <_init>:
 8000f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8e:	bf00      	nop
 8000f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f92:	bc08      	pop	{r3}
 8000f94:	469e      	mov	lr, r3
 8000f96:	4770      	bx	lr

08000f98 <_fini>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	bf00      	nop
 8000f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9e:	bc08      	pop	{r3}
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	4770      	bx	lr
