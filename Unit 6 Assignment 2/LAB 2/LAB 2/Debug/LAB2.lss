
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006db  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  000009c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f3  00000000  00000000  00000f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000328  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001836  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_1>
   8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_2>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  64:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <interrupt_init>:


void interrupt_init()
{
	// INT0 any logical change generates interrput request
	Set_Bit(INT_MCUCR,0);
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	96 b7       	in	r25, 0x36	; 54
  70:	81 60       	ori	r24, 0x01	; 1
  72:	96 bf       	out	0x36, r25	; 54
  74:	85 bf       	out	0x35, r24	; 53
	Reset_Bit(INT_MCUCR,1);
  76:	85 b7       	in	r24, 0x35	; 53
  78:	96 b7       	in	r25, 0x36	; 54
  7a:	8d 7f       	andi	r24, 0xFD	; 253
  7c:	96 bf       	out	0x36, r25	; 54
  7e:	85 bf       	out	0x35, r24	; 53
	// INT1 rising edge generates interrput request
	Set_Bit(INT_MCUCR,2);
  80:	85 b7       	in	r24, 0x35	; 53
  82:	96 b7       	in	r25, 0x36	; 54
  84:	84 60       	ori	r24, 0x04	; 4
  86:	96 bf       	out	0x36, r25	; 54
  88:	85 bf       	out	0x35, r24	; 53
	Set_Bit(INT_MCUCR,3);
  8a:	85 b7       	in	r24, 0x35	; 53
  8c:	96 b7       	in	r25, 0x36	; 54
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	96 bf       	out	0x36, r25	; 54
  92:	85 bf       	out	0x35, r24	; 53
	// INT2 falling edge generates interrput request
	Reset_Bit(INT_MCUCSR,6);
  94:	84 b7       	in	r24, 0x34	; 52
  96:	95 b7       	in	r25, 0x35	; 53
  98:	8f 7b       	andi	r24, 0xBF	; 191
  9a:	95 bf       	out	0x35, r25	; 53
  9c:	84 bf       	out	0x34, r24	; 52
	// enable all interrput
	Set_Bit(INT_GICR,5);
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	9c b7       	in	r25, 0x3c	; 60
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	9c bf       	out	0x3c, r25	; 60
  a6:	8b bf       	out	0x3b, r24	; 59
	Set_Bit(INT_GICR,6);
  a8:	8b b7       	in	r24, 0x3b	; 59
  aa:	9c b7       	in	r25, 0x3c	; 60
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	9c bf       	out	0x3c, r25	; 60
  b0:	8b bf       	out	0x3b, r24	; 59
	Set_Bit(INT_GICR,7);
  b2:	8b b7       	in	r24, 0x3b	; 59
  b4:	9c b7       	in	r25, 0x3c	; 60
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	9c bf       	out	0x3c, r25	; 60
  ba:	8b bf       	out	0x3b, r24	; 59
	sei();
  bc:	78 94       	sei
  be:	08 95       	ret

000000c0 <PORT_init>:
}

void PORT_init()
{
	// set PORTD pin(5,6,7) as output
	Set_Bit(IO_DDRD,5);
  c0:	81 b3       	in	r24, 0x11	; 17
  c2:	92 b3       	in	r25, 0x12	; 18
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	92 bb       	out	0x12, r25	; 18
  c8:	81 bb       	out	0x11, r24	; 17
	Set_Bit(IO_DDRD,6);
  ca:	81 b3       	in	r24, 0x11	; 17
  cc:	92 b3       	in	r25, 0x12	; 18
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	92 bb       	out	0x12, r25	; 18
  d2:	81 bb       	out	0x11, r24	; 17
	Set_Bit(IO_DDRD,7);
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	92 b3       	in	r25, 0x12	; 18
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	92 bb       	out	0x12, r25	; 18
  dc:	81 bb       	out	0x11, r24	; 17
	// set PORTD pin(2,3) as input
	Reset_Bit(IO_DDRD,2);
  de:	81 b3       	in	r24, 0x11	; 17
  e0:	92 b3       	in	r25, 0x12	; 18
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	92 bb       	out	0x12, r25	; 18
  e6:	81 bb       	out	0x11, r24	; 17
	Reset_Bit(IO_DDRD,3);
  e8:	81 b3       	in	r24, 0x11	; 17
  ea:	92 b3       	in	r25, 0x12	; 18
  ec:	87 7f       	andi	r24, 0xF7	; 247
  ee:	92 bb       	out	0x12, r25	; 18
  f0:	81 bb       	out	0x11, r24	; 17
	// set PORTB pin(2) as input
	Reset_Bit(IO_DDRB,2);
  f2:	87 b3       	in	r24, 0x17	; 23
  f4:	98 b3       	in	r25, 0x18	; 24
  f6:	8b 7f       	andi	r24, 0xFB	; 251
  f8:	98 bb       	out	0x18, r25	; 24
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret

000000fe <main>:
}

int main(void)
{
    interrupt_init();
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <interrupt_init>
	PORT_init();
 102:	0e 94 60 00 	call	0xc0	; 0xc0 <PORT_init>
    while (1) 
    {
		// turn off all leds 
		Reset_Bit(IO_POTD,5);
 106:	82 b3       	in	r24, 0x12	; 18
 108:	93 b3       	in	r25, 0x13	; 19
 10a:	8f 7d       	andi	r24, 0xDF	; 223
 10c:	93 bb       	out	0x13, r25	; 19
 10e:	82 bb       	out	0x12, r24	; 18
		Reset_Bit(IO_POTD,6);
 110:	82 b3       	in	r24, 0x12	; 18
 112:	93 b3       	in	r25, 0x13	; 19
 114:	8f 7b       	andi	r24, 0xBF	; 191
 116:	93 bb       	out	0x13, r25	; 19
 118:	82 bb       	out	0x12, r24	; 18
		Reset_Bit(IO_POTD,7);
 11a:	82 b3       	in	r24, 0x12	; 18
 11c:	93 b3       	in	r25, 0x13	; 19
 11e:	8f 77       	andi	r24, 0x7F	; 127
 120:	93 bb       	out	0x13, r25	; 19
 122:	82 bb       	out	0x12, r24	; 18
 124:	f0 cf       	rjmp	.-32     	; 0x106 <main+0x8>

00000126 <__vector_1>:
    }
	return 0;
}

ISR(INT0_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
	Set_Bit(IO_POTD,5);
 136:	82 b3       	in	r24, 0x12	; 18
 138:	93 b3       	in	r25, 0x13	; 19
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	93 bb       	out	0x13, r25	; 19
 13e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	89 e6       	ldi	r24, 0x69	; 105
 144:	98 e1       	ldi	r25, 0x18	; 24
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <__vector_1+0x20>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <__vector_1+0x2a>
 150:	00 00       	nop
	_delay_ms(1000);
}
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <__vector_2>:
ISR(INT1_vect)
{
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	2f 93       	push	r18
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
	Set_Bit(IO_POTD,6);
 172:	82 b3       	in	r24, 0x12	; 18
 174:	93 b3       	in	r25, 0x13	; 19
 176:	80 64       	ori	r24, 0x40	; 64
 178:	93 bb       	out	0x13, r25	; 19
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	89 e6       	ldi	r24, 0x69	; 105
 180:	98 e1       	ldi	r25, 0x18	; 24
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <__vector_2+0x20>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <__vector_2+0x2a>
 18c:	00 00       	nop
	_delay_ms(1000);
}
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <__vector_3>:
ISR(INT2_vect)
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
	Set_Bit(IO_POTD,7);
 1ae:	82 b3       	in	r24, 0x12	; 18
 1b0:	93 b3       	in	r25, 0x13	; 19
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	93 bb       	out	0x13, r25	; 19
 1b6:	82 bb       	out	0x12, r24	; 18
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	89 e6       	ldi	r24, 0x69	; 105
 1bc:	98 e1       	ldi	r25, 0x18	; 24
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <__vector_3+0x20>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <__vector_3+0x2a>
 1c8:	00 00       	nop
	_delay_ms(1000);
}
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
