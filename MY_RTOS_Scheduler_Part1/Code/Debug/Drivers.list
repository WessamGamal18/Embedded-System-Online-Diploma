
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000768  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000898  08000898  00010898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008bc  080008bc  000108c4  2**0
                  CONTENTS
  4 .ARM          00000000  080008bc  080008bc  000108c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008bc  080008c4  000108c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008bc  080008bc  000108bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008c0  080008c0  000108c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000000  080008c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  080008c4  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000108c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000536c  00000000  00000000  000108ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d6a  00000000  00000000  00015c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e54  00000000  00000000  000169c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000278  00000000  00000000  00017818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000200  00000000  00000000  00017a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002acd  00000000  00000000  00017c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003008  00000000  00000000  0001a75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0001186a  00000000  00000000  0001d765  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002efcf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000788  00000000  00000000  0002f04c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000880 	.word	0x08000880

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000880 	.word	0x08000880

08000170 <HardFault_Handler>:

#include "CortexMX_OS_Porting.h"


void HardFault_Handler(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	while(1);
 8000174:	e7fe      	b.n	8000174 <HardFault_Handler+0x4>

08000176 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 8000176:	b480      	push	{r7}
 8000178:	af00      	add	r7, sp, #0
	while(1);
 800017a:	e7fe      	b.n	800017a <MemManage_Handler+0x4>

0800017c <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	while(1);
 8000180:	e7fe      	b.n	8000180 <BusFault_Handler+0x4>

08000182 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 8000182:	b480      	push	{r7}
 8000184:	af00      	add	r7, sp, #0
	while(1);
 8000186:	e7fe      	b.n	8000186 <UsageFault_Handler+0x4>

08000188 <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler()
{
	__asm ("tst lr,#4  \n\t"
 8000188:	f01e 0f04 	tst.w	lr, #4
 800018c:	bf0c      	ite	eq
 800018e:	f3ef 8008 	mrseq	r0, MSP
 8000192:	f3ef 8009 	mrsne	r0, PSP
 8000196:	f000 b829 	b.w	80001ec <OS_SVC_services>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC_services");
}
 800019a:	bf00      	nop

0800019c <HW_init>:


void HW_init()
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	// 8 MHZ
	// 1 count -> 0.125 us
	// X count -> 1 ms
	// X = 8000 count

}
 80001a0:	bf00      	nop
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <FIFO_init>:
 */

#include "MYRTOS_FIFO.h"

Buffer_status FIFO_init (FIFO_Buf_t* fifo, element_type* buff , unsigned int length)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
	if(!buff)
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d101      	bne.n	80001be <FIFO_init+0x16>
		return FIFO_NULL;
 80001ba:	2303      	movs	r3, #3
 80001bc:	e011      	b.n	80001e2 <FIFO_init+0x3a>

	fifo->base = buff;
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	68ba      	ldr	r2, [r7, #8]
 80001c2:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base;
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	68da      	ldr	r2, [r3, #12]
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	68da      	ldr	r2, [r3, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	611a      	str	r2, [r3, #16]
	fifo->counter = 0;
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80001e0:	2300      	movs	r3, #0
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <OS_SVC_services>:
Task_ref* Ready_Queue_FIFO[100];
Task_ref MYRTOS_idleTask ;

//to excute specific OS services
void OS_SVC_services (int* StackFramePointer)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set Stack -> r0 -> argument 0 = StackFramePointer
	//OS_SVC_Set Stack : r0,r1,r2,r3,r12,LR.PC.XPSR

	unsigned char SVC_Number;

	SVC_Number = *((unsigned char*)(((unsigned char*)StackFramePointer[6])-2)) ;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3318      	adds	r3, #24
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	3b02      	subs	r3, #2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	73fb      	strb	r3, [r7, #15]

	switch(SVC_Number)
 8000200:	7bfb      	ldrb	r3, [r7, #15]
 8000202:	2b02      	cmp	r3, #2
 8000204:	d003      	beq.n	800020e <OS_SVC_services+0x22>
 8000206:	2b03      	cmp	r3, #3
 8000208:	d003      	beq.n	8000212 <OS_SVC_services+0x26>
 800020a:	2b01      	cmp	r3, #1
	{
	case 1:

		break;
 800020c:	e002      	b.n	8000214 <OS_SVC_services+0x28>
	case 2:

		break;
 800020e:	bf00      	nop
 8000210:	e000      	b.n	8000214 <OS_SVC_services+0x28>
	case 3:

		break;
 8000212:	bf00      	nop
	}

}
 8000214:	bf00      	nop
 8000216:	3714      	adds	r7, #20
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr

0800021e <PendSV_Handler>:


void PendSV_Handler ()
{
 800021e:	b480      	push	{r7}
 8000220:	af00      	add	r7, sp, #0
	//Clear PendSV
	// SCB -> ICSR |= SCB_ICSR_PENDSVCLR_Msk
}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <MYRTOS_Idle_Task>:

void MYRTOS_Idle_Task()
{
 800022a:	b480      	push	{r7}
 800022c:	af00      	add	r7, sp, #0
	while (1)
	{
		__asm("NOP");
 800022e:	bf00      	nop
 8000230:	e7fd      	b.n	800022e <MYRTOS_Idle_Task+0x4>
	...

08000234 <MYRTOS_Create_MainStack>:

}


void MYRTOS_Create_MainStack()
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack;
 8000238:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <MYRTOS_Create_MainStack+0x34>)
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <MYRTOS_Create_MainStack+0x38>)
 800023c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <MYRTOS_Create_MainStack+0x38>)
 8000242:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000246:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800024a:	4a08      	ldr	r2, [pc, #32]	; (800026c <MYRTOS_Create_MainStack+0x38>)
 800024c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Aligned 8 Bytes spaces between main task and PSP tasks
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8 );
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <MYRTOS_Create_MainStack+0x38>)
 8000252:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000256:	3b08      	subs	r3, #8
 8000258:	4a04      	ldr	r2, [pc, #16]	; (800026c <MYRTOS_Create_MainStack+0x38>)
 800025a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//if (_E_MSP_Task < &_eheap) Error:excedded the available stack size

}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20002800 	.word	0x20002800
 800026c:	2000003c 	.word	0x2000003c

08000270 <MYRTOS_init>:



MYRTOS_errorID MYRTOS_init()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = NoError ;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID = OSsuspend;
 800027a:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <MYRTOS_init+0x64>)
 800027c:	2200      	movs	r2, #0
 800027e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the Main Stack for OS
	MYRTOS_Create_MainStack();
 8000282:	f7ff ffd7 	bl	8000234 <MYRTOS_Create_MainStack>

	//Create OS Ready Queue
	if (FIFO_init(&Ready_Queue, Ready_Queue_FIFO, 100) != FIFO_NO_ERROR)
 8000286:	2264      	movs	r2, #100	; 0x64
 8000288:	4913      	ldr	r1, [pc, #76]	; (80002d8 <MYRTOS_init+0x68>)
 800028a:	4814      	ldr	r0, [pc, #80]	; (80002dc <MYRTOS_init+0x6c>)
 800028c:	f7ff ff8c 	bl	80001a8 <FIFO_init>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <MYRTOS_init+0x2c>
		error += Ready_Queue_init_error;
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	3301      	adds	r3, #1
 800029a:	71fb      	strb	r3, [r7, #7]

	//Configure IDLE Task
	strcpy (MYRTOS_idleTask.TaskName , "idleTask");
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <MYRTOS_init+0x70>)
 800029e:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <MYRTOS_init+0x74>)
 80002a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80002a2:	c303      	stmia	r3!, {r0, r1}
 80002a4:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 255;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MYRTOS_init+0x78>)
 80002a8:	22ff      	movs	r2, #255	; 0xff
 80002aa:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_Idle_Task ;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MYRTOS_init+0x78>)
 80002ae:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <MYRTOS_init+0x7c>)
 80002b0:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300;
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <MYRTOS_init+0x78>)
 80002b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002b8:	601a      	str	r2, [r3, #0]

	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 80002ba:	480b      	ldr	r0, [pc, #44]	; (80002e8 <MYRTOS_init+0x78>)
 80002bc:	f000 f856 	bl	800036c <MYRTOS_CreateTask>
 80002c0:	4603      	mov	r3, r0
 80002c2:	461a      	mov	r2, r3
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	4413      	add	r3, r2
 80002c8:	71fb      	strb	r3, [r7, #7]




	return error ;
 80002ca:	79fb      	ldrb	r3, [r7, #7]

}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000003c 	.word	0x2000003c
 80002d8:	2000022c 	.word	0x2000022c
 80002dc:	20000028 	.word	0x20000028
 80002e0:	20000204 	.word	0x20000204
 80002e4:	08000898 	.word	0x08000898
 80002e8:	200001e8 	.word	0x200001e8
 80002ec:	0800022b 	.word	0x0800022b

080002f0 <MyRTOS_Create_Task_Stack>:


void MyRTOS_Create_Task_Stack(Task_ref* Tref)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	 * r12
	 * r4,r3,r2,r1,r0
	 * =====================
	 * r5,r6,r7,r8,r9,r11 (Saved/Restore) Manual
	 */
	Tref->Current_PSP = Tref->_S_PSP_Task ;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	461a      	mov	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP--;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	1f1a      	subs	r2, r3, #4
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000; // DUMMY_XPSR should T = 1 to avoid BUS fault
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000314:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	1f1a      	subs	r2, r3, #4
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ; //PC
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	689a      	ldr	r2, [r3, #8]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--; //LR = 0xFFFFFFFD (EXC_RETURN) Return to thread and PSP stack
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	1f1a      	subs	r2, r3, #4
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0xFFFFFFFD ;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f06f 0202 	mvn.w	r2, #2
 800033c:	601a      	str	r2, [r3, #0]

	for (int j=0; j<13;j++)
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	e00b      	b.n	800035c <MyRTOS_Create_Task_Stack+0x6c>
	{
		Tref->Current_PSP--;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	1f1a      	subs	r2, r3, #4
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP) = 0;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
	for (int j=0; j<13;j++)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	3301      	adds	r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	2b0c      	cmp	r3, #12
 8000360:	ddf0      	ble.n	8000344 <MyRTOS_Create_Task_Stack+0x54>
	}


}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <MYRTOS_CreateTask>:




MYRTOS_errorID MYRTOS_CreateTask(Task_ref* Tref)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID error = NoError ;
 8000374:	2300      	movs	r3, #0
 8000376:	73fb      	strb	r3, [r7, #15]

	//Create its own PSP stack
	//Check task stack size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <MYRTOS_CreateTask+0x58>)
 800037a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	691a      	ldr	r2, [r3, #16]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	1ad2      	subs	r2, r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	615a      	str	r2, [r3, #20]
	//	- Task stack		-
	//	- _E_PSP_Task		-
	//	-					-
	//	- _eheap			-
	//	-					-
	if(Tref->_E_PSP_Task < (unsigned int) (&(_eheap)))
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <MYRTOS_CreateTask+0x5c>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d201      	bcs.n	800039e <MYRTOS_CreateTask+0x32>
	{
		return Task_exceeded_StackSize;
 800039a:	2302      	movs	r3, #2
 800039c:	e00d      	b.n	80003ba <MYRTOS_CreateTask+0x4e>
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8 );
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	3b08      	subs	r3, #8
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <MYRTOS_CreateTask+0x58>)
 80003a6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task stack
	MyRTOS_Create_Task_Stack(Tref);
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff ffa0 	bl	80002f0 <MyRTOS_Create_Task_Stack>

	//Task State Update -> Suspend
	Tref->TaskState = Suspend;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2200      	movs	r2, #0
 80003b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error ;
 80003b8:	7bfb      	ldrb	r3, [r7, #15]

}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000003c 	.word	0x2000003c
 80003c8:	20000ac8 	.word	0x20000ac8

080003cc <task1>:


Task_ref Task1,Task2,Task3;

void task1()
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	while (1)
 80003d0:	e7fe      	b.n	80003d0 <task1+0x4>

080003d2 <task2>:
		//Task 1 code
	}
}

void task2()
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
	while (1)
 80003d6:	e7fe      	b.n	80003d6 <task2+0x4>

080003d8 <task3>:
		//Task 1 code
	}
}

void task3()
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	while (1)
 80003dc:	e7fe      	b.n	80003dc <task3+0x4>
	...

080003e0 <main>:
		//Task 1 code
	}
}

int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
	MYRTOS_errorID error;
	//HW_init (initialize clock Tree, Reset controller)
	HW_init();
 80003e6:	f7ff fed9 	bl	800019c <HW_init>

	if ( MYRTOS_init() != NoError )
 80003ea:	f7ff ff41 	bl	8000270 <MYRTOS_init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d000      	beq.n	80003f6 <main+0x16>
		while (1);
 80003f4:	e7fe      	b.n	80003f4 <main+0x14>

	Task1.Stack_Size = 1024;
 80003f6:	4b2a      	ldr	r3, [pc, #168]	; (80004a0 <main+0xc0>)
 80003f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003fc:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry = task1;
 80003fe:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <main+0xc0>)
 8000400:	4a28      	ldr	r2, [pc, #160]	; (80004a4 <main+0xc4>)
 8000402:	609a      	str	r2, [r3, #8]
	Task1.priority = 3;
 8000404:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <main+0xc0>)
 8000406:	2203      	movs	r2, #3
 8000408:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName , "task_1");
 800040a:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <main+0xc8>)
 800040c:	4a27      	ldr	r2, [pc, #156]	; (80004ac <main+0xcc>)
 800040e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000412:	6018      	str	r0, [r3, #0]
 8000414:	3304      	adds	r3, #4
 8000416:	8019      	strh	r1, [r3, #0]
 8000418:	3302      	adds	r3, #2
 800041a:	0c0a      	lsrs	r2, r1, #16
 800041c:	701a      	strb	r2, [r3, #0]

	Task2.Stack_Size = 1024;
 800041e:	4b24      	ldr	r3, [pc, #144]	; (80004b0 <main+0xd0>)
 8000420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000424:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry = task2;
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <main+0xd0>)
 8000428:	4a22      	ldr	r2, [pc, #136]	; (80004b4 <main+0xd4>)
 800042a:	609a      	str	r2, [r3, #8]
	Task2.priority = 3;
 800042c:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <main+0xd0>)
 800042e:	2203      	movs	r2, #3
 8000430:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName , "task_2");
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <main+0xd8>)
 8000434:	4a21      	ldr	r2, [pc, #132]	; (80004bc <main+0xdc>)
 8000436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800043a:	6018      	str	r0, [r3, #0]
 800043c:	3304      	adds	r3, #4
 800043e:	8019      	strh	r1, [r3, #0]
 8000440:	3302      	adds	r3, #2
 8000442:	0c0a      	lsrs	r2, r1, #16
 8000444:	701a      	strb	r2, [r3, #0]

	Task3.Stack_Size = 1024;
 8000446:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <main+0xe0>)
 8000448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800044c:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry = task3;
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <main+0xe0>)
 8000450:	4a1c      	ldr	r2, [pc, #112]	; (80004c4 <main+0xe4>)
 8000452:	609a      	str	r2, [r3, #8]
	Task3.priority = 3;
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <main+0xe0>)
 8000456:	2203      	movs	r2, #3
 8000458:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName , "task_3");
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <main+0xe8>)
 800045c:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <main+0xec>)
 800045e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000462:	6018      	str	r0, [r3, #0]
 8000464:	3304      	adds	r3, #4
 8000466:	8019      	strh	r1, [r3, #0]
 8000468:	3302      	adds	r3, #2
 800046a:	0c0a      	lsrs	r2, r1, #16
 800046c:	701a      	strb	r2, [r3, #0]

	error += MYRTOS_CreateTask(&Task1);
 800046e:	480c      	ldr	r0, [pc, #48]	; (80004a0 <main+0xc0>)
 8000470:	f7ff ff7c 	bl	800036c <MYRTOS_CreateTask>
 8000474:	4603      	mov	r3, r0
 8000476:	461a      	mov	r2, r3
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4413      	add	r3, r2
 800047c:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task2);
 800047e:	480c      	ldr	r0, [pc, #48]	; (80004b0 <main+0xd0>)
 8000480:	f7ff ff74 	bl	800036c <MYRTOS_CreateTask>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	4413      	add	r3, r2
 800048c:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task3);
 800048e:	480c      	ldr	r0, [pc, #48]	; (80004c0 <main+0xe0>)
 8000490:	f7ff ff6c 	bl	800036c <MYRTOS_CreateTask>
 8000494:	4603      	mov	r3, r0
 8000496:	461a      	mov	r2, r3
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4413      	add	r3, r2
 800049c:	71fb      	strb	r3, [r7, #7]


	while(1)
 800049e:	e7fe      	b.n	800049e <main+0xbe>
 80004a0:	200003bc 	.word	0x200003bc
 80004a4:	080003cd 	.word	0x080003cd
 80004a8:	200003d8 	.word	0x200003d8
 80004ac:	080008a4 	.word	0x080008a4
 80004b0:	20000444 	.word	0x20000444
 80004b4:	080003d3 	.word	0x080003d3
 80004b8:	20000460 	.word	0x20000460
 80004bc:	080008ac 	.word	0x080008ac
 80004c0:	20000400 	.word	0x20000400
 80004c4:	080003d9 	.word	0x080003d9
 80004c8:	2000041c 	.word	0x2000041c
 80004cc:	080008b4 	.word	0x080008b4

080004d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d0:	480d      	ldr	r0, [pc, #52]	; (8000508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d8:	480c      	ldr	r0, [pc, #48]	; (800050c <LoopForever+0x6>)
  ldr r1, =_edata
 80004da:	490d      	ldr	r1, [pc, #52]	; (8000510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <LoopForever+0xe>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f0:	4c0a      	ldr	r4, [pc, #40]	; (800051c <LoopForever+0x16>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004fe:	f000 f99b 	bl	8000838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000502:	f7ff ff6d 	bl	80003e0 <main>

08000506 <LoopForever>:

LoopForever:
    b LoopForever
 8000506:	e7fe      	b.n	8000506 <LoopForever>
  ldr   r0, =_estack
 8000508:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000514:	080008c4 	.word	0x080008c4
  ldr r2, =_sbss
 8000518:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800051c:	200004c4 	.word	0x200004c4

08000520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC1_2_IRQHandler>
	...

08000524 <EXTI0_IRQHandler>:
 * 										ISR Functions
 * =============================================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	//Clear by writing '1' into the bit Pending register {EXTI_PR}
	EXTI->PR |= 1<<0;
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <EXTI0_IRQHandler+0x1c>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <EXTI0_IRQHandler+0x1c>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[0]();
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <EXTI0_IRQHandler+0x20>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4798      	blx	r3
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40010400 	.word	0x40010400
 8000544:	20000488 	.word	0x20000488

08000548 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <EXTI1_IRQHandler+0x1c>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <EXTI1_IRQHandler+0x1c>)
 8000552:	f043 0302 	orr.w	r3, r3, #2
 8000556:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[1]();
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <EXTI1_IRQHandler+0x20>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	4798      	blx	r3
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40010400 	.word	0x40010400
 8000568:	20000488 	.word	0x20000488

0800056c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <EXTI2_IRQHandler+0x1c>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <EXTI2_IRQHandler+0x1c>)
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[2]();
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <EXTI2_IRQHandler+0x20>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4798      	blx	r3
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010400 	.word	0x40010400
 800058c:	20000488 	.word	0x20000488

08000590 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <EXTI3_IRQHandler+0x1c>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <EXTI3_IRQHandler+0x1c>)
 800059a:	f043 0308 	orr.w	r3, r3, #8
 800059e:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[3]();
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <EXTI3_IRQHandler+0x20>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	4798      	blx	r3
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40010400 	.word	0x40010400
 80005b0:	20000488 	.word	0x20000488

080005b4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <EXTI4_IRQHandler+0x1c>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <EXTI4_IRQHandler+0x1c>)
 80005be:	f043 0310 	orr.w	r3, r3, #16
 80005c2:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[4]();
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <EXTI4_IRQHandler+0x20>)
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	4798      	blx	r3
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40010400 	.word	0x40010400
 80005d4:	20000488 	.word	0x20000488

080005d8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5;	GP_IRQ_CallBack[5]();}
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d008      	beq.n	80005fa <EXTI9_5_IRQHandler+0x22>
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 80005ee:	f043 0320 	orr.w	r3, r3, #32
 80005f2:	6153      	str	r3, [r2, #20]
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <EXTI9_5_IRQHandler+0xa4>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6;	GP_IRQ_CallBack[6]();}
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000602:	2b00      	cmp	r3, #0
 8000604:	d008      	beq.n	8000618 <EXTI9_5_IRQHandler+0x40>
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 800060c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <EXTI9_5_IRQHandler+0xa4>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7;	GP_IRQ_CallBack[7]();}
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000620:	2b00      	cmp	r3, #0
 8000622:	d008      	beq.n	8000636 <EXTI9_5_IRQHandler+0x5e>
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a13      	ldr	r2, [pc, #76]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 800062a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062e:	6153      	str	r3, [r2, #20]
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <EXTI9_5_IRQHandler+0xa4>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8;	GP_IRQ_CallBack[8]();}
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800063e:	2b00      	cmp	r3, #0
 8000640:	d008      	beq.n	8000654 <EXTI9_5_IRQHandler+0x7c>
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 8000648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <EXTI9_5_IRQHandler+0xa4>)
 8000650:	6a1b      	ldr	r3, [r3, #32]
 8000652:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9;	GP_IRQ_CallBack[9]();}
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800065c:	2b00      	cmp	r3, #0
 800065e:	d008      	beq.n	8000672 <EXTI9_5_IRQHandler+0x9a>
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <EXTI9_5_IRQHandler+0xa0>)
 8000666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800066a:	6153      	str	r3, [r2, #20]
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <EXTI9_5_IRQHandler+0xa4>)
 800066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000670:	4798      	blx	r3
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40010400 	.word	0x40010400
 800067c:	20000488 	.word	0x20000488

08000680 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10;	GP_IRQ_CallBack[10]();}
 8000684:	4b2d      	ldr	r3, [pc, #180]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800068c:	2b00      	cmp	r3, #0
 800068e:	d008      	beq.n	80006a2 <EXTI15_10_IRQHandler+0x22>
 8000690:	4b2a      	ldr	r3, [pc, #168]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a29      	ldr	r2, [pc, #164]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 8000696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800069a:	6153      	str	r3, [r2, #20]
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <EXTI15_10_IRQHandler+0xc0>)
 800069e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a0:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11;	GP_IRQ_CallBack[11]();}
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d008      	beq.n	80006c0 <EXTI15_10_IRQHandler+0x40>
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a22      	ldr	r2, [pc, #136]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 80006b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <EXTI15_10_IRQHandler+0xc0>)
 80006bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006be:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12;	GP_IRQ_CallBack[12]();}
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d008      	beq.n	80006de <EXTI15_10_IRQHandler+0x5e>
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a1a      	ldr	r2, [pc, #104]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 80006d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006d6:	6153      	str	r3, [r2, #20]
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <EXTI15_10_IRQHandler+0xc0>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13;	GP_IRQ_CallBack[13]();}
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d008      	beq.n	80006fc <EXTI15_10_IRQHandler+0x7c>
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 80006f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <EXTI15_10_IRQHandler+0xc0>)
 80006f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fa:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14;	GP_IRQ_CallBack[14]();}
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000704:	2b00      	cmp	r3, #0
 8000706:	d008      	beq.n	800071a <EXTI15_10_IRQHandler+0x9a>
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a0b      	ldr	r2, [pc, #44]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6153      	str	r3, [r2, #20]
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <EXTI15_10_IRQHandler+0xc0>)
 8000716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000718:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15;	GP_IRQ_CallBack[15]();}
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000722:	2b00      	cmp	r3, #0
 8000724:	d008      	beq.n	8000738 <EXTI15_10_IRQHandler+0xb8>
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <EXTI15_10_IRQHandler+0xbc>)
 800072c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b03      	ldr	r3, [pc, #12]	; (8000740 <EXTI15_10_IRQHandler+0xc0>)
 8000734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000736:	4798      	blx	r3
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40010400 	.word	0x40010400
 8000740:	20000488 	.word	0x20000488

08000744 <SPI1_IRQHandler>:
	 * ==========================================================================================
	 */


	void SPI1_IRQHandler (void)
	{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI1->SR & (1<<1) ) >>1 );
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <SPI1_IRQHandler+0x54>)
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	085b      	lsrs	r3, r3, #1
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	793b      	ldrb	r3, [r7, #4]
 8000758:	f362 0300 	bfi	r3, r2, #0, #1
 800075c:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI1->SR & (1<<0) ) >>0 );
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <SPI1_IRQHandler+0x54>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	793b      	ldrb	r3, [r7, #4]
 800076a:	f362 0341 	bfi	r3, r2, #1, #1
 800076e:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI1->SR & (1<<4) ) >>4 );
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <SPI1_IRQHandler+0x54>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	091b      	lsrs	r3, r3, #4
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	b2da      	uxtb	r2, r3
 800077c:	793b      	ldrb	r3, [r7, #4]
 800077e:	f362 0382 	bfi	r3, r2, #2, #1
 8000782:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src);
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SPI1_IRQHandler+0x58>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	7938      	ldrb	r0, [r7, #4]
 800078c:	4798      	blx	r3
	}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40013000 	.word	0x40013000
 800079c:	2000001c 	.word	0x2000001c

080007a0 <SPI2_IRQHandler>:


	void SPI2_IRQHandler (void)
	{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI2->SR & (1<<1) ) >>1 );
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <SPI2_IRQHandler+0x54>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	793b      	ldrb	r3, [r7, #4]
 80007b4:	f362 0300 	bfi	r3, r2, #0, #1
 80007b8:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI2->SR & (1<<0) ) >>0 );
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <SPI2_IRQHandler+0x54>)
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	793b      	ldrb	r3, [r7, #4]
 80007c6:	f362 0341 	bfi	r3, r2, #1, #1
 80007ca:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI2->SR & (1<<4) ) >>4 );
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <SPI2_IRQHandler+0x54>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	091b      	lsrs	r3, r3, #4
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	793b      	ldrb	r3, [r7, #4]
 80007da:	f362 0382 	bfi	r3, r2, #2, #1
 80007de:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src);
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SPI2_IRQHandler+0x58>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	7938      	ldrb	r0, [r7, #4]
 80007e8:	4798      	blx	r3
	}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40003800 	.word	0x40003800
 80007f8:	2000001c 	.word	0x2000001c

080007fc <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler (void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <USART1_IRQHandler+0x10>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	691b      	ldr	r3, [r3, #16]
 8000806:	4798      	blx	r3
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000024 	.word	0x20000024

08000810 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000814:	4b02      	ldr	r3, [pc, #8]	; (8000820 <USART2_IRQHandler+0x10>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	4798      	blx	r3
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000024 	.word	0x20000024

08000824 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000828:	4b02      	ldr	r3, [pc, #8]	; (8000834 <USART3_IRQHandler+0x10>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	4798      	blx	r3
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000024 	.word	0x20000024

08000838 <__libc_init_array>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	2500      	movs	r5, #0
 800083c:	4e0c      	ldr	r6, [pc, #48]	; (8000870 <__libc_init_array+0x38>)
 800083e:	4c0d      	ldr	r4, [pc, #52]	; (8000874 <__libc_init_array+0x3c>)
 8000840:	1ba4      	subs	r4, r4, r6
 8000842:	10a4      	asrs	r4, r4, #2
 8000844:	42a5      	cmp	r5, r4
 8000846:	d109      	bne.n	800085c <__libc_init_array+0x24>
 8000848:	f000 f81a 	bl	8000880 <_init>
 800084c:	2500      	movs	r5, #0
 800084e:	4e0a      	ldr	r6, [pc, #40]	; (8000878 <__libc_init_array+0x40>)
 8000850:	4c0a      	ldr	r4, [pc, #40]	; (800087c <__libc_init_array+0x44>)
 8000852:	1ba4      	subs	r4, r4, r6
 8000854:	10a4      	asrs	r4, r4, #2
 8000856:	42a5      	cmp	r5, r4
 8000858:	d105      	bne.n	8000866 <__libc_init_array+0x2e>
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000860:	4798      	blx	r3
 8000862:	3501      	adds	r5, #1
 8000864:	e7ee      	b.n	8000844 <__libc_init_array+0xc>
 8000866:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800086a:	4798      	blx	r3
 800086c:	3501      	adds	r5, #1
 800086e:	e7f2      	b.n	8000856 <__libc_init_array+0x1e>
 8000870:	080008bc 	.word	0x080008bc
 8000874:	080008bc 	.word	0x080008bc
 8000878:	080008bc 	.word	0x080008bc
 800087c:	080008c0 	.word	0x080008c0

08000880 <_init>:
 8000880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000882:	bf00      	nop
 8000884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000886:	bc08      	pop	{r3}
 8000888:	469e      	mov	lr, r3
 800088a:	4770      	bx	lr

0800088c <_fini>:
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	bf00      	nop
 8000890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000892:	bc08      	pop	{r3}
 8000894:	469e      	mov	lr, r3
 8000896:	4770      	bx	lr
