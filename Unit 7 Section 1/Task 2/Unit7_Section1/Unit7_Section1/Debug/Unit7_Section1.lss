
Unit7_Section1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000571  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004fb  00000000  00000000  00000735  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ee  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b5  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Utils.h"

int main(void)
{
    // PD0 as input 
	Reset_Bit(DDRD,0);
  6c:	88 98       	cbi	0x11, 0	; 17
	Set_Bit(PORTD,0);
  6e:	90 9a       	sbi	0x12, 0	; 18
	
	// PD5,6,7 as output
	Set_Bit(DDRD,5);
  70:	8d 9a       	sbi	0x11, 5	; 17
	Set_Bit(DDRD,6);
  72:	8e 9a       	sbi	0x11, 6	; 17
	Set_Bit(DDRD,7);
  74:	8f 9a       	sbi	0x11, 7	; 17
	
	unsigned char i=5;
  76:	85 e0       	ldi	r24, 0x05	; 5
		while(i<8) 
		{
			while(Read_Bit(PIND,0)==0);
			if (Read_Bit(PIND,0)==1)
			{
				Set_Bit(PORTD,i);
  78:	61 e0       	ldi	r22, 0x01	; 1
  7a:	70 e0       	ldi	r23, 0x00	; 0
  7c:	11 c0       	rjmp	.+34     	; 0xa0 <main+0x34>
	unsigned char i=5;
    while (1) 
    {
		while(i<8) 
		{
			while(Read_Bit(PIND,0)==0);
  7e:	80 9b       	sbis	0x10, 0	; 16
  80:	fe cf       	rjmp	.-4      	; 0x7e <main+0x12>
			if (Read_Bit(PIND,0)==1)
  82:	80 9b       	sbis	0x10, 0	; 16
  84:	0c c0       	rjmp	.+24     	; 0x9e <main+0x32>
			{
				Set_Bit(PORTD,i);
  86:	92 b3       	in	r25, 0x12	; 18
  88:	9b 01       	movw	r18, r22
  8a:	08 2e       	mov	r0, r24
  8c:	02 c0       	rjmp	.+4      	; 0x92 <main+0x26>
  8e:	22 0f       	add	r18, r18
  90:	33 1f       	adc	r19, r19
  92:	0a 94       	dec	r0
  94:	e2 f7       	brpl	.-8      	; 0x8e <main+0x22>
  96:	29 2b       	or	r18, r25
  98:	22 bb       	out	0x12, r18	; 18
				while(Read_Bit(PIND,0)==1);
  9a:	80 99       	sbic	0x10, 0	; 16
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x2e>
			}
			i++;
  9e:	8f 5f       	subi	r24, 0xFF	; 255
	Set_Bit(DDRD,7);
	
	unsigned char i=5;
    while (1) 
    {
		while(i<8) 
  a0:	88 30       	cpi	r24, 0x08	; 8
  a2:	68 f3       	brcs	.-38     	; 0x7e <main+0x12>
				while(Read_Bit(PIND,0)==1);
			}
			i++;
		}
		
		while(Read_Bit(PORTD,5)==1)
  a4:	95 9b       	sbis	0x12, 5	; 18
  a6:	fc cf       	rjmp	.-8      	; 0xa0 <main+0x34>
		{
			i--;
  a8:	81 50       	subi	r24, 0x01	; 1
			while(i>4)
  aa:	85 30       	cpi	r24, 0x05	; 5
  ac:	a8 f0       	brcs	.+42     	; 0xd8 <main+0x6c>
			{
				while(Read_Bit(PIND,0)==0);
  ae:	80 9b       	sbis	0x10, 0	; 16
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x42>
				if (Read_Bit(PIND,0)==1)
  b2:	80 9b       	sbis	0x10, 0	; 16
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <main+0x66>
				{
					Reset_Bit(PORTD,i);
  b6:	22 b3       	in	r18, 0x12	; 18
  b8:	ab 01       	movw	r20, r22
  ba:	08 2e       	mov	r0, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x56>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <main+0x52>
  c6:	94 2f       	mov	r25, r20
  c8:	90 95       	com	r25
  ca:	92 23       	and	r25, r18
  cc:	92 bb       	out	0x12, r25	; 18
					while(Read_Bit(PIND,0)==1);
  ce:	80 99       	sbic	0x10, 0	; 16
  d0:	fe cf       	rjmp	.-4      	; 0xce <main+0x62>
				}
				i--;
  d2:	81 50       	subi	r24, 0x01	; 1
		}
		
		while(Read_Bit(PORTD,5)==1)
		{
			i--;
			while(i>4)
  d4:	84 30       	cpi	r24, 0x04	; 4
  d6:	59 f7       	brne	.-42     	; 0xae <main+0x42>
					Reset_Bit(PORTD,i);
					while(Read_Bit(PIND,0)==1);
				}
				i--;
			}
			i++;
  d8:	8f 5f       	subi	r24, 0xFF	; 255
				while(Read_Bit(PIND,0)==1);
			}
			i++;
		}
		
		while(Read_Bit(PORTD,5)==1)
  da:	95 99       	sbic	0x12, 5	; 18
  dc:	e5 cf       	rjmp	.-54     	; 0xa8 <main+0x3c>
  de:	e0 cf       	rjmp	.-64     	; 0xa0 <main+0x34>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
