
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b48  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000c78  08000c78  00010c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c90  08000c90  00010c98  2**0
                  CONTENTS
  4 .ARM          00000000  08000c90  08000c90  00010c98  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c90  08000c98  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c90  08000c90  00010c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c94  08000c94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000c98  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000c98  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010c98  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c78  00000000  00000000  00010cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bc8  00000000  00000000  00015939  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ccc  00000000  00000000  00016501  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000238  00000000  00000000  000171d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  00017408  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000d9c  00000000  00000000  000175d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000027f2  00000000  00000000  00018374  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a153  00000000  00000000  0001ab66  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024cb9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006e4  00000000  00000000  00024d34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c60 	.word	0x08000c60

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c60 	.word	0x08000c60

08000170 <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
			;
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001ac:	4b52      	ldr	r3, [pc, #328]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b4:	4b50      	ldr	r3, [pc, #320]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001ba:	4b4f      	ldr	r3, [pc, #316]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001bc:	2201      	movs	r2, #1
 80001be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001c0:	494d      	ldr	r1, [pc, #308]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001c2:	484e      	ldr	r0, [pc, #312]	; (80002fc <LCD_GPIO_init+0x154>)
 80001c4:	f000 fad7 	bl	8000776 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001c8:	4b4b      	ldr	r3, [pc, #300]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001ce:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d0:	4b49      	ldr	r3, [pc, #292]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d2:	2204      	movs	r2, #4
 80001d4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d6:	4b48      	ldr	r3, [pc, #288]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d8:	2201      	movs	r2, #1
 80001da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001dc:	4946      	ldr	r1, [pc, #280]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001de:	4847      	ldr	r0, [pc, #284]	; (80002fc <LCD_GPIO_init+0x154>)
 80001e0:	f000 fac9 	bl	8000776 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80001e4:	4b44      	ldr	r3, [pc, #272]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ea:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ec:	4b42      	ldr	r3, [pc, #264]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f2:	4b41      	ldr	r3, [pc, #260]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001f8:	493f      	ldr	r1, [pc, #252]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001fa:	4840      	ldr	r0, [pc, #256]	; (80002fc <LCD_GPIO_init+0x154>)
 80001fc:	f000 fabb 	bl	8000776 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000200:	4b3d      	ldr	r3, [pc, #244]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000202:	2201      	movs	r2, #1
 8000204:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000206:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000208:	2204      	movs	r2, #4
 800020a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800020c:	4b3a      	ldr	r3, [pc, #232]	; (80002f8 <LCD_GPIO_init+0x150>)
 800020e:	2201      	movs	r2, #1
 8000210:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000212:	4939      	ldr	r1, [pc, #228]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000214:	4839      	ldr	r0, [pc, #228]	; (80002fc <LCD_GPIO_init+0x154>)
 8000216:	f000 faae 	bl	8000776 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800021a:	4b37      	ldr	r3, [pc, #220]	; (80002f8 <LCD_GPIO_init+0x150>)
 800021c:	2202      	movs	r2, #2
 800021e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000220:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000222:	2204      	movs	r2, #4
 8000224:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000228:	2201      	movs	r2, #1
 800022a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800022c:	4932      	ldr	r1, [pc, #200]	; (80002f8 <LCD_GPIO_init+0x150>)
 800022e:	4833      	ldr	r0, [pc, #204]	; (80002fc <LCD_GPIO_init+0x154>)
 8000230:	f000 faa1 	bl	8000776 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000236:	2204      	movs	r2, #4
 8000238:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <LCD_GPIO_init+0x150>)
 800023c:	2204      	movs	r2, #4
 800023e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000242:	2201      	movs	r2, #1
 8000244:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000246:	492c      	ldr	r1, [pc, #176]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000248:	482c      	ldr	r0, [pc, #176]	; (80002fc <LCD_GPIO_init+0x154>)
 800024a:	f000 fa94 	bl	8000776 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000250:	2208      	movs	r2, #8
 8000252:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000254:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000256:	2204      	movs	r2, #4
 8000258:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800025a:	4b27      	ldr	r3, [pc, #156]	; (80002f8 <LCD_GPIO_init+0x150>)
 800025c:	2201      	movs	r2, #1
 800025e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000260:	4925      	ldr	r1, [pc, #148]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000262:	4826      	ldr	r0, [pc, #152]	; (80002fc <LCD_GPIO_init+0x154>)
 8000264:	f000 fa87 	bl	8000776 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <LCD_GPIO_init+0x150>)
 800026a:	2210      	movs	r2, #16
 800026c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000270:	2204      	movs	r2, #4
 8000272:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000276:	2201      	movs	r2, #1
 8000278:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800027a:	491f      	ldr	r1, [pc, #124]	; (80002f8 <LCD_GPIO_init+0x150>)
 800027c:	481f      	ldr	r0, [pc, #124]	; (80002fc <LCD_GPIO_init+0x154>)
 800027e:	f000 fa7a 	bl	8000776 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000284:	2220      	movs	r2, #32
 8000286:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <LCD_GPIO_init+0x150>)
 800028a:	2204      	movs	r2, #4
 800028c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000294:	4918      	ldr	r1, [pc, #96]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000296:	4819      	ldr	r0, [pc, #100]	; (80002fc <LCD_GPIO_init+0x154>)
 8000298:	f000 fa6d 	bl	8000776 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <LCD_GPIO_init+0x150>)
 800029e:	2240      	movs	r2, #64	; 0x40
 80002a0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002ae:	4912      	ldr	r1, [pc, #72]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b0:	4812      	ldr	r0, [pc, #72]	; (80002fc <LCD_GPIO_init+0x154>)
 80002b2:	f000 fa60 	bl	8000776 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002be:	2204      	movs	r2, #4
 80002c0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002c8:	490b      	ldr	r1, [pc, #44]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <LCD_GPIO_init+0x154>)
 80002cc:	f000 fa53 	bl	8000776 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d6:	4809      	ldr	r0, [pc, #36]	; (80002fc <LCD_GPIO_init+0x154>)
 80002d8:	f000 facc 	bl	8000874 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <LCD_GPIO_init+0x154>)
 80002e4:	f000 fac6 	bl	8000874 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ee:	4803      	ldr	r0, [pc, #12]	; (80002fc <LCD_GPIO_init+0x154>)
 80002f0:	f000 fac0 	bl	8000874 <MCAL_GPIO_WritePin>

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000020 	.word	0x20000020
 80002fc:	40010800 	.word	0x40010800

08000300 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000304:	2001      	movs	r0, #1
 8000306:	f000 f833 	bl	8000370 <LCD_WRITE_COMMAND>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <LCD_lcd_kick+0x28>)
 800031c:	f000 faaa 	bl	8000874 <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000320:	2032      	movs	r0, #50	; 0x32
 8000322:	f7ff ff25 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <LCD_lcd_kick+0x28>)
 800032e:	f000 faa1 	bl	8000874 <MCAL_GPIO_WritePin>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010800 	.word	0x40010800

0800033c <LCD_INIT>:
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
		}
	}
}

void LCD_INIT() {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0

	delay_ms(20);
 8000340:	2014      	movs	r0, #20
 8000342:	f7ff ff15 	bl	8000170 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 8000346:	f7ff ff2f 	bl	80001a8 <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 800034a:	200f      	movs	r0, #15
 800034c:	f7ff ff10 	bl	8000170 <delay_ms>

	LCD_clear_screen();
 8000350:	f7ff ffd6 	bl	8000300 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000354:	2038      	movs	r0, #56	; 0x38
 8000356:	f000 f80b 	bl	8000370 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800035a:	2006      	movs	r0, #6
 800035c:	f000 f808 	bl	8000370 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000360:	2080      	movs	r0, #128	; 0x80
 8000362:	f000 f805 	bl	8000370 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000366:	200f      	movs	r0, #15
 8000368:	f000 f802 	bl	8000370 <LCD_WRITE_COMMAND>
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}

08000370 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	b29b      	uxth	r3, r3
 800037e:	4619      	mov	r1, r3
 8000380:	480b      	ldr	r0, [pc, #44]	; (80003b0 <LCD_WRITE_COMMAND+0x40>)
 8000382:	f000 fa8e 	bl	80008a2 <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038c:	4808      	ldr	r0, [pc, #32]	; (80003b0 <LCD_WRITE_COMMAND+0x40>)
 800038e:	f000 fa71 	bl	8000874 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <LCD_WRITE_COMMAND+0x40>)
 800039a:	f000 fa6b 	bl	8000874 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f7ff fee6 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 80003a4:	f7ff ffb4 	bl	8000310 <LCD_lcd_kick>

}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40010800 	.word	0x40010800

080003b4 <clock_init>:


unsigned char ch;

void clock_init()
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
	//Enable clock for GPIO
	RCC_GPIOA_CLK_EN();
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <clock_init+0x30>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a09      	ldr	r2, [pc, #36]	; (80003e4 <clock_init+0x30>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <clock_init+0x30>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a06      	ldr	r2, [pc, #24]	; (80003e4 <clock_init+0x30>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
	//Enable AFIO
	AFIO_CLK_EN();
 80003d0:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <clock_init+0x30>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a03      	ldr	r2, [pc, #12]	; (80003e4 <clock_init+0x30>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6193      	str	r3, [r2, #24]
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000

080003e8 <UART_IRQ_CallBack>:

void UART_IRQ_CallBack(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, &ch, disable);
 80003ec:	2201      	movs	r2, #1
 80003ee:	4905      	ldr	r1, [pc, #20]	; (8000404 <UART_IRQ_CallBack+0x1c>)
 80003f0:	4805      	ldr	r0, [pc, #20]	; (8000408 <UART_IRQ_CallBack+0x20>)
 80003f2:	f000 fb9d 	bl	8000b30 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 80003f6:	2200      	movs	r2, #0
 80003f8:	4902      	ldr	r1, [pc, #8]	; (8000404 <UART_IRQ_CallBack+0x1c>)
 80003fa:	4803      	ldr	r0, [pc, #12]	; (8000408 <UART_IRQ_CallBack+0x20>)
 80003fc:	f000 fb7c 	bl	8000af8 <MCAL_UART_SendData>

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000024 	.word	0x20000024
 8000408:	40013800 	.word	0x40013800

0800040c <main>:
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
	UART_Config uartCfg;
	clock_init();
 8000412:	f7ff ffcf 	bl	80003b4 <clock_init>

	LCD_INIT();
 8000416:	f7ff ff91 	bl	800033c <LCD_INIT>
	LCD_clear_screen();
 800041a:	f7ff ff71 	bl	8000300 <LCD_clear_screen>

	uartCfg.BaudRate = UART_BaudRate_115200;
 800041e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000422:	60bb      	str	r3, [r7, #8]
	uartCfg.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000424:	2300      	movs	r3, #0
 8000426:	73fb      	strb	r3, [r7, #15]
	uartCfg.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000428:	2320      	movs	r3, #32
 800042a:	743b      	strb	r3, [r7, #16]
	uartCfg.P_IRQ_CallBack = UART_IRQ_CallBack;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <main+0x48>)
 800042e:	617b      	str	r3, [r7, #20]
	uartCfg.Parity = UART_Parity_NONE;
 8000430:	2300      	movs	r3, #0
 8000432:	737b      	strb	r3, [r7, #13]
	uartCfg.Payload_Length = UART_Payload_Length_8B;
 8000434:	2300      	movs	r3, #0
 8000436:	733b      	strb	r3, [r7, #12]
	uartCfg.StopBits = UART_StopBits_1;
 8000438:	2300      	movs	r3, #0
 800043a:	73bb      	strb	r3, [r7, #14]
	uartCfg.USART_Mode = UART_Mode_TX_RX;
 800043c:	230c      	movs	r3, #12
 800043e:	713b      	strb	r3, [r7, #4]
	MCAL_UART_Init(USART1, &uartCfg);
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4619      	mov	r1, r3
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <main+0x4c>)
 8000446:	f000 fa95 	bl	8000974 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 800044a:	4803      	ldr	r0, [pc, #12]	; (8000458 <main+0x4c>)
 800044c:	f000 fb9e 	bl	8000b8c <MCAL_UART_GPIO_Set_Pins>
	while(1)
 8000450:	e7fe      	b.n	8000450 <main+0x44>
 8000452:	bf00      	nop
 8000454:	080003e9 	.word	0x080003e9
 8000458:	40013800 	.word	0x40013800

0800045c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800045c:	480d      	ldr	r0, [pc, #52]	; (8000494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800045e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000460:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <LoopForever+0x6>)
  ldr r1, =_edata
 8000466:	490d      	ldr	r1, [pc, #52]	; (800049c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <LoopForever+0xe>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800046c:	e002      	b.n	8000474 <LoopCopyDataInit>

0800046e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000472:	3304      	adds	r3, #4

08000474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000478:	d3f9      	bcc.n	800046e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047a:	4a0a      	ldr	r2, [pc, #40]	; (80004a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800047c:	4c0a      	ldr	r4, [pc, #40]	; (80004a8 <LoopForever+0x16>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000480:	e001      	b.n	8000486 <LoopFillZerobss>

08000482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000484:	3204      	adds	r2, #4

08000486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000488:	d3fb      	bcc.n	8000482 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048a:	f000 fbc5 	bl	8000c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048e:	f7ff ffbd 	bl	800040c <main>

08000492 <LoopForever>:

LoopForever:
    b LoopForever
 8000492:	e7fe      	b.n	8000492 <LoopForever>
  ldr   r0, =_estack
 8000494:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800049c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004a0:	08000c98 	.word	0x08000c98
  ldr r2, =_sbss
 80004a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a8:	20000064 	.word	0x20000064

080004ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC1_2_IRQHandler>
	...

080004b0 <EXTI0_IRQHandler>:
 * 										ISR Functions
 * =============================================================================================
 */

void EXTI0_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	//Clear by writing '1' into the bit Pending register {EXTI_PR}
	EXTI->PR |= 1<<0;
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <EXTI0_IRQHandler+0x1c>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <EXTI0_IRQHandler+0x1c>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[0]();
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <EXTI0_IRQHandler+0x20>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4798      	blx	r3
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40010400 	.word	0x40010400
 80004d0:	20000028 	.word	0x20000028

080004d4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <EXTI1_IRQHandler+0x1c>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <EXTI1_IRQHandler+0x1c>)
 80004de:	f043 0302 	orr.w	r3, r3, #2
 80004e2:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[1]();
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <EXTI1_IRQHandler+0x20>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	4798      	blx	r3
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40010400 	.word	0x40010400
 80004f4:	20000028 	.word	0x20000028

080004f8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <EXTI2_IRQHandler+0x1c>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <EXTI2_IRQHandler+0x1c>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[2]();
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <EXTI2_IRQHandler+0x20>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	4798      	blx	r3
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40010400 	.word	0x40010400
 8000518:	20000028 	.word	0x20000028

0800051c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <EXTI3_IRQHandler+0x1c>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <EXTI3_IRQHandler+0x1c>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[3]();
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <EXTI3_IRQHandler+0x20>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	4798      	blx	r3
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010400 	.word	0x40010400
 800053c:	20000028 	.word	0x20000028

08000540 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <EXTI4_IRQHandler+0x1c>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <EXTI4_IRQHandler+0x1c>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[4]();
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <EXTI4_IRQHandler+0x20>)
 8000552:	691b      	ldr	r3, [r3, #16]
 8000554:	4798      	blx	r3
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010400 	.word	0x40010400
 8000560:	20000028 	.word	0x20000028

08000564 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5;	GP_IRQ_CallBack[5]();}
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f003 0320 	and.w	r3, r3, #32
 8000570:	2b00      	cmp	r3, #0
 8000572:	d008      	beq.n	8000586 <EXTI9_5_IRQHandler+0x22>
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4a22      	ldr	r2, [pc, #136]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 800057a:	f043 0320 	orr.w	r3, r3, #32
 800057e:	6153      	str	r3, [r2, #20]
 8000580:	4b21      	ldr	r3, [pc, #132]	; (8000608 <EXTI9_5_IRQHandler+0xa4>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6;	GP_IRQ_CallBack[6]();}
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800058e:	2b00      	cmp	r3, #0
 8000590:	d008      	beq.n	80005a4 <EXTI9_5_IRQHandler+0x40>
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 8000598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <EXTI9_5_IRQHandler+0xa4>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7;	GP_IRQ_CallBack[7]();}
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d008      	beq.n	80005c2 <EXTI9_5_IRQHandler+0x5e>
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 80005b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ba:	6153      	str	r3, [r2, #20]
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <EXTI9_5_IRQHandler+0xa4>)
 80005be:	69db      	ldr	r3, [r3, #28]
 80005c0:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8;	GP_IRQ_CallBack[8]();}
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d008      	beq.n	80005e0 <EXTI9_5_IRQHandler+0x7c>
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <EXTI9_5_IRQHandler+0xa4>)
 80005dc:	6a1b      	ldr	r3, [r3, #32]
 80005de:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9;	GP_IRQ_CallBack[9]();}
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d008      	beq.n	80005fe <EXTI9_5_IRQHandler+0x9a>
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <EXTI9_5_IRQHandler+0xa0>)
 80005f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f6:	6153      	str	r3, [r2, #20]
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <EXTI9_5_IRQHandler+0xa4>)
 80005fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005fc:	4798      	blx	r3
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010400 	.word	0x40010400
 8000608:	20000028 	.word	0x20000028

0800060c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10;	GP_IRQ_CallBack[10]();}
 8000610:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000618:	2b00      	cmp	r3, #0
 800061a:	d008      	beq.n	800062e <EXTI15_10_IRQHandler+0x22>
 800061c:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4a29      	ldr	r2, [pc, #164]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 8000622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000626:	6153      	str	r3, [r2, #20]
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <EXTI15_10_IRQHandler+0xc0>)
 800062a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800062c:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11;	GP_IRQ_CallBack[11]();}
 800062e:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000636:	2b00      	cmp	r3, #0
 8000638:	d008      	beq.n	800064c <EXTI15_10_IRQHandler+0x40>
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 8000640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <EXTI15_10_IRQHandler+0xc0>)
 8000648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12;	GP_IRQ_CallBack[12]();}
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000654:	2b00      	cmp	r3, #0
 8000656:	d008      	beq.n	800066a <EXTI15_10_IRQHandler+0x5e>
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a1a      	ldr	r2, [pc, #104]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 800065e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000662:	6153      	str	r3, [r2, #20]
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <EXTI15_10_IRQHandler+0xc0>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13;	GP_IRQ_CallBack[13]();}
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000672:	2b00      	cmp	r3, #0
 8000674:	d008      	beq.n	8000688 <EXTI15_10_IRQHandler+0x7c>
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 800067c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000680:	6153      	str	r3, [r2, #20]
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <EXTI15_10_IRQHandler+0xc0>)
 8000684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000686:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14;	GP_IRQ_CallBack[14]();}
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	2b00      	cmp	r3, #0
 8000692:	d008      	beq.n	80006a6 <EXTI15_10_IRQHandler+0x9a>
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <EXTI15_10_IRQHandler+0xc0>)
 80006a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006a4:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15;	GP_IRQ_CallBack[15]();}
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d008      	beq.n	80006c4 <EXTI15_10_IRQHandler+0xb8>
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <EXTI15_10_IRQHandler+0xbc>)
 80006b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b03      	ldr	r3, [pc, #12]	; (80006cc <EXTI15_10_IRQHandler+0xc0>)
 80006c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006c2:	4798      	blx	r3
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40010400 	.word	0x40010400
 80006cc:	20000028 	.word	0x20000028

080006d0 <Get_CRLH_Position>:

#include "Stm32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	2b80      	cmp	r3, #128	; 0x80
 80006de:	d042      	beq.n	8000766 <Get_CRLH_Position+0x96>
 80006e0:	2b80      	cmp	r3, #128	; 0x80
 80006e2:	dc11      	bgt.n	8000708 <Get_CRLH_Position+0x38>
 80006e4:	2b08      	cmp	r3, #8
 80006e6:	d036      	beq.n	8000756 <Get_CRLH_Position+0x86>
 80006e8:	2b08      	cmp	r3, #8
 80006ea:	dc06      	bgt.n	80006fa <Get_CRLH_Position+0x2a>
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	d02e      	beq.n	800074e <Get_CRLH_Position+0x7e>
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d02e      	beq.n	8000752 <Get_CRLH_Position+0x82>
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d028      	beq.n	800074a <Get_CRLH_Position+0x7a>
 80006f8:	e037      	b.n	800076a <Get_CRLH_Position+0x9a>
 80006fa:	2b20      	cmp	r3, #32
 80006fc:	d02f      	beq.n	800075e <Get_CRLH_Position+0x8e>
 80006fe:	2b40      	cmp	r3, #64	; 0x40
 8000700:	d02f      	beq.n	8000762 <Get_CRLH_Position+0x92>
 8000702:	2b10      	cmp	r3, #16
 8000704:	d029      	beq.n	800075a <Get_CRLH_Position+0x8a>
 8000706:	e030      	b.n	800076a <Get_CRLH_Position+0x9a>
 8000708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800070c:	d023      	beq.n	8000756 <Get_CRLH_Position+0x86>
 800070e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000712:	dc09      	bgt.n	8000728 <Get_CRLH_Position+0x58>
 8000714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000718:	d019      	beq.n	800074e <Get_CRLH_Position+0x7e>
 800071a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800071e:	d018      	beq.n	8000752 <Get_CRLH_Position+0x82>
 8000720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000724:	d011      	beq.n	800074a <Get_CRLH_Position+0x7a>
 8000726:	e020      	b.n	800076a <Get_CRLH_Position+0x9a>
 8000728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800072c:	d017      	beq.n	800075e <Get_CRLH_Position+0x8e>
 800072e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000732:	dc03      	bgt.n	800073c <Get_CRLH_Position+0x6c>
 8000734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000738:	d00f      	beq.n	800075a <Get_CRLH_Position+0x8a>
 800073a:	e016      	b.n	800076a <Get_CRLH_Position+0x9a>
 800073c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000740:	d00f      	beq.n	8000762 <Get_CRLH_Position+0x92>
 8000742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000746:	d00e      	beq.n	8000766 <Get_CRLH_Position+0x96>
 8000748:	e00f      	b.n	800076a <Get_CRLH_Position+0x9a>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 800074a:	2300      	movs	r3, #0
 800074c:	e00e      	b.n	800076c <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 800074e:	2304      	movs	r3, #4
 8000750:	e00c      	b.n	800076c <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 8000752:	2308      	movs	r3, #8
 8000754:	e00a      	b.n	800076c <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 8000756:	230c      	movs	r3, #12
 8000758:	e008      	b.n	800076c <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 800075a:	2310      	movs	r3, #16
 800075c:	e006      	b.n	800076c <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 800075e:	2314      	movs	r3, #20
 8000760:	e004      	b.n	800076c <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 8000762:	2318      	movs	r3, #24
 8000764:	e002      	b.n	800076c <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 8000766:	231c      	movs	r3, #28
 8000768:	e000      	b.n	800076c <Get_CRLH_Position+0x9c>
		break ;
	}
	return 0;
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr

08000776 <MCAL_GPIO_Init>:
 * @retval			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 package has only GPIO A,B,PART of C/D
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000776:	b590      	push	{r4, r7, lr}
 8000778:	b085      	sub	sp, #20
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) configure PINS from 8 >>> 15
	volatile uint32_t* Config_Reg = NULL;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
	Config_Reg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)?  &GPIOx->CRL : &GPIOx->CRH;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	2bff      	cmp	r3, #255	; 0xff
 800078a:	d801      	bhi.n	8000790 <MCAL_GPIO_Init+0x1a>
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	e001      	b.n	8000794 <MCAL_GPIO_Init+0x1e>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3304      	adds	r3, #4
 8000794:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	73fb      	strb	r3, [r7, #15]
	//clear CNF8[1:0]  MODE[1:0]
	(*Config_Reg) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff96 	bl	80006d0 <Get_CRLH_Position>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	230f      	movs	r3, #15
 80007aa:	4093      	lsls	r3, r2
 80007ac:	43da      	mvns	r2, r3
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	401a      	ands	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)   )
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	789b      	ldrb	r3, [r3, #2]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	d00b      	beq.n	80007d8 <MCAL_GPIO_Init+0x62>
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	789b      	ldrb	r3, [r3, #2]
 80007c4:	2b06      	cmp	r3, #6
 80007c6:	d007      	beq.n	80007d8 <MCAL_GPIO_Init+0x62>
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	789b      	ldrb	r3, [r3, #2]
 80007cc:	2b05      	cmp	r3, #5
 80007ce:	d003      	beq.n	80007d8 <MCAL_GPIO_Init+0x62>
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	789b      	ldrb	r3, [r3, #2]
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d10e      	bne.n	80007f6 <MCAL_GPIO_Init+0x80>
	{
		//set CNF8[1:0]  MODE[1:0]
		PIN_Config = (( ((PinConfig->GPIO_MODE -4) <<2) | (PinConfig->GPIO_Output_Speed) ) &0x0f );
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	789b      	ldrb	r3, [r3, #2]
 80007dc:	3b04      	subs	r3, #4
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	b25a      	sxtb	r2, r3
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	78db      	ldrb	r3, [r3, #3]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	73fb      	strb	r3, [r7, #15]
 80007f4:	e02c      	b.n	8000850 <MCAL_GPIO_Init+0xda>
	}
	//if Pin is input
	else
	{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG))
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	789b      	ldrb	r3, [r3, #2]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d003      	beq.n	8000806 <MCAL_GPIO_Init+0x90>
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	789b      	ldrb	r3, [r3, #2]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d107      	bne.n	8000816 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF8[1:0]  MODE[1:0]0
			PIN_Config = (( ((PinConfig->GPIO_MODE) <<2) | (0x0) ) &0x0f );
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	789b      	ldrb	r3, [r3, #2]
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	b2db      	uxtb	r3, r3
 800080e:	f003 030f 	and.w	r3, r3, #15
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	e01c      	b.n	8000850 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT ) //consider it as input floating
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	789b      	ldrb	r3, [r3, #2]
 800081a:	2b08      	cmp	r3, #8
 800081c:	d102      	bne.n	8000824 <MCAL_GPIO_Init+0xae>
		{
			//set CNF8[1:0]  MODE[1:0]0
			PIN_Config = (( ((GPIO_MODE_INPUT_FLO) <<2) | (0x0) ) &0x0f );
 800081e:	2304      	movs	r3, #4
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	e015      	b.n	8000850 <MCAL_GPIO_Init+0xda>
		}
		else // PU PD Input
		{
			PIN_Config = (( ((GPIO_MODE_INPUT_PU) <<2) | (0x0) ) &0x0f );
 8000824:	2308      	movs	r3, #8
 8000826:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d107      	bne.n	8000840 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up : Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	8812      	ldrh	r2, [r2, #0]
 8000838:	431a      	orrs	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	e007      	b.n	8000850 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR = 0 Input pull-down : Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	683a      	ldr	r2, [r7, #0]
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	43d2      	mvns	r2, r2
 800084a:	401a      	ands	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	60da      	str	r2, [r3, #12]
			}

		}
	}
	// write on CRL or CRH
	(*Config_Reg) |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000850:	7bfc      	ldrb	r4, [r7, #15]
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff3a 	bl	80006d0 <Get_CRLH_Position>
 800085c:	4603      	mov	r3, r0
 800085e:	fa04 f203 	lsl.w	r2, r4, r3
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	431a      	orrs	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	601a      	str	r2, [r3, #0]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}

08000874 <MCAL_GPIO_WritePin>:
 * @param [in]		-Value : Pin Value
 * @retval			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx , uint16_t PinNumber , uint8_t value)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	807b      	strh	r3, [r7, #2]
 8000880:	4613      	mov	r3, r2
 8000882:	707b      	strb	r3, [r7, #1]
	if (value != GPIO_PIN_RESET)
 8000884:	787b      	ldrb	r3, [r7, #1]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d003      	beq.n	8000892 <MCAL_GPIO_WritePin+0x1e>
	{
		//Bits 15:0 BSy: Port x set bit y (y=0 .. 15)
		//These bits are write-only and can be accessed in word mode only
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 800088a:	887a      	ldrh	r2, [r7, #2]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	611a      	str	r2, [r3, #16]
		// 0: No action on the corresponding ODRx bit
		// 1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;
	}

}
 8000890:	e002      	b.n	8000898 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000892:	887a      	ldrh	r2, [r7, #2]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	615a      	str	r2, [r3, #20]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <MCAL_GPIO_WritePort>:
 * @param [in]		-GPIOx: where x can be (A..E depending on device used) to select the GPIO peripheral
 * @retval			-none
 * Note				-none
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx , uint16_t value)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	460b      	mov	r3, r1
 80008ac:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)value;
 80008ae:	887a      	ldrh	r2, [r7, #2]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	60da      	str	r2, [r3, #12]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
	...

080008c0 <MCAL_RCC_GetSYS_CLCKFreq>:
1111: SYSCLK divided by 512*/

const uint8_t AHBPrescTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
/*Bits 3:2 SWS: System clock switch status
Set and cleared by hardware to indicate which clock source is used as system clock.
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as sys*/
	switch ((RCC->CFGR >> 2) & 0b11)
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	089b      	lsrs	r3, r3, #2
 80008ca:	f003 0303 	and.w	r3, r3, #3
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d006      	beq.n	80008e0 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d302      	bcc.n	80008dc <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d004      	beq.n	80008e4 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 80008da:	e005      	b.n	80008e8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:
		return HSI_RC_Clk;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 80008de:	e003      	b.n	80008e8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	case 1:
		//todo need to calculate it //HSE user should specify it
		return HSE_Clock;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80008e2:	e001      	b.n	80008e8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	case 2:
		//todo need to calculate it PLLCLK and PLLMUL & PLL source MUX
		return 16000000;
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80008e6:	e7ff      	b.n	80008e8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	}

}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40021000 	.word	0x40021000
 80008f4:	007a1200 	.word	0x007a1200
 80008f8:	00f42400 	.word	0x00f42400

080008fc <MCAL_RCC_GetHLCKFreq>:

uint32_t MCAL_RCC_GetHLCKFreq(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYS_CLCKFreq()   >> AHBPrescTable[((RCC->CFGR >> 4) & 0xF)] );
 8000900:	f7ff ffde 	bl	80008c0 <MCAL_RCC_GetSYS_CLCKFreq>
 8000904:	4601      	mov	r1, r0
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <MCAL_RCC_GetHLCKFreq+0x20>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	091b      	lsrs	r3, r3, #4
 800090c:	f003 030f 	and.w	r3, r3, #15
 8000910:	4a03      	ldr	r2, [pc, #12]	; (8000920 <MCAL_RCC_GetHLCKFreq+0x24>)
 8000912:	5cd3      	ldrb	r3, [r2, r3]
 8000914:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000918:	4618      	mov	r0, r3
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	08000c80 	.word	0x08000c80

08000924 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GetHLCKFreq()   >> APBPrescTable[((RCC->CFGR >> 8) & 0b111)] );
 8000928:	f7ff ffe8 	bl	80008fc <MCAL_RCC_GetHLCKFreq>
 800092c:	4601      	mov	r1, r0
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	0a1b      	lsrs	r3, r3, #8
 8000934:	f003 0307 	and.w	r3, r3, #7
 8000938:	4a03      	ldr	r2, [pc, #12]	; (8000948 <MCAL_RCC_GetPCLK1Freq+0x24>)
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000940:	4618      	mov	r0, r3
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000
 8000948:	08000c78 	.word	0x08000c78

0800094c <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHLCKFreq()   >> APBPrescTable[((RCC->CFGR >> 11) & 0b111)] );
 8000950:	f7ff ffd4 	bl	80008fc <MCAL_RCC_GetHLCKFreq>
 8000954:	4601      	mov	r1, r0
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	0adb      	lsrs	r3, r3, #11
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000962:	5cd3      	ldrb	r3, [r2, r3]
 8000964:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000968:	4618      	mov	r0, r3
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021000 	.word	0x40021000
 8000970:	08000c78 	.word	0x08000c78

08000974 <MCAL_UART_Init>:
 * @retval			-none
 * Note				-Support for now Asynch mode & Clock 8MHZ
 */

void MCAL_UART_Init(USART_TypeDef* USARTx, UART_Config* UART_Config)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	uint32_t pclk,BRR;

	Global_UART_Config = UART_Config;
 800097e:	4a57      	ldr	r2, [pc, #348]	; (8000adc <MCAL_UART_Init+0x168>)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	6013      	str	r3, [r2, #0]
	//enable the clock for given USART preipheral
	if (USARTx == USART1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a56      	ldr	r2, [pc, #344]	; (8000ae0 <MCAL_UART_Init+0x16c>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d106      	bne.n	800099a <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 800098c:	4b55      	ldr	r3, [pc, #340]	; (8000ae4 <MCAL_UART_Init+0x170>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a54      	ldr	r2, [pc, #336]	; (8000ae4 <MCAL_UART_Init+0x170>)
 8000992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	e014      	b.n	80009c4 <MCAL_UART_Init+0x50>

	else if (USARTx == USART2)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a52      	ldr	r2, [pc, #328]	; (8000ae8 <MCAL_UART_Init+0x174>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d106      	bne.n	80009b0 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 80009a2:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <MCAL_UART_Init+0x170>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a4f      	ldr	r2, [pc, #316]	; (8000ae4 <MCAL_UART_Init+0x170>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	e009      	b.n	80009c4 <MCAL_UART_Init+0x50>

	else if (USARTx == USART3)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a4e      	ldr	r2, [pc, #312]	; (8000aec <MCAL_UART_Init+0x178>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d105      	bne.n	80009c4 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 80009b8:	4b4a      	ldr	r3, [pc, #296]	; (8000ae4 <MCAL_UART_Init+0x170>)
 80009ba:	69db      	ldr	r3, [r3, #28]
 80009bc:	4a49      	ldr	r2, [pc, #292]	; (8000ae4 <MCAL_UART_Init+0x170>)
 80009be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c2:	61d3      	str	r3, [r2, #28]

	//Enable USART Module
	//Bit 13UE: USART enable
	USARTx->CR1 |= USART_Enable;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60da      	str	r2, [r3, #12]

	//Enable USART TX and RX engines according to the USART_Mode configuration item
	//USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	7812      	ldrb	r2, [r2, #0]
 80009d8:	431a      	orrs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60da      	str	r2, [r3, #12]

	//Payload Width
	//Bit 12 M: word length
	USARTx->CR1 |= UART_Config->Payload_Length;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	7a12      	ldrb	r2, [r2, #8]
 80009e6:	431a      	orrs	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	60da      	str	r2, [r3, #12]

	//configuration of parity control bit fields
	//Bit 10 PCE: Parity control enable, Bit 9 PS:Parity selection
	USARTx->CR1 |= UART_Config->Parity;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	7a52      	ldrb	r2, [r2, #9]
 80009f4:	431a      	orrs	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//Bits 13:12 STOP Bits
	USARTx->CR2 |= UART_Config->StopBits;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	7a92      	ldrb	r2, [r2, #10]
 8000a02:	431a      	orrs	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	611a      	str	r2, [r3, #16]

	//USART hardware flow control
	//Bit 9 CTSE: CTS enable, Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	7ad2      	ldrb	r2, [r2, #11]
 8000a10:	431a      	orrs	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2,3
	//PCLK2 for USART1

	if (USARTx == USART1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a31      	ldr	r2, [pc, #196]	; (8000ae0 <MCAL_UART_Init+0x16c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d103      	bne.n	8000a26 <MCAL_UART_Init+0xb2>
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000a1e:	f7ff ff95 	bl	800094c <MCAL_RCC_GetPCLK2Freq>
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	e002      	b.n	8000a2c <MCAL_UART_Init+0xb8>
	else
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000a26:	f7ff ff7d 	bl	8000924 <MCAL_RCC_GetPCLK1Freq>
 8000a2a:	60f8      	str	r0, [r7, #12]

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a38:	0119      	lsls	r1, r3, #4
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	009a      	lsls	r2, r3, #2
 8000a44:	441a      	add	r2, r3
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	fb00 f303 	mul.w	r3, r0, r3
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	011b      	lsls	r3, r3, #4
 8000a66:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <MCAL_UART_Init+0x17c>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	095b      	lsrs	r3, r3, #5
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	430b      	orrs	r3, r1
 8000a74:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	609a      	str	r2, [r3, #8]

	//Enable/Disable Interrput
	//USART_CR1
	if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	7b1b      	ldrb	r3, [r3, #12]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d026      	beq.n	8000ad2 <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	7b12      	ldrb	r2, [r2, #12]
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60da      	str	r2, [r3, #12]
		//Enable NVIC for USARTx IRQ
		if(USARTx == USART1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MCAL_UART_Init+0x16c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MCAL_UART_Init+0x180>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <MCAL_UART_Init+0x180>)
 8000aa0:	f043 0320 	orr.w	r3, r3, #32
 8000aa4:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_Enable;
		else if(USARTx == USART3)
			NVIC_IRQ39_USART3_Enable;
	}

}
 8000aa6:	e014      	b.n	8000ad2 <MCAL_UART_Init+0x15e>
		else if(USARTx == USART2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <MCAL_UART_Init+0x174>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d106      	bne.n	8000abe <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MCAL_UART_Init+0x180>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MCAL_UART_Init+0x180>)
 8000ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	e009      	b.n	8000ad2 <MCAL_UART_Init+0x15e>
		else if(USARTx == USART3)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <MCAL_UART_Init+0x178>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d105      	bne.n	8000ad2 <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MCAL_UART_Init+0x180>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <MCAL_UART_Init+0x180>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6013      	str	r3, [r2, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000001c 	.word	0x2000001c
 8000ae0:	40013800 	.word	0x40013800
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40004400 	.word	0x40004400
 8000aec:	40004800 	.word	0x40004800
 8000af0:	51eb851f 	.word	0x51eb851f
 8000af4:	e000e104 	.word	0xe000e104

08000af8 <MCAL_UART_SendData>:
 * 					-because it's replaced by the parity. when receiving with the parity
 * 					-the value read in MSB bit is the received parity bit.
 */

void MCAL_UART_SendData(USART_TypeDef* USARTx, uint16_t* pTxBuffer, enum Polling_mechism PollingEn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	4613      	mov	r3, r2
 8000b04:	71fb      	strb	r3, [r7, #7]
	//wait until TXE flag is set in the SR
	if(PollingEn == enable)
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d106      	bne.n	8000b1a <MCAL_UART_SendData+0x22>
		while(! (USARTx->SR & 1<<7));
 8000b0c:	bf00      	nop
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0f9      	beq.n	8000b0e <MCAL_UART_SendData+0x16>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}
	else
	{
		//8 Bit transfer
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	605a      	str	r2, [r3, #4]
	}

}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
	...

08000b30 <MCAL_UART_ReceiveData>:
	while (! (USARTx->SR & 1<<6));
}


void MCAL_UART_ReceiveData(USART_TypeDef* USARTx, uint16_t* pRxBuffer, enum Polling_mechism PollingEn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	71fb      	strb	r3, [r7, #7]
	//wait untill RXNE flag is set in the SR
	if (PollingEn == enable)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d106      	bne.n	8000b52 <MCAL_UART_ReceiveData+0x22>
	{
		while(! (USARTx->SR & 1<<5));
 8000b44:	bf00      	nop
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0320 	and.w	r3, r3, #32
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0f9      	beq.n	8000b46 <MCAL_UART_ReceiveData+0x16>
	}

	else
	{
		//this 8bit data
		if (Global_UART_Config->Parity == UART_Parity_NONE)
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MCAL_UART_ReceiveData+0x58>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	7a5b      	ldrb	r3, [r3, #9]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d107      	bne.n	8000b6c <MCAL_UART_ReceiveData+0x3c>
		{
			//no parity so all 8 bit are considered data
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0xFF);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	801a      	strh	r2, [r3, #0]
		{
			//parity is used, so 7bit will be user data and 1 bit is parity
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
		}
	}
}
 8000b6a:	e007      	b.n	8000b7c <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*) pRxBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	801a      	strh	r2, [r3, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000001c 	.word	0x2000001c

08000b8c <MCAL_UART_GPIO_Set_Pins>:
 * Note				-Should enable the corresponding ALT&GPIO in RCC clock also called after MCAL_UART_init()
 */


void MCAL_UART_GPIO_Set_Pins(USART_TypeDef* USARTx)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCFG;
	if(USARTx == USART1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <MCAL_UART_GPIO_Set_Pins+0x48>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d117      	bne.n	8000bcc <MCAL_UART_GPIO_Set_Pins+0x40>
	{
		//PA9 >> TX  -  PA10 >> RX  -  PA11 >> CTS  -  PA12 >> RTS
		//PA9 TX
		PinCFG.GPIO_PinNumber = GPIO_PIN_9;
 8000b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba0:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000ba2:	2306      	movs	r3, #6
 8000ba4:	73bb      	strb	r3, [r7, #14]
		PinCFG.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCFG);
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <MCAL_UART_GPIO_Set_Pins+0x4c>)
 8000bb2:	f7ff fde0 	bl	8000776 <MCAL_GPIO_Init>

		//PA10 RX
		PinCFG.GPIO_PinNumber = GPIO_PIN_11;
 8000bb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bba:	81bb      	strh	r3, [r7, #12]
		PinCFG.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCFG);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MCAL_UART_GPIO_Set_Pins+0x4c>)
 8000bc8:	f7ff fdd5 	bl	8000776 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOA, &PinCFG);
		}

	}

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	40010800 	.word	0x40010800

08000bdc <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler (void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000be0:	4b02      	ldr	r3, [pc, #8]	; (8000bec <USART1_IRQHandler+0x10>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	4798      	blx	r3
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000001c 	.word	0x2000001c

08000bf0 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000bf4:	4b02      	ldr	r3, [pc, #8]	; (8000c00 <USART2_IRQHandler+0x10>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	4798      	blx	r3
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000001c 	.word	0x2000001c

08000c04 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <USART3_IRQHandler+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	4798      	blx	r3
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000001c 	.word	0x2000001c

08000c18 <__libc_init_array>:
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	2500      	movs	r5, #0
 8000c1c:	4e0c      	ldr	r6, [pc, #48]	; (8000c50 <__libc_init_array+0x38>)
 8000c1e:	4c0d      	ldr	r4, [pc, #52]	; (8000c54 <__libc_init_array+0x3c>)
 8000c20:	1ba4      	subs	r4, r4, r6
 8000c22:	10a4      	asrs	r4, r4, #2
 8000c24:	42a5      	cmp	r5, r4
 8000c26:	d109      	bne.n	8000c3c <__libc_init_array+0x24>
 8000c28:	f000 f81a 	bl	8000c60 <_init>
 8000c2c:	2500      	movs	r5, #0
 8000c2e:	4e0a      	ldr	r6, [pc, #40]	; (8000c58 <__libc_init_array+0x40>)
 8000c30:	4c0a      	ldr	r4, [pc, #40]	; (8000c5c <__libc_init_array+0x44>)
 8000c32:	1ba4      	subs	r4, r4, r6
 8000c34:	10a4      	asrs	r4, r4, #2
 8000c36:	42a5      	cmp	r5, r4
 8000c38:	d105      	bne.n	8000c46 <__libc_init_array+0x2e>
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c40:	4798      	blx	r3
 8000c42:	3501      	adds	r5, #1
 8000c44:	e7ee      	b.n	8000c24 <__libc_init_array+0xc>
 8000c46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c4a:	4798      	blx	r3
 8000c4c:	3501      	adds	r5, #1
 8000c4e:	e7f2      	b.n	8000c36 <__libc_init_array+0x1e>
 8000c50:	08000c90 	.word	0x08000c90
 8000c54:	08000c90 	.word	0x08000c90
 8000c58:	08000c90 	.word	0x08000c90
 8000c5c:	08000c94 	.word	0x08000c94

08000c60 <_init>:
 8000c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c62:	bf00      	nop
 8000c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c66:	bc08      	pop	{r3}
 8000c68:	469e      	mov	lr, r3
 8000c6a:	4770      	bx	lr

08000c6c <_fini>:
 8000c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6e:	bf00      	nop
 8000c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c72:	bc08      	pop	{r3}
 8000c74:	469e      	mov	lr, r3
 8000c76:	4770      	bx	lr
