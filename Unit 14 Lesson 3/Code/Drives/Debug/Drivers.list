
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a10  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b40  08000b40  00010b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b4c  08000b4c  00010b54  2**0
                  CONTENTS
  4 .ARM          00000000  08000b4c  08000b4c  00010b54  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b4c  08000b54  00010b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b4c  08000b4c  00010b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b50  08000b50  00010b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000b54  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000b54  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b54  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000447f  00000000  00000000  00010b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a36  00000000  00000000  00014ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c1c  00000000  00000000  00015a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e8  00000000  00000000  00016650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000190  00000000  00000000  00016838  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000c55  00000000  00000000  000169c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000021c0  00000000  00000000  0001761d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a94b  00000000  00000000  000197dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024128  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000638  00000000  00000000  000241a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b28 	.word	0x08000b28

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b28 	.word	0x08000b28

08000170 <EXTI9_Callback>:
unsigned int IRQ_Flag = 0;
unsigned int Control_Register = 0;
unsigned int IPSR_Register = 0;

void EXTI9_Callback(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	IRQ_Flag =1;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI9_Callback+0x1c>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
	// Read form IPSR register (Handler Mode)
	__asm(" MRS %[out0],IPSR"
 800017a:	f3ef 8305 	mrs	r3, IPSR
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI9_Callback+0x20>)
 8000180:	6013      	str	r3, [r2, #0]
		  : [out0] "=r"  (IPSR_Register) );     // First : output parameter
}
 8000182:	bf00      	nop
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	2000001c 	.word	0x2000001c
 8000190:	20000024 	.word	0x20000024

08000194 <main>:
int main(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b086      	sub	sp, #24
 8000198:	af00      	add	r7, sp, #0

	//Enable clock
	RCC_GPIOA_CLK_EN();
 800019a:	4b1b      	ldr	r3, [pc, #108]	; (8000208 <main+0x74>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a1a      	ldr	r2, [pc, #104]	; (8000208 <main+0x74>)
 80001a0:	f043 0304 	orr.w	r3, r3, #4
 80001a4:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80001a6:	4b18      	ldr	r3, [pc, #96]	; (8000208 <main+0x74>)
 80001a8:	699b      	ldr	r3, [r3, #24]
 80001aa:	4a17      	ldr	r2, [pc, #92]	; (8000208 <main+0x74>)
 80001ac:	f043 0308 	orr.w	r3, r3, #8
 80001b0:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN();
 80001b2:	4b15      	ldr	r3, [pc, #84]	; (8000208 <main+0x74>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	4a14      	ldr	r2, [pc, #80]	; (8000208 <main+0x74>)
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	6193      	str	r3, [r2, #24]

	//Set EXTI Configuration
	EXTI_PinConfig_t EXTI_CGF;
	EXTI_CGF.EXTI_PIN = EXTI9PB9;
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <main+0x78>)
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80001c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CGF.Trigger_Case = EXTI_Trigger_RISING;
 80001c8:	2300      	movs	r3, #0
 80001ca:	743b      	strb	r3, [r7, #16]
	EXTI_CGF.P_IRQ_CallBack = EXTI9_Callback;
 80001cc:	4b10      	ldr	r3, [pc, #64]	; (8000210 <main+0x7c>)
 80001ce:	617b      	str	r3, [r7, #20]
	EXTI_CGF.IRQ_EN = EXTI_IRQ_Enable;
 80001d0:	2301      	movs	r3, #1
 80001d2:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_CGF);
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fb2a 	bl	8000830 <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 80001dc:	4b0d      	ldr	r3, [pc, #52]	; (8000214 <main+0x80>)
 80001de:	2201      	movs	r2, #1
 80001e0:	601a      	str	r2, [r3, #0]

	__asm("nop \n\t nop \n\t nop \n\t");
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	bf00      	nop

	// Read form control register (Thread Mode)
	__asm(" MRS %[out0],CONTROL"
 80001e8:	f3ef 8314 	mrs	r3, CONTROL
 80001ec:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <main+0x84>)
 80001ee:	6013      	str	r3, [r2, #0]
		  : [out0] "=r"  (Control_Register) );     // First : output parameter

	__asm("nop \n\t nop \n\t nop \n\t");
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
	while(1)
	{
		if(IRQ_Flag)
 80001f6:	4b07      	ldr	r3, [pc, #28]	; (8000214 <main+0x80>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0fb      	beq.n	80001f6 <main+0x62>
		{
			IRQ_Flag =0;
 80001fe:	4b05      	ldr	r3, [pc, #20]	; (8000214 <main+0x80>)
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 8000204:	e7f7      	b.n	80001f6 <main+0x62>
 8000206:	bf00      	nop
 8000208:	40021000 	.word	0x40021000
 800020c:	08000b40 	.word	0x08000b40
 8000210:	08000171 	.word	0x08000171
 8000214:	2000001c 	.word	0x2000001c
 8000218:	20000020 	.word	0x20000020

0800021c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800021c:	480d      	ldr	r0, [pc, #52]	; (8000254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000220:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <LoopForever+0x6>)
  ldr r1, =_edata
 8000226:	490d      	ldr	r1, [pc, #52]	; (800025c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000228:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <LoopForever+0xe>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800022c:	e002      	b.n	8000234 <LoopCopyDataInit>

0800022e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000232:	3304      	adds	r3, #4

08000234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000238:	d3f9      	bcc.n	800022e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800023c:	4c0a      	ldr	r4, [pc, #40]	; (8000268 <LoopForever+0x16>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000240:	e001      	b.n	8000246 <LoopFillZerobss>

08000242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000244:	3204      	adds	r2, #4

08000246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000248:	d3fb      	bcc.n	8000242 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024a:	f000 fc49 	bl	8000ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800024e:	f7ff ffa1 	bl	8000194 <main>

08000252 <LoopForever>:

LoopForever:
    b LoopForever
 8000252:	e7fe      	b.n	8000252 <LoopForever>
  ldr   r0, =_estack
 8000254:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800025c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000260:	08000b54 	.word	0x08000b54
  ldr r2, =_sbss
 8000264:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000268:	20000070 	.word	0x20000070

0800026c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800026c:	e7fe      	b.n	800026c <ADC1_2_IRQHandler>
	...

08000270 <Enable_NVIC>:
 */



void Enable_NVIC(uint16_t IRQ)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	2b0f      	cmp	r3, #15
 800027e:	d854      	bhi.n	800032a <Enable_NVIC+0xba>
 8000280:	a201      	add	r2, pc, #4	; (adr r2, 8000288 <Enable_NVIC+0x18>)
 8000282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000286:	bf00      	nop
 8000288:	080002c9 	.word	0x080002c9
 800028c:	080002d7 	.word	0x080002d7
 8000290:	080002e5 	.word	0x080002e5
 8000294:	080002f3 	.word	0x080002f3
 8000298:	08000301 	.word	0x08000301
 800029c:	0800030f 	.word	0x0800030f
 80002a0:	0800030f 	.word	0x0800030f
 80002a4:	0800030f 	.word	0x0800030f
 80002a8:	0800030f 	.word	0x0800030f
 80002ac:	0800030f 	.word	0x0800030f
 80002b0:	0800031d 	.word	0x0800031d
 80002b4:	0800031d 	.word	0x0800031d
 80002b8:	0800031d 	.word	0x0800031d
 80002bc:	0800031d 	.word	0x0800031d
 80002c0:	0800031d 	.word	0x0800031d
 80002c4:	0800031d 	.word	0x0800031d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80002c8:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <Enable_NVIC+0xc4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a19      	ldr	r2, [pc, #100]	; (8000334 <Enable_NVIC+0xc4>)
 80002ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002d2:	6013      	str	r3, [r2, #0]
		break;
 80002d4:	e029      	b.n	800032a <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80002d6:	4b17      	ldr	r3, [pc, #92]	; (8000334 <Enable_NVIC+0xc4>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a16      	ldr	r2, [pc, #88]	; (8000334 <Enable_NVIC+0xc4>)
 80002dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e0:	6013      	str	r3, [r2, #0]
		break;
 80002e2:	e022      	b.n	800032a <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <Enable_NVIC+0xc4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a12      	ldr	r2, [pc, #72]	; (8000334 <Enable_NVIC+0xc4>)
 80002ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ee:	6013      	str	r3, [r2, #0]
		break;
 80002f0:	e01b      	b.n	800032a <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <Enable_NVIC+0xc4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <Enable_NVIC+0xc4>)
 80002f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002fc:	6013      	str	r3, [r2, #0]
		break;
 80002fe:	e014      	b.n	800032a <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ1_EXTI4_Enable;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <Enable_NVIC+0xc4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <Enable_NVIC+0xc4>)
 8000306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800030a:	6013      	str	r3, [r2, #0]
		break;
 800030c:	e00d      	b.n	800032a <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <Enable_NVIC+0xc4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a08      	ldr	r2, [pc, #32]	; (8000334 <Enable_NVIC+0xc4>)
 8000314:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000318:	6013      	str	r3, [r2, #0]
		break;
 800031a:	e006      	b.n	800032a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <Enable_NVIC+0xc8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a05      	ldr	r2, [pc, #20]	; (8000338 <Enable_NVIC+0xc8>)
 8000322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000326:	6013      	str	r3, [r2, #0]
		break;
 8000328:	bf00      	nop
	}
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	e000e100 	.word	0xe000e100
 8000338:	e000e104 	.word	0xe000e104

0800033c <Disable_NVIC>:


void Disable_NVIC(uint16_t IRQ)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000346:	88fb      	ldrh	r3, [r7, #6]
 8000348:	2b0f      	cmp	r3, #15
 800034a:	d854      	bhi.n	80003f6 <Disable_NVIC+0xba>
 800034c:	a201      	add	r2, pc, #4	; (adr r2, 8000354 <Disable_NVIC+0x18>)
 800034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000352:	bf00      	nop
 8000354:	08000395 	.word	0x08000395
 8000358:	080003a3 	.word	0x080003a3
 800035c:	080003b1 	.word	0x080003b1
 8000360:	080003bf 	.word	0x080003bf
 8000364:	080003cd 	.word	0x080003cd
 8000368:	080003db 	.word	0x080003db
 800036c:	080003db 	.word	0x080003db
 8000370:	080003db 	.word	0x080003db
 8000374:	080003db 	.word	0x080003db
 8000378:	080003db 	.word	0x080003db
 800037c:	080003e9 	.word	0x080003e9
 8000380:	080003e9 	.word	0x080003e9
 8000384:	080003e9 	.word	0x080003e9
 8000388:	080003e9 	.word	0x080003e9
 800038c:	080003e9 	.word	0x080003e9
 8000390:	080003e9 	.word	0x080003e9
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000394:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <Disable_NVIC+0xc4>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a19      	ldr	r2, [pc, #100]	; (8000400 <Disable_NVIC+0xc4>)
 800039a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800039e:	6013      	str	r3, [r2, #0]
		break;
 80003a0:	e029      	b.n	80003f6 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 80003a2:	4b17      	ldr	r3, [pc, #92]	; (8000400 <Disable_NVIC+0xc4>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a16      	ldr	r2, [pc, #88]	; (8000400 <Disable_NVIC+0xc4>)
 80003a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ac:	6013      	str	r3, [r2, #0]
		break;
 80003ae:	e022      	b.n	80003f6 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <Disable_NVIC+0xc4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a12      	ldr	r2, [pc, #72]	; (8000400 <Disable_NVIC+0xc4>)
 80003b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ba:	6013      	str	r3, [r2, #0]
		break;
 80003bc:	e01b      	b.n	80003f6 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <Disable_NVIC+0xc4>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a0f      	ldr	r2, [pc, #60]	; (8000400 <Disable_NVIC+0xc4>)
 80003c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003c8:	6013      	str	r3, [r2, #0]
		break;
 80003ca:	e014      	b.n	80003f6 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ1_EXTI4_Disable;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <Disable_NVIC+0xc4>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <Disable_NVIC+0xc4>)
 80003d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003d6:	6013      	str	r3, [r2, #0]
		break;
 80003d8:	e00d      	b.n	80003f6 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <Disable_NVIC+0xc4>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a08      	ldr	r2, [pc, #32]	; (8000400 <Disable_NVIC+0xc4>)
 80003e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003e4:	6013      	str	r3, [r2, #0]
		break;
 80003e6:	e006      	b.n	80003f6 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <Disable_NVIC+0xc8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a05      	ldr	r2, [pc, #20]	; (8000404 <Disable_NVIC+0xc8>)
 80003ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f2:	6013      	str	r3, [r2, #0]
		break;
 80003f4:	bf00      	nop
	}
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	e000e180 	.word	0xe000e180
 8000404:	e000e184 	.word	0xe000e184

08000408 <Update_EXTI>:



void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	//1- Configure GPIO to be AF input =>> Floating input
	GPIO_PinConfig_t PinCfg;
	//update the GPIO pin to be floating input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	891b      	ldrh	r3, [r3, #8]
 8000414:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000416:	2301      	movs	r3, #1
 8000418:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	f107 0208 	add.w	r2, r7, #8
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f000 fa61 	bl	80008ec <MCAL_GPIO_Init>
	//---------------------------------------------------------------

	//2- Update AFIO to route between EXTI line with PORT A,B,C,D

	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber /4 ;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	089b      	lsrs	r3, r3, #2
 8000430:	b29b      	uxth	r3, r3
 8000432:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber %4) * 4;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	b2db      	uxtb	r3, r3
 800043a:	f003 0303 	and.w	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	73bb      	strb	r3, [r7, #14]

	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port));
 8000444:	4a6b      	ldr	r2, [pc, #428]	; (80005f4 <Update_EXTI+0x1ec>)
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	3302      	adds	r3, #2
 800044a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	4969      	ldr	r1, [pc, #420]	; (80005f8 <Update_EXTI+0x1f0>)
 8000454:	428b      	cmp	r3, r1
 8000456:	d01a      	beq.n	800048e <Update_EXTI+0x86>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	4967      	ldr	r1, [pc, #412]	; (80005fc <Update_EXTI+0x1f4>)
 800045e:	428b      	cmp	r3, r1
 8000460:	d012      	beq.n	8000488 <Update_EXTI+0x80>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	4966      	ldr	r1, [pc, #408]	; (8000600 <Update_EXTI+0x1f8>)
 8000468:	428b      	cmp	r3, r1
 800046a:	d00a      	beq.n	8000482 <Update_EXTI+0x7a>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	4964      	ldr	r1, [pc, #400]	; (8000604 <Update_EXTI+0x1fc>)
 8000472:	428b      	cmp	r3, r1
 8000474:	d102      	bne.n	800047c <Update_EXTI+0x74>
 8000476:	f06f 0378 	mvn.w	r3, #120	; 0x78
 800047a:	e00a      	b.n	8000492 <Update_EXTI+0x8a>
 800047c:	f06f 030f 	mvn.w	r3, #15
 8000480:	e007      	b.n	8000492 <Update_EXTI+0x8a>
 8000482:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8000486:	e004      	b.n	8000492 <Update_EXTI+0x8a>
 8000488:	f06f 031e 	mvn.w	r3, #30
 800048c:	e001      	b.n	8000492 <Update_EXTI+0x8a>
 800048e:	f06f 030f 	mvn.w	r3, #15
 8000492:	4858      	ldr	r0, [pc, #352]	; (80005f4 <Update_EXTI+0x1ec>)
 8000494:	7bf9      	ldrb	r1, [r7, #15]
 8000496:	401a      	ands	r2, r3
 8000498:	1c8b      	adds	r3, r1, #2
 800049a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) << AFIO_EXTICR_position );
 800049e:	4a55      	ldr	r2, [pc, #340]	; (80005f4 <Update_EXTI+0x1ec>)
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
 80004a2:	3302      	adds	r3, #2
 80004a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4952      	ldr	r1, [pc, #328]	; (80005f8 <Update_EXTI+0x1f0>)
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d016      	beq.n	80004e0 <Update_EXTI+0xd8>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	4951      	ldr	r1, [pc, #324]	; (80005fc <Update_EXTI+0x1f4>)
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d00f      	beq.n	80004dc <Update_EXTI+0xd4>
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	494f      	ldr	r1, [pc, #316]	; (8000600 <Update_EXTI+0x1f8>)
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d008      	beq.n	80004d8 <Update_EXTI+0xd0>
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	494e      	ldr	r1, [pc, #312]	; (8000604 <Update_EXTI+0x1fc>)
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d101      	bne.n	80004d4 <Update_EXTI+0xcc>
 80004d0:	2303      	movs	r3, #3
 80004d2:	e006      	b.n	80004e2 <Update_EXTI+0xda>
 80004d4:	2300      	movs	r3, #0
 80004d6:	e004      	b.n	80004e2 <Update_EXTI+0xda>
 80004d8:	2302      	movs	r3, #2
 80004da:	e002      	b.n	80004e2 <Update_EXTI+0xda>
 80004dc:	2301      	movs	r3, #1
 80004de:	e000      	b.n	80004e2 <Update_EXTI+0xda>
 80004e0:	2300      	movs	r3, #0
 80004e2:	7bb9      	ldrb	r1, [r7, #14]
 80004e4:	408b      	lsls	r3, r1
 80004e6:	4618      	mov	r0, r3
 80004e8:	4942      	ldr	r1, [pc, #264]	; (80005f4 <Update_EXTI+0x1ec>)
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	4302      	orrs	r2, r0
 80004ee:	3302      	adds	r3, #2
 80004f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//---------------------------------------------------------------

	//3- Update rising or falling register
	EXTI->RTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004f4:	4b44      	ldr	r3, [pc, #272]	; (8000608 <Update_EXTI+0x200>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	8812      	ldrh	r2, [r2, #0]
 80004fc:	4611      	mov	r1, r2
 80004fe:	2201      	movs	r2, #1
 8000500:	408a      	lsls	r2, r1
 8000502:	43d2      	mvns	r2, r2
 8000504:	4611      	mov	r1, r2
 8000506:	4a40      	ldr	r2, [pc, #256]	; (8000608 <Update_EXTI+0x200>)
 8000508:	400b      	ands	r3, r1
 800050a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800050c:	4b3e      	ldr	r3, [pc, #248]	; (8000608 <Update_EXTI+0x200>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	8812      	ldrh	r2, [r2, #0]
 8000514:	4611      	mov	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	408a      	lsls	r2, r1
 800051a:	43d2      	mvns	r2, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a3a      	ldr	r2, [pc, #232]	; (8000608 <Update_EXTI+0x200>)
 8000520:	400b      	ands	r3, r1
 8000522:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	7b1b      	ldrb	r3, [r3, #12]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10b      	bne.n	8000544 <Update_EXTI+0x13c>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800052c:	4b36      	ldr	r3, [pc, #216]	; (8000608 <Update_EXTI+0x200>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	8812      	ldrh	r2, [r2, #0]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	4611      	mov	r1, r2
 800053c:	4a32      	ldr	r2, [pc, #200]	; (8000608 <Update_EXTI+0x200>)
 800053e:	430b      	orrs	r3, r1
 8000540:	6093      	str	r3, [r2, #8]
 8000542:	e025      	b.n	8000590 <Update_EXTI+0x188>
	}else if (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	7b1b      	ldrb	r3, [r3, #12]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d10b      	bne.n	8000564 <Update_EXTI+0x15c>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800054c:	4b2e      	ldr	r3, [pc, #184]	; (8000608 <Update_EXTI+0x200>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	8812      	ldrh	r2, [r2, #0]
 8000554:	4611      	mov	r1, r2
 8000556:	2201      	movs	r2, #1
 8000558:	408a      	lsls	r2, r1
 800055a:	4611      	mov	r1, r2
 800055c:	4a2a      	ldr	r2, [pc, #168]	; (8000608 <Update_EXTI+0x200>)
 800055e:	430b      	orrs	r3, r1
 8000560:	60d3      	str	r3, [r2, #12]
 8000562:	e015      	b.n	8000590 <Update_EXTI+0x188>
	}else
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <Update_EXTI+0x200>)
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	8812      	ldrh	r2, [r2, #0]
 800056c:	4611      	mov	r1, r2
 800056e:	2201      	movs	r2, #1
 8000570:	408a      	lsls	r2, r1
 8000572:	4611      	mov	r1, r2
 8000574:	4a24      	ldr	r2, [pc, #144]	; (8000608 <Update_EXTI+0x200>)
 8000576:	430b      	orrs	r3, r1
 8000578:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800057a:	4b23      	ldr	r3, [pc, #140]	; (8000608 <Update_EXTI+0x200>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	8812      	ldrh	r2, [r2, #0]
 8000582:	4611      	mov	r1, r2
 8000584:	2201      	movs	r2, #1
 8000586:	408a      	lsls	r2, r1
 8000588:	4611      	mov	r1, r2
 800058a:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <Update_EXTI+0x200>)
 800058c:	430b      	orrs	r3, r1
 800058e:	60d3      	str	r3, [r2, #12]
	}
	//---------------------------------------------------------------

	//4-Update IRQ Handling CallBack

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	691b      	ldr	r3, [r3, #16]
 800059a:	4a1c      	ldr	r2, [pc, #112]	; (800060c <Update_EXTI+0x204>)
 800059c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//---------------------------------------------------------------


	//5-Enable/Disable IRQ & NVIC
	if (EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	7b5b      	ldrb	r3, [r3, #13]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d110      	bne.n	80005ca <Update_EXTI+0x1c2>
	{
		EXTI->IMR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <Update_EXTI+0x200>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	8812      	ldrh	r2, [r2, #0]
 80005b0:	4611      	mov	r1, r2
 80005b2:	2201      	movs	r2, #1
 80005b4:	408a      	lsls	r2, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a13      	ldr	r2, [pc, #76]	; (8000608 <Update_EXTI+0x200>)
 80005ba:	430b      	orrs	r3, r1
 80005bc:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe54 	bl	8000270 <Enable_NVIC>


	//---------------------------------------------------------------


}
 80005c8:	e010      	b.n	80005ec <Update_EXTI+0x1e4>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <Update_EXTI+0x200>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	8812      	ldrh	r2, [r2, #0]
 80005d2:	4611      	mov	r1, r2
 80005d4:	2201      	movs	r2, #1
 80005d6:	408a      	lsls	r2, r1
 80005d8:	43d2      	mvns	r2, r2
 80005da:	4611      	mov	r1, r2
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <Update_EXTI+0x200>)
 80005de:	400b      	ands	r3, r1
 80005e0:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fea8 	bl	800033c <Disable_NVIC>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40010000 	.word	0x40010000
 80005f8:	40010800 	.word	0x40010800
 80005fc:	40010c00 	.word	0x40010c00
 8000600:	40011000 	.word	0x40011000
 8000604:	40011400 	.word	0x40011400
 8000608:	40010400 	.word	0x40010400
 800060c:	20000034 	.word	0x20000034

08000610 <EXTI0_IRQHandler>:
 * 										ISR Functions
 * =============================================================================================
 */

void EXTI0_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	//Clear by writing '1' into the bit Pending register {EXTI_PR}
	EXTI->PR |= 1<<0;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <EXTI0_IRQHandler+0x1c>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <EXTI0_IRQHandler+0x1c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[0]();
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <EXTI0_IRQHandler+0x20>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4798      	blx	r3
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010400 	.word	0x40010400
 8000630:	20000034 	.word	0x20000034

08000634 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <EXTI1_IRQHandler+0x1c>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <EXTI1_IRQHandler+0x1c>)
 800063e:	f043 0302 	orr.w	r3, r3, #2
 8000642:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[1]();
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <EXTI1_IRQHandler+0x20>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	4798      	blx	r3
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010400 	.word	0x40010400
 8000654:	20000034 	.word	0x20000034

08000658 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <EXTI2_IRQHandler+0x1c>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <EXTI2_IRQHandler+0x1c>)
 8000662:	f043 0304 	orr.w	r3, r3, #4
 8000666:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[2]();
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <EXTI2_IRQHandler+0x20>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	4798      	blx	r3
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010400 	.word	0x40010400
 8000678:	20000034 	.word	0x20000034

0800067c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <EXTI3_IRQHandler+0x1c>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <EXTI3_IRQHandler+0x1c>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[3]();
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <EXTI3_IRQHandler+0x20>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	4798      	blx	r3
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010400 	.word	0x40010400
 800069c:	20000034 	.word	0x20000034

080006a0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <EXTI4_IRQHandler+0x1c>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <EXTI4_IRQHandler+0x1c>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6153      	str	r3, [r2, #20]
	//Call IRQ
	GP_IRQ_CallBack[4]();
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <EXTI4_IRQHandler+0x20>)
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	4798      	blx	r3
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010400 	.word	0x40010400
 80006c0:	20000034 	.word	0x20000034

080006c4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5;	GP_IRQ_CallBack[5]();}
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	f003 0320 	and.w	r3, r3, #32
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d008      	beq.n	80006e6 <EXTI9_5_IRQHandler+0x22>
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	6153      	str	r3, [r2, #20]
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <EXTI9_5_IRQHandler+0xa4>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6;	GP_IRQ_CallBack[6]();}
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d008      	beq.n	8000704 <EXTI9_5_IRQHandler+0x40>
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 80006f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <EXTI9_5_IRQHandler+0xa4>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7;	GP_IRQ_CallBack[7]();}
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070c:	2b00      	cmp	r3, #0
 800070e:	d008      	beq.n	8000722 <EXTI9_5_IRQHandler+0x5e>
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	4a13      	ldr	r2, [pc, #76]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071a:	6153      	str	r3, [r2, #20]
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <EXTI9_5_IRQHandler+0xa4>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8;	GP_IRQ_CallBack[8]();}
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800072a:	2b00      	cmp	r3, #0
 800072c:	d008      	beq.n	8000740 <EXTI9_5_IRQHandler+0x7c>
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <EXTI9_5_IRQHandler+0xa4>)
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9;	GP_IRQ_CallBack[9]();}
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000748:	2b00      	cmp	r3, #0
 800074a:	d008      	beq.n	800075e <EXTI9_5_IRQHandler+0x9a>
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <EXTI9_5_IRQHandler+0xa0>)
 8000752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000756:	6153      	str	r3, [r2, #20]
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <EXTI9_5_IRQHandler+0xa4>)
 800075a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075c:	4798      	blx	r3
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40010400 	.word	0x40010400
 8000768:	20000034 	.word	0x20000034

0800076c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10;	GP_IRQ_CallBack[10]();}
 8000770:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000778:	2b00      	cmp	r3, #0
 800077a:	d008      	beq.n	800078e <EXTI15_10_IRQHandler+0x22>
 800077c:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	4a29      	ldr	r2, [pc, #164]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000786:	6153      	str	r3, [r2, #20]
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 800078a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800078c:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11;	GP_IRQ_CallBack[11]();}
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000796:	2b00      	cmp	r3, #0
 8000798:	d008      	beq.n	80007ac <EXTI15_10_IRQHandler+0x40>
 800079a:	4b23      	ldr	r3, [pc, #140]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a22      	ldr	r2, [pc, #136]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12;	GP_IRQ_CallBack[12]();}
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d008      	beq.n	80007ca <EXTI15_10_IRQHandler+0x5e>
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	4a1a      	ldr	r2, [pc, #104]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c2:	6153      	str	r3, [r2, #20]
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13;	GP_IRQ_CallBack[13]();}
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d008      	beq.n	80007e8 <EXTI15_10_IRQHandler+0x7c>
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 80007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e6:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14;	GP_IRQ_CallBack[14]();}
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d008      	beq.n	8000806 <EXTI15_10_IRQHandler+0x9a>
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6153      	str	r3, [r2, #20]
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 8000802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000804:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15;	GP_IRQ_CallBack[15]();}
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <EXTI15_10_IRQHandler+0xb8>
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <EXTI15_10_IRQHandler+0xbc>)
 8000818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b03      	ldr	r3, [pc, #12]	; (800082c <EXTI15_10_IRQHandler+0xc0>)
 8000820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000822:	4798      	blx	r3
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40010400 	.word	0x40010400
 800082c:	20000034 	.word	0x20000034

08000830 <MCAL_EXTI_GPIO_Init>:
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 package has only GPIO A,B,PART of C/D exported as external PInS from the MCU
 * 					 Also Mandatory to enable RCC clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init (EXTI_PinConfig_t* EXTI_Config)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff fde5 	bl	8000408 <Update_EXTI>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <Get_CRLH_Position>:

#include "Stm32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	2b80      	cmp	r3, #128	; 0x80
 8000854:	d042      	beq.n	80008dc <Get_CRLH_Position+0x96>
 8000856:	2b80      	cmp	r3, #128	; 0x80
 8000858:	dc11      	bgt.n	800087e <Get_CRLH_Position+0x38>
 800085a:	2b08      	cmp	r3, #8
 800085c:	d036      	beq.n	80008cc <Get_CRLH_Position+0x86>
 800085e:	2b08      	cmp	r3, #8
 8000860:	dc06      	bgt.n	8000870 <Get_CRLH_Position+0x2a>
 8000862:	2b02      	cmp	r3, #2
 8000864:	d02e      	beq.n	80008c4 <Get_CRLH_Position+0x7e>
 8000866:	2b04      	cmp	r3, #4
 8000868:	d02e      	beq.n	80008c8 <Get_CRLH_Position+0x82>
 800086a:	2b01      	cmp	r3, #1
 800086c:	d028      	beq.n	80008c0 <Get_CRLH_Position+0x7a>
 800086e:	e037      	b.n	80008e0 <Get_CRLH_Position+0x9a>
 8000870:	2b20      	cmp	r3, #32
 8000872:	d02f      	beq.n	80008d4 <Get_CRLH_Position+0x8e>
 8000874:	2b40      	cmp	r3, #64	; 0x40
 8000876:	d02f      	beq.n	80008d8 <Get_CRLH_Position+0x92>
 8000878:	2b10      	cmp	r3, #16
 800087a:	d029      	beq.n	80008d0 <Get_CRLH_Position+0x8a>
 800087c:	e030      	b.n	80008e0 <Get_CRLH_Position+0x9a>
 800087e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000882:	d023      	beq.n	80008cc <Get_CRLH_Position+0x86>
 8000884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000888:	dc09      	bgt.n	800089e <Get_CRLH_Position+0x58>
 800088a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800088e:	d019      	beq.n	80008c4 <Get_CRLH_Position+0x7e>
 8000890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000894:	d018      	beq.n	80008c8 <Get_CRLH_Position+0x82>
 8000896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800089a:	d011      	beq.n	80008c0 <Get_CRLH_Position+0x7a>
 800089c:	e020      	b.n	80008e0 <Get_CRLH_Position+0x9a>
 800089e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a2:	d017      	beq.n	80008d4 <Get_CRLH_Position+0x8e>
 80008a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a8:	dc03      	bgt.n	80008b2 <Get_CRLH_Position+0x6c>
 80008aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008ae:	d00f      	beq.n	80008d0 <Get_CRLH_Position+0x8a>
 80008b0:	e016      	b.n	80008e0 <Get_CRLH_Position+0x9a>
 80008b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008b6:	d00f      	beq.n	80008d8 <Get_CRLH_Position+0x92>
 80008b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008bc:	d00e      	beq.n	80008dc <Get_CRLH_Position+0x96>
 80008be:	e00f      	b.n	80008e0 <Get_CRLH_Position+0x9a>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	e00e      	b.n	80008e2 <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	e00c      	b.n	80008e2 <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	e00a      	b.n	80008e2 <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12;
 80008cc:	230c      	movs	r3, #12
 80008ce:	e008      	b.n	80008e2 <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16;
 80008d0:	2310      	movs	r3, #16
 80008d2:	e006      	b.n	80008e2 <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20;
 80008d4:	2314      	movs	r3, #20
 80008d6:	e004      	b.n	80008e2 <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24;
 80008d8:	2318      	movs	r3, #24
 80008da:	e002      	b.n	80008e2 <Get_CRLH_Position+0x9c>
		break ;
	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28;
 80008dc:	231c      	movs	r3, #28
 80008de:	e000      	b.n	80008e2 <Get_CRLH_Position+0x9c>
		break ;
	}
	return 0;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <MCAL_GPIO_Init>:
 * @retval			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 package has only GPIO A,B,PART of C/D
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx , GPIO_PinConfig_t* PinConfig)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) configure PINS from 0 >>> 7
	//Port configuration register high (GPIOx_CRH) configure PINS from 8 >>> 15
	volatile uint32_t* Config_Reg = NULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
	Config_Reg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)?  &GPIOx->CRL : &GPIOx->CRH;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d801      	bhi.n	8000906 <MCAL_GPIO_Init+0x1a>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	e001      	b.n	800090a <MCAL_GPIO_Init+0x1e>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3304      	adds	r3, #4
 800090a:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
	//clear CNF8[1:0]  MODE[1:0]
	(*Config_Reg) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff96 	bl	8000846 <Get_CRLH_Position>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	230f      	movs	r3, #15
 8000920:	4093      	lsls	r3, r2
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	401a      	ands	r2, r3
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)   )
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	789b      	ldrb	r3, [r3, #2]
 8000932:	2b07      	cmp	r3, #7
 8000934:	d00b      	beq.n	800094e <MCAL_GPIO_Init+0x62>
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	789b      	ldrb	r3, [r3, #2]
 800093a:	2b06      	cmp	r3, #6
 800093c:	d007      	beq.n	800094e <MCAL_GPIO_Init+0x62>
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	2b05      	cmp	r3, #5
 8000944:	d003      	beq.n	800094e <MCAL_GPIO_Init+0x62>
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	789b      	ldrb	r3, [r3, #2]
 800094a:	2b04      	cmp	r3, #4
 800094c:	d10e      	bne.n	800096c <MCAL_GPIO_Init+0x80>
	{
		//set CNF8[1:0]  MODE[1:0]
		PIN_Config = (( ((PinConfig->GPIO_MODE -4) <<2) | (PinConfig->GPIO_Output_Speed) ) &0x0f );
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	3b04      	subs	r3, #4
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	b25a      	sxtb	r2, r3
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	78db      	ldrb	r3, [r3, #3]
 800095c:	b25b      	sxtb	r3, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	b25b      	sxtb	r3, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f003 030f 	and.w	r3, r3, #15
 8000968:	73fb      	strb	r3, [r7, #15]
 800096a:	e02c      	b.n	80009c6 <MCAL_GPIO_Init+0xda>
	}
	//if Pin is input
	else
	{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG))
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d003      	beq.n	800097c <MCAL_GPIO_Init+0x90>
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	789b      	ldrb	r3, [r3, #2]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d107      	bne.n	800098c <MCAL_GPIO_Init+0xa0>
		{
			//set CNF8[1:0]  MODE[1:0]0
			PIN_Config = (( ((PinConfig->GPIO_MODE) <<2) | (0x0) ) &0x0f );
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	789b      	ldrb	r3, [r3, #2]
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	b2db      	uxtb	r3, r3
 8000984:	f003 030f 	and.w	r3, r3, #15
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	e01c      	b.n	80009c6 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT ) //consider it as input floating
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	789b      	ldrb	r3, [r3, #2]
 8000990:	2b08      	cmp	r3, #8
 8000992:	d102      	bne.n	800099a <MCAL_GPIO_Init+0xae>
		{
			//set CNF8[1:0]  MODE[1:0]0
			PIN_Config = (( ((GPIO_MODE_INPUT_FLO) <<2) | (0x0) ) &0x0f );
 8000994:	2304      	movs	r3, #4
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e015      	b.n	80009c6 <MCAL_GPIO_Init+0xda>
		}
		else // PU PD Input
		{
			PIN_Config = (( ((GPIO_MODE_INPUT_PU) <<2) | (0x0) ) &0x0f );
 800099a:	2308      	movs	r3, #8
 800099c:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	789b      	ldrb	r3, [r3, #2]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d107      	bne.n	80009b6 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up : Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	8812      	ldrh	r2, [r2, #0]
 80009ae:	431a      	orrs	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	e007      	b.n	80009c6 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//PxODR = 0 Input pull-down : Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	8812      	ldrh	r2, [r2, #0]
 80009be:	43d2      	mvns	r2, r2
 80009c0:	401a      	ands	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	60da      	str	r2, [r3, #12]
			}

		}
	}
	// write on CRL or CRH
	(*Config_Reg) |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80009c6:	7bfc      	ldrb	r4, [r7, #15]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff3a 	bl	8000846 <Get_CRLH_Position>
 80009d2:	4603      	mov	r3, r0
 80009d4:	fa04 f203 	lsl.w	r2, r4, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	431a      	orrs	r2, r3
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	601a      	str	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd90      	pop	{r4, r7, pc}
	...

080009ec <SPI1_IRQHandler>:
	 * ==========================================================================================
	 */


	void SPI1_IRQHandler (void)
	{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI1->SR & (1<<1) ) >>1 );
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <SPI1_IRQHandler+0x54>)
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	085b      	lsrs	r3, r3, #1
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	793b      	ldrb	r3, [r7, #4]
 8000a00:	f362 0300 	bfi	r3, r2, #0, #1
 8000a04:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI1->SR & (1<<0) ) >>0 );
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <SPI1_IRQHandler+0x54>)
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	793b      	ldrb	r3, [r7, #4]
 8000a12:	f362 0341 	bfi	r3, r2, #1, #1
 8000a16:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI1->SR & (1<<4) ) >>4 );
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <SPI1_IRQHandler+0x54>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	091b      	lsrs	r3, r3, #4
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	793b      	ldrb	r3, [r7, #4]
 8000a26:	f362 0382 	bfi	r3, r2, #2, #1
 8000a2a:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src);
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SPI1_IRQHandler+0x58>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	7938      	ldrb	r0, [r7, #4]
 8000a34:	4798      	blx	r3
	}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40013000 	.word	0x40013000
 8000a44:	20000028 	.word	0x20000028

08000a48 <SPI2_IRQHandler>:


	void SPI2_IRQHandler (void)
	{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irq_src;

		irq_src.TXE = ( ( SPI2->SR & (1<<1) ) >>1 );
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <SPI2_IRQHandler+0x54>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	085b      	lsrs	r3, r3, #1
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	793b      	ldrb	r3, [r7, #4]
 8000a5c:	f362 0300 	bfi	r3, r2, #0, #1
 8000a60:	713b      	strb	r3, [r7, #4]
		irq_src.RXNE = ( ( SPI2->SR & (1<<0) ) >>0 );
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <SPI2_IRQHandler+0x54>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	793b      	ldrb	r3, [r7, #4]
 8000a6e:	f362 0341 	bfi	r3, r2, #1, #1
 8000a72:	713b      	strb	r3, [r7, #4]
		irq_src.ERRI = ( ( SPI2->SR & (1<<4) ) >>4 );
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <SPI2_IRQHandler+0x54>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	091b      	lsrs	r3, r3, #4
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	793b      	ldrb	r3, [r7, #4]
 8000a82:	f362 0382 	bfi	r3, r2, #2, #1
 8000a86:	713b      	strb	r3, [r7, #4]

		Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src);
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SPI2_IRQHandler+0x58>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	7938      	ldrb	r0, [r7, #4]
 8000a90:	4798      	blx	r3
	}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40003800 	.word	0x40003800
 8000aa0:	20000028 	.word	0x20000028

08000aa4 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler (void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <USART1_IRQHandler+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	4798      	blx	r3
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000030 	.word	0x20000030

08000ab8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <USART2_IRQHandler+0x10>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	4798      	blx	r3
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000030 	.word	0x20000030

08000acc <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <USART3_IRQHandler+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	4798      	blx	r3
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000030 	.word	0x20000030

08000ae0 <__libc_init_array>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	4e0c      	ldr	r6, [pc, #48]	; (8000b18 <__libc_init_array+0x38>)
 8000ae6:	4c0d      	ldr	r4, [pc, #52]	; (8000b1c <__libc_init_array+0x3c>)
 8000ae8:	1ba4      	subs	r4, r4, r6
 8000aea:	10a4      	asrs	r4, r4, #2
 8000aec:	42a5      	cmp	r5, r4
 8000aee:	d109      	bne.n	8000b04 <__libc_init_array+0x24>
 8000af0:	f000 f81a 	bl	8000b28 <_init>
 8000af4:	2500      	movs	r5, #0
 8000af6:	4e0a      	ldr	r6, [pc, #40]	; (8000b20 <__libc_init_array+0x40>)
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <__libc_init_array+0x44>)
 8000afa:	1ba4      	subs	r4, r4, r6
 8000afc:	10a4      	asrs	r4, r4, #2
 8000afe:	42a5      	cmp	r5, r4
 8000b00:	d105      	bne.n	8000b0e <__libc_init_array+0x2e>
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b08:	4798      	blx	r3
 8000b0a:	3501      	adds	r5, #1
 8000b0c:	e7ee      	b.n	8000aec <__libc_init_array+0xc>
 8000b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b12:	4798      	blx	r3
 8000b14:	3501      	adds	r5, #1
 8000b16:	e7f2      	b.n	8000afe <__libc_init_array+0x1e>
 8000b18:	08000b4c 	.word	0x08000b4c
 8000b1c:	08000b4c 	.word	0x08000b4c
 8000b20:	08000b4c 	.word	0x08000b4c
 8000b24:	08000b50 	.word	0x08000b50

08000b28 <_init>:
 8000b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2a:	bf00      	nop
 8000b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b2e:	bc08      	pop	{r3}
 8000b30:	469e      	mov	lr, r3
 8000b32:	4770      	bx	lr

08000b34 <_fini>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	bf00      	nop
 8000b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3a:	bc08      	pop	{r3}
 8000b3c:	469e      	mov	lr, r3
 8000b3e:	4770      	bx	lr
