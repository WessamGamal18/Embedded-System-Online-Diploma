
Unit7_Section1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000002ea  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db6  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  0000127a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ca  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000462  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000637  00000000  00000000  00002946  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002f7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  7a:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Keypad_init>:

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	81 bb       	out	0x11, r24	; 17
	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret

00000094 <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
  94:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	83 ed       	ldi	r24, 0xD3	; 211
  98:	90 e3       	ldi	r25, 0x30	; 48
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_lcd_kick+0x6>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_lcd_kick+0xc>
  a0:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
  a2:	c3 98       	cbi	0x18, 3	; 24
  a4:	08 95       	ret

000000a6 <LCD_check_lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
}

void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
  a6:	8a b3       	in	r24, 0x1a	; 26
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
  ac:	c2 9a       	sbi	0x18, 2	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
  ae:	c1 98       	cbi	0x18, 1	; 24
	LCD_lcd_kick();
  b0:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
  b4:	8a b3       	in	r24, 0x1a	; 26
  b6:	80 6f       	ori	r24, 0xF0	; 240
  b8:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
  ba:	c2 98       	cbi	0x18, 2	; 24
  bc:	08 95       	ret

000000be <LCD_WRITE_COMMAND>:
	
}


void LCD_WRITE_COMMAND(unsigned char command){
  be:	cf 93       	push	r28
  c0:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
  c2:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_check_lcd_isbusy>
		LCD_PORT = command;
  c6:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	89 7f       	andi	r24, 0xF9	; 249
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_WRITE_COMMAND+0x14>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_WRITE_COMMAND+0x1a>
  d8:	00 00       	nop
		_delay_ms(1);
		LCD_lcd_kick();
  da:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <LCD_clear_screen>:
 */ 

#include "lcd.h"

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
  e8:	08 95       	ret

000000ea <LCD_GOTO_XY>:
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	39 f4       	brne	.+14     	; 0xfc <LCD_GOTO_XY+0x12>
	{
		if (position < 16 && position >= 0)
  ee:	60 31       	cpi	r22, 0x10	; 16
  f0:	68 f4       	brcc	.+26     	; 0x10c <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	86 0f       	add	r24, r22
  f6:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
  fa:	08 95       	ret
		}
	}
	if (line == 2)
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	31 f4       	brne	.+12     	; 0x10c <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
 100:	60 31       	cpi	r22, 0x10	; 16
 102:	20 f4       	brcc	.+8      	; 0x10c <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 104:	80 ec       	ldi	r24, 0xC0	; 192
 106:	86 0f       	add	r24, r22
 108:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
 10c:	08 95       	ret

0000010e <LCD_INIT>:
 10e:	87 e8       	ldi	r24, 0x87	; 135
 110:	93 e1       	ldi	r25, 0x13	; 19
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_INIT+0x4>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_INIT+0xa>
 118:	00 00       	nop
	}
}

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 11a:	87 b3       	in	r24, 0x17	; 23
 11c:	8e 60       	ori	r24, 0x0E	; 14
 11e:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 120:	88 b3       	in	r24, 0x18	; 24
 122:	81 7f       	andi	r24, 0xF1	; 241
 124:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	8a bb       	out	0x1a, r24	; 26
 12a:	85 ea       	ldi	r24, 0xA5	; 165
 12c:	9e e0       	ldi	r25, 0x0E	; 14
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_INIT+0x20>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_INIT+0x26>
 134:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 136:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 13a:	88 e3       	ldi	r24, 0x38	; 56
 13c:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 14c:	8f e0       	ldi	r24, 0x0F	; 15
 14e:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
 152:	08 95       	ret

00000154 <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 158:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_check_lcd_isbusy>
		LCD_PORT = character;
 15c:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~(1 << RW_SWITCH);
 15e:	c2 98       	cbi	0x18, 2	; 24
		LCD_CTRL |= (1 << RS_SWITCH);
 160:	c1 9a       	sbi	0x18, 1	; 24
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_WRITE_CHAR+0x12>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_WRITE_CHAR+0x18>
 16c:	00 00       	nop
		_delay_ms(1);
		LCD_lcd_kick();
 16e:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	8c 01       	movw	r16, r24
	int count = 0;
 180:	c0 e0       	ldi	r28, 0x00	; 0
 182:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 184:	14 c0       	rjmp	.+40     	; 0x1ae <LCD_WRITE_STRING+0x38>
		count++;
 186:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 188:	0e 94 aa 00 	call	0x154	; 0x154 <LCD_WRITE_CHAR>
		if (count == 16)
 18c:	c0 31       	cpi	r28, 0x10	; 16
 18e:	d1 05       	cpc	r29, r1
 190:	21 f4       	brne	.+8      	; 0x19a <LCD_WRITE_STRING+0x24>
	}
	if (line == 2)
	{
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 192:	80 ec       	ldi	r24, 0xC0	; 192
 194:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
 198:	0a c0       	rjmp	.+20     	; 0x1ae <LCD_WRITE_STRING+0x38>
		LCD_WRITE_CHAR(*string++);
		if (count == 16)
		{
			LCD_GOTO_XY(2,0);
		}
		else if (count == 32)
 19a:	c0 32       	cpi	r28, 0x20	; 32
 19c:	d1 05       	cpc	r29, r1
 19e:	39 f4       	brne	.+14     	; 0x1ae <LCD_WRITE_STRING+0x38>
		{
			LCD_clear_screen();
 1a0:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_clear_screen>
void LCD_GOTO_XY(unsigned char line, unsigned char position){
	if (line == 1)
	{
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
		}
		else if (count == 32)
		{
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 1ae:	f8 01       	movw	r30, r16
 1b0:	81 91       	ld	r24, Z+
 1b2:	8f 01       	movw	r16, r30
 1b4:	81 11       	cpse	r24, r1
 1b6:	e7 cf       	rjmp	.-50     	; 0x186 <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <main>:
#include "UART.h"
#include "keypad.h"
#include "lcd.h"

int main(void)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	c4 56       	subi	r28, 0x64	; 100
 1cc:	d1 09       	sbc	r29, r1
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
	LCD_INIT();
 1d8:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_INIT>
	Keypad_init();
 1dc:	0e 94 41 00 	call	0x82	; 0x82 <Keypad_init>
	UART_Init();
 1e0:	0e 94 18 01 	call	0x230	; 0x230 <UART_Init>
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	80 e7       	ldi	r24, 0x70	; 112
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x28>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0x32>
 1f4:	00 00       	nop
	_delay_ms(100);
	LCD_GOTO_XY(1,0);
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 75 00 	call	0xea	; 0xea <LCD_GOTO_XY>
	LCD_WRITE_STRING("UART TR");
 1fe:	80 e6       	ldi	r24, 0x60	; 96
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_WRITE_STRING>
	unsigned char String[100];
	UART_SendString("Ready");
 206:	88 e6       	ldi	r24, 0x68	; 104
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 35 01 	call	0x26a	; 0x26a <UART_SendString>
	while(1){
		
			UART_ReceiveString(String);
 20e:	ce 01       	movw	r24, r28
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	0e 94 52 01 	call	0x2a4	; 0x2a4 <UART_ReceiveString>
			LCD_GOTO_XY(2,0);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	0e 94 75 00 	call	0xea	; 0xea <LCD_GOTO_XY>
			LCD_WRITE_STRING(String);
 21e:	ce 01       	movw	r24, r28
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_WRITE_STRING>
			LCD_WRITE_STRING(" <Done> ");
 226:	8e e6       	ldi	r24, 0x6E	; 110
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_WRITE_STRING>
 22e:	ef cf       	rjmp	.-34     	; 0x20e <main+0x4c>

00000230 <UART_Init>:
void UART_Init(void)
{
	//Baudrate 9600
	//U2X: Double the USART Transmission Speed
	//Normal Speed , reset U2X 
	Reset_Bit(UCSRA,U2X);
 230:	59 98       	cbi	0x0b, 1	; 11
	UBRRL = 51;
 232:	83 e3       	ldi	r24, 0x33	; 51
 234:	89 b9       	out	0x09, r24	; 9
	
	//USART Mode Select
	//0 Asynchronous Operation
	Reset_Bit(UCSRC,UMSEL);
 236:	80 b5       	in	r24, 0x20	; 32
 238:	8f 7b       	andi	r24, 0xBF	; 191
 23a:	80 bd       	out	0x20, r24	; 32
	
	//Disable Parity Mode, UPM1:0 = 00
	Reset_Bit(UCSRC,UPM0);
 23c:	80 b5       	in	r24, 0x20	; 32
 23e:	8f 7e       	andi	r24, 0xEF	; 239
 240:	80 bd       	out	0x20, r24	; 32
	Reset_Bit(UCSRC,UPM1);
 242:	80 b5       	in	r24, 0x20	; 32
 244:	8f 7d       	andi	r24, 0xDF	; 223
 246:	80 bd       	out	0x20, r24	; 32
	
	//USBS: Stop Bit Select, for 1-bit select 0
	Reset_Bit(UCSRC,USBS);
 248:	80 b5       	in	r24, 0x20	; 32
 24a:	87 7f       	andi	r24, 0xF7	; 247
 24c:	80 bd       	out	0x20, r24	; 32
	
	//UCSZ1:0: Character Size, for 8-bit UCSZ0:1 , UCSZ1:1 , UCSZ2:0
	Set_Bit(UCSRC,UCSZ0);
 24e:	80 b5       	in	r24, 0x20	; 32
 250:	82 60       	ori	r24, 0x02	; 2
 252:	80 bd       	out	0x20, r24	; 32
	Set_Bit(UCSRC,UCSZ1);
 254:	80 b5       	in	r24, 0x20	; 32
 256:	84 60       	ori	r24, 0x04	; 4
 258:	80 bd       	out	0x20, r24	; 32
	Reset_Bit(UCSRB,UCSZ2);
 25a:	52 98       	cbi	0x0a, 2	; 10
	
	//TXEN: Transmitter Enable, RXEN: Receiver Enable
	Set_Bit(UCSRB,TXEN);
 25c:	53 9a       	sbi	0x0a, 3	; 10
	Set_Bit(UCSRB,RXEN);
 25e:	54 9a       	sbi	0x0a, 4	; 10
 260:	08 95       	ret

00000262 <UART_Send>:
	
}

void UART_Send(unsigned char data)
{
	while(!Read_Bit(UCSRA,UDRE));
 262:	5d 9b       	sbis	0x0b, 5	; 11
 264:	fe cf       	rjmp	.-4      	; 0x262 <UART_Send>
	UDR = data;
 266:	8c b9       	out	0x0c, r24	; 12
 268:	08 95       	ret

0000026a <UART_SendString>:
	}
	Buff[x] = '\0';
}

void UART_SendString(unsigned char* String)
{
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	8c 01       	movw	r16, r24
	unsigned char x;
	for(x=0;x<String[x];x++)
 272:	fc 01       	movw	r30, r24
 274:	80 81       	ld	r24, Z
 276:	88 23       	and	r24, r24
 278:	51 f0       	breq	.+20     	; 0x28e <UART_SendString+0x24>
 27a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_Send(String[x]);
 27c:	0e 94 31 01 	call	0x262	; 0x262 <UART_Send>
}

void UART_SendString(unsigned char* String)
{
	unsigned char x;
	for(x=0;x<String[x];x++)
 280:	cf 5f       	subi	r28, 0xFF	; 255
 282:	f8 01       	movw	r30, r16
 284:	ec 0f       	add	r30, r28
 286:	f1 1d       	adc	r31, r1
 288:	80 81       	ld	r24, Z
 28a:	c8 17       	cp	r28, r24
 28c:	b8 f3       	brcs	.-18     	; 0x27c <UART_SendString+0x12>
	{
		UART_Send(String[x]);
	}
	UART_Send(DefaultStop);
 28e:	8d e0       	ldi	r24, 0x0D	; 13
 290:	0e 94 31 01 	call	0x262	; 0x262 <UART_Send>
}
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <UART_Receive>:
		
unsigned char UART_Receive(void)
{
	while(!Read_Bit(UCSRA,RXC));
 29c:	5f 9b       	sbis	0x0b, 7	; 11
 29e:	fe cf       	rjmp	.-4      	; 0x29c <UART_Receive>
	return UDR;
 2a0:	8c b1       	in	r24, 0x0c	; 12
}
 2a2:	08 95       	ret

000002a4 <UART_ReceiveString>:
	UDR = data;
}


void UART_ReceiveString (unsigned char* Buff)
{
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	7c 01       	movw	r14, r24
	unsigned char x =0;
	Buff[x] = UART_Receive();
 2b0:	0e 94 4e 01 	call	0x29c	; 0x29c <UART_Receive>
 2b4:	f7 01       	movw	r30, r14
 2b6:	80 83       	st	Z, r24
	while(Buff[x] != DefaultStop)
 2b8:	8d 30       	cpi	r24, 0x0D	; 13
 2ba:	61 f0       	breq	.+24     	; 0x2d4 <UART_ReceiveString+0x30>
 2bc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		x++;
 2be:	cf 5f       	subi	r28, 0xFF	; 255
		Buff[x] = UART_Receive();
 2c0:	87 01       	movw	r16, r14
 2c2:	0c 0f       	add	r16, r28
 2c4:	11 1d       	adc	r17, r1
 2c6:	0e 94 4e 01 	call	0x29c	; 0x29c <UART_Receive>
 2ca:	f8 01       	movw	r30, r16
 2cc:	80 83       	st	Z, r24

void UART_ReceiveString (unsigned char* Buff)
{
	unsigned char x =0;
	Buff[x] = UART_Receive();
	while(Buff[x] != DefaultStop)
 2ce:	8d 30       	cpi	r24, 0x0D	; 13
 2d0:	b1 f7       	brne	.-20     	; 0x2be <UART_ReceiveString+0x1a>
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <UART_ReceiveString+0x32>
 2d4:	87 01       	movw	r16, r14
	{
		x++;
		Buff[x] = UART_Receive();
	}
	Buff[x] = '\0';
 2d6:	f8 01       	movw	r30, r16
 2d8:	10 82       	st	Z, r1
}
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	08 95       	ret

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
